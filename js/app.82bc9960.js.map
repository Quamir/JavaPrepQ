{"version":3,"file":"js/app.82bc9960.js","mappings":"yMACEA,EAAAA,EAAAA,IAIU,iBAHRC,EAAAA,EAAAA,IAAaC,IACbD,EAAAA,EAAAA,IAA2BE,IAC3BF,EAAAA,EAAAA,IAAaG,I,gJCDXC,EAAAA,EAAAA,GAAiD,MAA7CC,MAAM,sBAAqB,iBAAa,K,UAC5CD,EAAAA,EAAAA,GAAoE,OAA/DE,IAAAC,EAA4BC,IAAI,GAAGH,MAAM,qB,qBAEhDD,EAAAA,EAAAA,GAEM,OAFDC,MAAM,gBAAc,EACvBD,EAAAA,EAAAA,GAAwE,OAAnEE,IAAAG,EAA+BD,IAAI,GAAGH,MAAM,yB,uEANrDN,EAAAA,EAAAA,IAQS,gBAPPC,EAAAA,EAAAA,IAGcU,EAAA,CAHDC,GAAG,IAAIN,MAAM,e,mBACxB,IAAiD,CAAjDO,EACAC,K,MAEFC,G,aCLJ,MAAMC,EAAS,CAAC,EAKVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAAS,GAAQ,CAAC,YAAY,qBAEzF,Q,sECNQX,EAAAA,EAAAA,GAAoB,SAAjB,iBAAa,K,GAAhBQ,G,kCADJb,EAAAA,EAAAA,IAES,cAAAc,E,CCFb,MAAM,EAAS,CAAC,EAKV,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAAS,GAAQ,CAAC,YAAY,qBAEzF,QJGA,GACEI,WAAY,CAAEC,UAAS,EAAEC,UAASA,IKLpC,MAAM,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,KAEpE,Q,0FCPIhB,EAAAA,EAAAA,GAGM,OAHDC,MAAM,SAAO,EAChBD,EAAAA,EAAAA,GAAoD,MAAhDC,MAAM,eAAc,4BACxBD,EAAAA,EAAAA,GAA0C,QAApCC,MAAM,mBAAkB,WAAK,K,GAEhCA,MAAM,0B,GAGNA,MAAM,S,UAELD,EAAAA,EAAAA,GAAiD,KAA9CC,MAAM,eAAc,0BAAsB,K,UAG7CD,EAAAA,EAAAA,GAA2C,KAAxCC,MAAM,eAAc,oBAAgB,K,wEAb/CN,EAAAA,EAAAA,IAgBU,gBAfRa,GAIAR,EAAAA,EAAAA,GAEM,MAFNS,EAEM,EADJT,EAAAA,EAAAA,GAAqD,aAAAiB,EAAAA,EAAAA,IAA7CC,EAAAC,gBAAgB,yBAAsB,MAEhDnB,EAAAA,EAAAA,GAOM,MAPNU,EAOM,EANJd,EAAAA,EAAAA,IAEYwB,EAAA,CAFDC,SAAS,gBAAgBpB,MAAM,e,mBACtC,IAAiD,CAAjDqB,K,OAEJ1B,EAAAA,EAAAA,IAEYwB,EAAA,CAFDC,SAAS,yBAAyBpB,MAAM,e,mBAC/C,IAA2C,CAA3CsB,K,qECbN5B,EAAAA,EAAAA,IAII,KAJA6B,KAAI,KAASC,EAAAJ,SAAUpB,MAAM,a,EAC7BD,EAAAA,EAAAA,GAEM,aADF0B,EAAAA,EAAAA,IAAaC,EAAAC,OAAA,kBAAAC,GAAA,U,CAMzB,OACIC,MAAO,CACHT,SAAU,CACNU,KAAMC,OACNC,UAAU,KCNtB,MAAM,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAAS,GAAQ,CAAC,YAAY,qBAEzF,QCTA,MAAMC,EAAY,CACd,CACIC,SAAU,0DACVC,OAAQ,SACRC,YAAa,0HACbC,IAAK,IAEP,CACEH,SAAU,uDACVC,OAAQ,yCACRC,YAAa,oMACbC,IAAK,IAEP,CACEH,SAAU,mFACVC,OAAQ,mCACRC,YAAa,mPACbC,IAAK,IAEP,CACEH,SAAU,yEACVC,OAAQ,UACRC,YAAa,yPACbC,IAAK,IAEP,CACEH,SAAU,+FACVC,OAAQ,eACRC,YAAa,wNACbC,IAAK,IAEP,CACEH,SAAU,6EACVC,OAAQ,gHACRC,YAAa,iVACbC,IAAK,IAEP,CACEH,SAAU,qDACVC,OAAQ,4DACRC,YAAa,qTACbC,IAAK,IAEP,CACEH,SAAU,kFACVC,OAAQ,oHACRC,YAAa,iYACbC,IAAK,IAEP,CACEH,SAAU,wDACVC,OAAQ,6DACRC,YAAa,4OACbC,IAAK,IAEP,CACEH,SAAU,2CACVC,OAAQ,6DACRC,YAAa,qVACbC,IAAK,IAEP,CACEH,SAAU,mCACVC,OAAQ,mDACRC,YAAa,sZACbC,IAAK,IAEP,CACEH,SAAU,2DACVC,OAAQ,eACRC,YAAa,wOACbC,IAAK,IAEP,CACEH,SAAU,kDACVC,OAAQ,uEACRC,YAAa,qQACbC,IAAK,IAEP,CACEH,SAAU,uFACVC,OAAQ,sGACRC,YAAa,sYACbC,IAAK,IAEP,CACEH,SAAU,wDACVC,OAAQ,gDACRC,YAAa,6RACbC,IAAK,IAEP,CACEH,SAAU,2EACVC,OAAQ,qEACRC,YAAa,oSACbC,IAAK,IAEP,CACEH,SAAU,8CACVC,OAAQ,gDACRC,YAAa,mYACbC,IAAK,IAEP,CACEH,SAAU,6EACVC,OAAQ,4FACRC,YAAa,+TACbC,IAAK,IAEP,CACEH,SAAU,iDACVC,OAAQ,0EACRC,YAAa,2TACbC,IAAK,IAEP,CACEH,SAAU,oEACVC,OAAQ,yCACRC,YAAa,kXACbC,IAAK,IAEP,CACEH,SAAU,oDACVC,OAAQ,+DACRC,YAAa,6QACbC,IAAK,IAEP,CACEH,SAAU,4DACVC,OAAQ,sBACRC,YAAa,kNACbC,IAAK,IAEP,CACEH,SAAU,oCACVC,OAAQ,2GACRC,YAAa,oaACbC,IAAK,IAEP,CACEH,SAAU,0DACVC,OAAQ,mEACRC,YAAa,yVACbC,IAAK,KAIb,QCnJA,MAAMC,EAAqB,CACzB,CACEJ,SAAU,kDACVC,OAAQ,OACRC,YACE,8KACFC,IAAK,IAEP,CACEH,SACE,sEACFC,OACE,iGACFC,YACE,oTACFC,IAAK,IAEP,CACEH,SACE,qEACFC,OAAQ,OACRC,YACE,oOACFC,IAAK,IAEP,CACEH,SAAU,+DACVC,OAAQ,gBACRC,YACE,4NACFC,IAAK,IAEP,CACEH,SAAU,0DACVC,OAAQ,wDACRC,YACE,uSACFC,IAAK,IAEP,CACEH,SAAU,4DACVC,OAAQ,kCACRC,YACE,6PACFC,IAAK,IAEP,CACEH,SACE,mEACFC,OAAQ,OACRC,YACE,2UACFC,IAAK,IAEP,CACEH,SACE,6FACFC,OAAQ,iDACRC,YACE,sZACFC,IAAK,IAEP,CACEH,SAAU,gEACVC,OAAQ,UACRC,YACE,2TACFC,IAAK,IAEP,CACEH,SAAU,2EACVC,OAAQ,OACRC,YAAa,6KACbC,IAAK,IAEP,CACEH,SAAU,0EACVC,OAAQ,cACRC,YAAa,qIACbC,IAAK,IAEP,CACEH,SAAU,4DACVC,OAAQ,2BACRC,YAAa,iYACbC,IAAK,IAEP,CACEH,SAAU,4DACVC,OAAQ,oCACRC,YAAa,2QACbC,IAAK,IAEP,CACEH,SAAU,yFACVC,OAAQ,QACRC,YAAa,qOACbC,IAAK,IAEP,CACEH,SAAU,4FACVC,OAAQ,0BACRC,YAAa,iUACbC,IAAK,IAEP,CACEH,SAAU,yFACVC,OAAQ,SACRC,YAAa,uOACbC,IAAK,IAEP,CACEH,SAAU,0EACVC,OAAQ,OACRC,YAAa,oMACbC,IAAK,IAEP,CACEH,SAAU,mGACVC,OAAQ,UACRC,YAAa,uMACbC,IAAK,IAEP,CACEH,SAAU,8EACVC,OAAQ,OACRC,YAAa,+JACbC,IAAK,IAEP,CACEH,SAAU,qEACVC,OAAQ,OACRC,YAAa,iLACbC,IAAK,IAEP,CACEH,SAAU,4EACVC,OAAQ,oBACRC,YAAa,0IACbC,IAAK,IAEP,CACEH,SAAU,4EACVC,OAAQ,SACRC,YAAa,yOACbC,IAAK,IAEP,CACEH,SAAU,yDACVC,OAAQ,UACRC,YAAa,0JACbC,IAAK,IAEP,CACEH,SAAU,yEACVC,OAAQ,MACRC,YAAa,yJACbC,IAAK,IAEP,CACEH,SAAU,yEACVC,OAAQ,6BACRC,YAAa,mJACbC,IAAK,IAEP,CACEH,SAAU,6FACVC,OAAQ,QACRC,YAAa,6NACbC,IAAK,IAEP,CACEH,SAAU,sEACVC,OAAQ,cACRC,YAAa,2HACbC,IAAK,IAEP,CACEH,SAAU,+DACVC,OAAQ,OACRC,YAAa,0KACbC,IAAK,IAEP,CACEH,SAAU,oDACVC,OAAQ,QACRC,YAAa,2JACbC,IAAK,IAEP,CACEH,SAAU,4DACVC,OAAQ,SACRC,YAAa,4NACbC,IAAK,IAEP,CACEH,SAAU,qEACVC,OAAQ,SACRC,YAAa,qIACbC,IAAK,IAEP,CACEH,SAAU,oEACVC,OAAQ,iBACRC,YAAa,+IACbC,IAAK,IAEP,CACEH,SAAU,6DACVC,OAAQ,OACRC,YAAa,iPACbC,IAAK,IAEP,CACEH,SAAU,oDACVC,OAAQ,UACRC,YAAa,uHACbC,IAAK,IAEP,CACEH,SAAU,wDACVC,OAAQ,SACRC,YAAa,+KACbC,IAAK,IAEP,CACEH,SAAU,oEACVC,OAAQ,mBACRC,YAAa,uJACbC,IAAK,IAEP,CACEH,SAAU,0EACVC,OAAQ,OACRC,YAAa,0JACbC,IAAK,IAEP,CACEH,SAAU,iFACVC,OAAQ,kBACRC,YAAa,sRACbC,IAAK,IAEP,CACEH,SAAU,uEACVC,OAAQ,2BACRC,YAAa,2PACbC,IAAK,IAEP,CACEH,SAAU,gEACVC,OAAQ,OACRC,YAAa,sMACbC,IAAK,IAEP,CACEH,SAAU,iDACVC,OAAQ,UACRC,YAAa,qHACbC,IAAK,IAEP,CACEH,SAAU,0EACVC,OAAQ,uCACRC,YAAa,wSACbC,IAAK,IAEP,CACEH,SAAU,+EACVC,OAAQ,QACRC,YAAa,8NACbC,IAAK,IAEP,CACEH,SAAU,iDACVC,OAAQ,IACRC,YAAa,6IACbC,IAAK,IAEP,CACEH,SAAU,mFACVC,OAAQ,SACRC,YAAa,wOACbC,IAAK,IAEP,CACEH,SAAU,8DACVC,OAAQ,OACRC,YAAa,0KACbC,IAAK,KAIT,QCrSA,MAAME,EAAoB,CACxB,CACEL,SAAU,qDACVC,OAAQ,gDACRC,YACE,2PACFC,IAAK,IAEP,CACEH,SACE,uEACFC,OAAQ,SACRC,YACE,+LACFC,IAAK,IAEP,CACEH,SAAU,uCACVC,OAAQ,kDACRC,YACE,+QACFC,IAAK,IAEP,CACEH,SAAU,iEACVC,OAAQ,UACRC,YACE,oMACFC,IAAK,IAEP,CACEH,SAAU,kDACVC,OAAQ,SACRC,YACE,kOACFC,IAAK,IAEP,CACEH,SACE,sEACFC,OAAQ,KACRC,YACE,8OACFC,IAAK,IAEP,CACEH,SACE,qGACFC,OAAQ,iCACRC,YACE,kNACFC,IAAK,IAEP,CACEH,SAAU,+DACVC,OAAQ,SACRC,YACE,4LACFC,IAAK,IAEP,CACEH,SACE,qEACFC,OAAQ,MACRC,YACE,mJACFC,IAAK,IAEP,CACEH,SACE,wEACFC,OAAQ,MACRC,YACE,qNACFC,IAAK,IAEP,CACEH,SAAU,+CACVC,OAAQ,uBACRC,YACE,6LACFC,IAAK,IAEP,CACEH,SAAU,8CACVC,OAAQ,MACRC,YACE,6MACFC,IAAK,IAEP,CACEH,SAAU,gEACVC,OAAQ,mCACRC,YACE,8MACFC,IAAK,IAEP,CACEH,SACE,6EACFC,OAAQ,8DACRC,YACE,6SACFC,IAAK,IAEP,CACEH,SACE,qFACFC,OAAQ,WACRC,YACE,+NACFC,IAAK,IAEP,CACEH,SAAU,6CACVC,OAAQ,qBACRC,YACE,uTACFC,IAAK,IAEP,CACEH,SAAU,kEACVC,OAAQ,mBACRC,YACE,oOACFC,IAAK,IAEP,CACEH,SAAU,8CACVC,OAAQ,uBACRC,YACE,kLACFC,IAAK,IAGP,CACEH,SAAU,+CACVC,OAAQ,gDACRC,YACE,4UACFC,IAAK,IAGP,CACEH,SAAU,8DACVC,OAAQ,0BACRC,YACE,0LACFC,IAAK,IAEP,CACEH,SAAU,8DACVC,OAAQ,OACRC,YACE,iMACFC,IAAK,IAEP,CACEH,SAAU,iDACVC,OAAQ,4BACRC,YACE,qaACFC,IAAK,IAEP,CACEH,SAAU,wDACVC,OAAQ,kDACRC,YACE,kUACFC,IAAK,IAGP,CACEH,SAAU,oDACVC,OACE,wEACFC,YACE,6QACFC,IAAK,IAEP,CACEH,SACE,qEACFC,OAAQ,kDACRC,YACE,sYACFC,IAAK,KAIT,QC9LA,MAAMG,EAAW,CACf,CACEN,SAAU,gDACVC,OAAQ,uCACRC,YAAY,kOACZC,IAAK,IAEP,CACEH,SAAU,2CACVC,OAAQ,6BACRC,YACE,4KACFC,IAAK,IAEP,CACEH,SAAU,+BACVC,OAAQ,oCACRC,YACE,2QACFC,IAAK,IAEP,CACEH,SAAU,+BACVC,OAAQ,wCACRC,YACE,8OACFC,IAAK,IAEP,CACEH,SAAU,+BACVC,OAAQ,yCACRC,YACE,oRACFC,IAAK,IAEP,CACEH,SAAU,4CACVC,OAAQ,0BACRC,YACE,6MACFC,IAAK,IAEP,CACEH,SAAU,kCACVC,OAAQ,6BACRC,YACE,0UACFC,IAAK,IAEP,CACEH,SAAU,4CACVC,OAAQ,kEACRC,YACE,8PACFC,IAAK,IAEP,CACEH,SAAU,+BACVC,OAAQ,2DACRC,YACE,iSACFC,IAAK,IAEP,CACEH,SAAU,gCACVC,OAAQ,iEACRC,YACE,yTACFC,IAAK,IAEP,CACEH,SAAU,gEACVC,OAAQ,gDACRC,YACE,oTACFC,IAAK,IAEP,CACEH,SACE,mGACFC,OAAQ,QACRC,YACE,0RACFC,IAAK,IAEP,CACEH,SAAU,+BACVC,OAAQ,8BACRC,YACE,mNACFC,IAAK,IAEP,CACEH,SACE,+FACFC,OAAQ,qCACRC,YACE,0VACFC,IAAK,IAEP,CACEH,SAAU,mCACVC,OAAQ,0DACRC,YACE,iOACFC,IAAK,IAEP,CACEH,SAAU,yDACVC,OAAQ,mBACRC,YACE,wPACFC,IAAK,IAEP,CACEH,SAAU,kCACVC,OAAQ,kEACRC,YACE,8QACFC,IAAK,IAEP,CACEH,SAAU,6DACVC,OAAQ,2BACRC,YACE,iMACFC,IAAK,IAEP,CACEH,SAAU,iDACVC,OAAQ,eACRC,YACE,gLACFC,IAAK,IAEP,CACEH,SACE,6FACFC,OAAQ,QACRC,YACE,+OACFC,IAAK,IAEP,CACEH,SAAU,gEACVC,OAAQ,sCACRC,YACE,wNACFC,IAAK,IAGP,CACEH,SACE,yEACFC,OAAQ,gDACRC,YACE,6NACFC,IAAK,IAGP,CACEH,SAAU,2DACVC,OAAQ,oBACRC,YACE,6JACFC,IAAK,IAGP,CACEH,SAAU,4DACVC,OAAQ,mBACRC,YACE,uMACFC,IAAK,IAGP,CACEH,SACE,uEACFC,OAAQ,uBACRC,YACE,+SACFC,IAAK,IAGP,CACEH,SAAU,4DACVC,OAAQ,mDACRC,YACE,kOACFC,IAAK,IAGP,CACEH,SACE,oEACFC,OAAQ,kCACRC,YACE,8PACFC,IAAK,KAIT,QC3MA,MAAMI,EAAiB,CACrB,CACEP,SAAU,+DACVC,OAAQ,WACRC,YACE,4RACFC,IAAK,IAEP,CACEH,SACE,wFACFC,OAAQ,UACRC,YACE,mLACFC,IAAK,IAEP,CACEH,SACE,kHACFC,OAAQ,aACRC,YACE,yPACFC,IAAK,IAEP,CACEH,SAAU,iEACVC,OAAQ,UACRC,YACE,kLACFC,IAAK,IAEP,CACEH,SAAU,yDACVC,OAAQ,yDACRC,YACE,sOACFC,IAAK,IAEP,CACEH,SAAU,eACVC,OAAQ,4BACRC,YACE,8JACFC,IAAK,IAEP,CACEH,SAAU,8CACVC,OACE,WACFC,YACE,wRACFC,IAAK,IAEP,CACEH,SAAU,kDACVC,OACE,oEACFC,YACE,sSACFC,IAAK,IAEP,CACEH,SAAU,8CACVC,OACE,UACFC,YACE,wQACFC,IAAK,IAEP,CACEH,SACE,4FACFC,OACE,aACFC,YACE,mPACFC,IAAK,IAEP,CACEH,SAAU,2BACVC,OACE,sHACFC,YACE,4RACFC,IAAK,IAEP,CACEH,SAAU,qCACVC,OAAQ,aACRC,YACE,8OACFC,IAAK,IAEP,CACEH,SAAU,yDACVC,OAAQ,UACRC,YACE,wRACFC,IAAK,IAEP,CACEH,SACE,6EACFC,OACE,qIACFC,YACE,ydACFC,IAAK,IAGP,CACEH,SAAU,yCACVC,OAAQ,uCACRC,YACE,2aACFC,IAAK,IAGP,CACEH,SAAU,wCACVC,OACE,6DACFC,YACE,8cACFC,IAAK,IAGP,CACEH,SAAU,2CACVC,OACE,0FACFC,YACE,scACFC,IAAK,KAIT,QCzIA,MAAMK,EAAiB,CACrB,CACER,SAAU,wDACVC,OAAQ,kEACRC,YACE,sQACFC,IAAK,IAGP,CACEH,SAAU,8CACVC,OAAQ,0BACRC,YACE,yMACFC,IAAK,IAGP,CACEH,SAAU,kEACVC,OAAQ,kDACRC,YACE,mTACFC,IAAK,IAGP,CACEH,SACE,0EACFC,OAAQ,uBACRC,YACE,mNACFC,IAAK,IAGP,CACEH,SAAU,4DACVC,OAAQ,qCACRC,YACE,+NACFC,IAAK,IAGP,CACEH,SAAU,kEACVC,OAAQ,uBACRC,YACE,6OACFC,IAAK,IAGP,CACEH,SAAU,iEACVC,OAAQ,mCACRC,YACE,8QACFC,IAAK,IAGP,CACEH,SACE,gGACFC,OAAQ,iCACRC,YACE,2QACFC,IAAK,IAEP,CACEH,SACE,2EACFC,OAAQ,8BACRC,YACE,+OACFC,IAAK,IAGP,CACEH,SACE,2EACFC,OAAQ,gBACRC,YACE,wNACFC,IAAK,IAEP,CACEH,SACE,2EACFC,OAAQ,gBACRC,YACE,wNACFC,IAAK,IAEP,CACEH,SAAU,iDACVC,OAAQ,WACRC,YACE,wIACFC,IAAK,IAEP,CACEH,SACE,yEACFC,OAAQ,YACRC,YACE,+NACFC,IAAK,IAEP,CACEH,SACE,yEACFC,OAAQ,eACRC,YACE,6MACFC,IAAK,IAEP,CACEH,SACE,uEACFC,OAAQ,aACRC,YACE,uMACFC,IAAK,IAEP,CACEH,SACE,wEACFC,OAAQ,WACRC,YACE,oJACFC,IAAK,IAEP,CACEH,SAAU,iEACVC,OAAQ,UACRC,YACE,8QACFC,IAAK,IAEP,CACEH,SAAU,8CACVC,OAAQ,gDACRC,YACE,2WACFC,IAAK,IAEP,CACEH,SACE,wFACFC,OAAQ,YACRC,YACE,2PACFC,IAAK,IAEP,CACEH,SAAU,wDACVC,OACE,qGACFC,YACE,gXACFC,IAAK,IAEP,CACEH,SACE,0EACFC,OACE,wKACFC,YACE,2VACFC,IAAK,IAEP,CACEH,SAAU,wDACVC,OACE,qIACFC,YACE,ubACFC,IAAK,IAEP,CACEH,SAAU,+DACVC,OACE,mFACFC,YACE,6XACFC,IAAK,IAEP,CACEH,SACE,wFACFC,OACE,yJACFC,YACE,+ZACFC,IAAK,IAEP,CACEH,SACE,oFACFC,OACE,sGACFC,YACE,wRACFC,IAAK,IAEP,CACEH,SAAU,oDACVC,OAAQ,aACRC,YACE,+LACFC,IAAK,IAEP,CACEH,SACE,wEACFC,OACE,kGACFC,YACE,iWACFC,IAAK,IAEP,CACEH,SAAU,+DACVC,OACE,+FACFC,YACE,6VACFC,IAAK,IAEP,CACEH,SAAU,4DACVC,OACE,gFACFC,YACE,kTACFC,IAAK,IAEP,CACEH,SACE,6GACFC,OACE,qIACFC,YACE,0WACFC,IAAK,IAEP,CACEH,SACE,oFACFC,OACE,gFACFC,YACE,0YACFC,IAAK,IAEP,CACEH,SACE,mFACFC,OAAQ,qCACRC,YACE,iQACFC,IAAK,IAEP,CACEH,SAAU,6DACVC,OAAQ,MACRC,YACE,4NACFC,IAAK,IAEP,CACEH,SACE,oFACFC,OAAQ,eACRC,YACE,mLACFC,IAAK,IAEP,CACEH,SACE,kFACFC,OAAQ,aACRC,YACE,6KACFC,IAAK,IAEP,CACEH,SACE,mEACFC,OAAQ,yBACRC,YACE,8RACFC,IAAK,IAEP,CACEH,SACE,+EACFC,OAAQ,cACRC,YACE,8VACFC,IAAK,IAEP,CACEH,SACE,qEACFC,OAAQ,8BACRC,YACE,mSACFC,IAAK,KAIT,QCtTA,MAAMM,EAAoB,CACxB,CACET,SACE,gFACFC,OACE,wGACFC,YACE,oNACFC,IAAK,IAEP,CACEH,SAAU,wCACVC,OACE,2GACFC,YACE,2LACFC,IAAK,IAEP,CACEH,SAAU,iEACVC,OAAQ,4BACRC,YACE,uLACFC,IAAK,IAEP,CACEH,SACE,4EACFC,OAAQ,KACRC,YACE,+OACFC,IAAK,IAEP,CACEH,SAAU,qDACVC,OACE,4CACFC,YACE,8LACFC,IAAK,IAEP,CACEH,SAAU,wDACVC,OAAQ,uBACRC,YACE,qIACFC,IAAK,IAEP,CACEH,SACE,sEACFC,OAAQ,0DACRC,YACE,qMACFC,IAAK,IAEP,CACEH,SACE,qFACFC,OAAQ,MACRC,YACE,qIACFC,IAAK,IAEP,CACEH,SAAU,gEACVC,OAAQ,gCACRC,YACE,wNACFC,IAAK,IAEP,CACEH,SAAU,oCACVC,OAAQ,4DACRC,YACE,gMACFC,IAAK,IAGP,CACEH,SAAU,oCACVC,OAAQ,mCACRC,YACE,wNACFC,IAAK,IAEP,CACEH,SACE,yEACFC,OACE,6GACFC,YACE,2RACFC,IAAK,IAEP,CACEH,SACE,+EACFC,OAAQ,IACRC,YACE,kJACFC,IAAK,IAEP,CACEH,SACE,mFACFC,OAAQ,QACRC,YACE,4JACFC,IAAK,IAEP,CACEH,SACE,gFACFC,OAAQ,UACRC,YACE,yKACFC,IAAK,IAEP,CACEH,SAAU,iDACVC,OACE,kCACFC,YACE,yMACFC,IAAK,IAEP,CACEH,SACE,uEACFC,OAAQ,oCACRC,YACE,iLACFC,IAAK,IAEP,CACEH,SAAU,8DACVC,OAAQ,2BACRC,YACE,kPACFC,IAAK,IAEP,CACEH,SACE,wEACFC,OAAQ,8CACRC,YACE,6NACFC,IAAK,IAEP,CACEH,SAAU,sDACVC,OACE,8FACFC,YACE,qNACFC,IAAK,IAEP,CACEH,SAAU,qDACVC,OACE,mEACFC,YACE,iUACFC,IAAK,IAEP,CACEH,SAAU,6CACVC,OAAQ,4DACRC,YACE,kJACFC,IAAK,IAEP,CACEH,SAAU,2CACVC,OAAQ,kDACRC,YACE,0JACFC,IAAK,IAEP,CACEH,SAAU,gDACVC,OAAQ,4CACRC,YACE,uNACFC,IAAK,IAEP,CACEH,SACE,wEACFC,OACE,oGACFC,YACE,iSACFC,IAAK,IAEP,CACEH,SAAU,gEACVC,OACE,qFACFC,YACE,6SACFC,IAAK,IAEP,CACEH,SAAU,iDACVC,OAAQ,mCACRC,YACE,qRACFC,IAAK,KAIT,SCrNA,MAAMO,GAAS,CACb,CACEV,SAAU,uCACVC,OACE,+FACFC,YACE,6LACFC,IAAK,IAEP,CACEH,SAAU,0CACVC,OACE,0DACFC,YACE,6TACFC,IAAK,IAEP,CACEH,SAAU,gDACVC,OACE,sCACFC,YACE,yPACFC,IAAK,IAEP,CACEH,SAAU,mDACVC,OAAQ,2CACRC,YACE,yMACFC,IAAK,IAEP,CACEH,SACE,0FACFC,OAAQ,wDACRC,YACE,uTACFC,IAAK,IAEP,CACEH,SAAU,qDACVC,OACE,gEACFC,YACE,sVACFC,IAAK,IAEP,CACEH,SAAU,8DACVC,OACE,kDACFC,YACE,wOACFC,IAAK,IAEP,CACEH,SACE,mEACFC,OACE,0EACFC,YACE,qWACFC,IAAK,IAEP,CACEH,SAAU,wDACVC,OACE,8BACFC,YACE,2XACFC,IAAK,IAEP,CACEH,SAAU,uDACVC,OACE,8BACFC,YACE,8RACFC,IAAK,IAEP,CACEH,SAAU,sCACVC,OACE,2BACFC,YACE,kuBACFC,IAAK,IAEP,CACEH,SAAU,+DACVC,OACE,0EACFC,YACE,2WACFC,IAAK,IAEP,CACEH,SACE,2FACFC,OACE,KACFC,YACE,0SACFC,IAAK,IAEP,CACEH,SAAU,wCACVC,OACE,yFACFC,YACE,kYACFC,IAAK,IAEP,CACEH,SACE,oEACFC,OACE,+GACFC,YACE,kXACFC,IAAK,IAEP,CACEH,SACE,yEACFC,OACE,KACFC,YACE,+SACFC,IAAK,IAEP,CACEH,SACE,yEACFC,OACE,gFACFC,YACE,+SACFC,IAAK,IAEP,CACEH,SAAU,iDACVC,OACE,yFACFC,YACE,wbACFC,IAAK,KAIT,UCvJA,MAAMQ,GAAW,CACf,CACEX,SAAU,yCACVC,OACE,8DACFC,YACE,kSACFC,IAAK,IAEP,CACEH,SAAU,iDACVC,OACE,2DACFC,YACE,8SACFC,IAAK,IAEP,CACEH,SAAU,kDACVC,OACE,mEACFC,YACE,kSACFC,IAAK,IAEP,CACEH,SAAU,uCACVC,OACE,0FACFC,YACE,qgBACFC,IAAK,IAEP,CACEH,SACE,2EACFC,OACE,sNACFC,YACE,+RACFC,IAAK,IAEP,CACEH,SAAU,oDACVC,OACE,8FACFC,YACE,oQACFC,IAAK,IAEP,CACEH,SAAU,uDACVC,OACE,8FACFC,YACE,yRACFC,IAAK,IAEP,CACEH,SACE,iFACFC,OACE,2GACFC,YACE,2aACFC,IAAK,IAEP,CACEH,SAAU,iCACVC,OACE,6CACFC,YACE,kTACFC,IAAK,IAEP,CACEH,SAAU,uCACVC,OACE,8EACFC,YACE,qSACFC,IAAK,IAEP,CACEH,SAAU,mCACVC,OACE,wKACFC,YACE,sWACFC,IAAK,IAEP,CACEH,SAAU,6CACVC,OACE,sGACFC,YACE,yfACFC,IAAK,IAEP,CACEH,SAAU,0CACVC,OACE,sHACFC,YACE,ocACFC,IAAK,IAEP,CACEH,SAAU,kEACVC,OACE,sGACFC,YACE,mXACFC,IAAK,IAEP,CACEH,SAAU,+CACVC,OAAQ,+CACRC,YACE,8TACFC,IAAK,IAEP,CACEH,SAAU,kDACVC,OAAQ,mDACRC,YACE,4RACFC,IAAK,IAEP,CACEH,SAAU,6CACVC,OACE,qEACFC,YACE,ieACFC,IAAK,IAEP,CACEH,SAAU,kDACVC,OAAQ,4CACRC,YACE,gQACFC,IAAK,IAEP,CACEH,SAAU,uDACVC,OACE,uHACFC,YACE,4PACFC,IAAK,IAEP,CACEH,SAAU,uDACVC,OAAQ,sCACRC,YACE,gMACFC,IAAK,IAGP,CACEH,SAAU,mDACVC,OAAQ,+DACRC,YACE,oTACFC,IAAK,IAGP,CACEH,SACE,qEACFC,OACE,gGACFC,YACE,2NACFC,IAAK,KAIT,UCnLA,MAAMS,GAAuB,CAC3B,CACEZ,SAAU,gEACVC,OACE,kEACFC,YACE,qdACFC,IAAK,IAEP,CACEH,SAAU,+DACVC,OACE,8GACFC,YACE,sdACFC,IAAK,IAEP,CACEH,SAAU,+DACVC,OACE,oCACFC,YACE,2SACFC,IAAK,IAEP,CACEH,SAAU,oCACVC,OACE,kIACFC,YACE,wdACFC,IAAK,IAEP,CACEH,SAAU,kDACVC,OACE,yHACFC,YACE,+hBACFC,IAAK,IAEP,CACEH,SAAU,gEACVC,OAAQ,QACRC,YACE,sNACFC,IAAK,IAEP,CACEH,SAAU,gEACVC,OAAQ,OACRC,YACE,gNACFC,IAAK,IAEP,CACEH,SAAU,mDACVC,OACE,oFACFC,YACE,+IACFC,IAAK,IAEP,CACEH,SACE,2EACFC,OACE,iKACFC,YACE,sKACFC,IAAK,IAEP,CACEH,SAAU,wCACVC,OACE,uIACFC,YACE,sMACFC,IAAK,IAEP,CACEH,SAAU,wCACVC,OACE,sIACFC,YACE,wMACFC,IAAK,IAEP,CACEH,SAAU,uCACVC,OACE,sIACFC,YACE,sJACFC,IAAK,IAEP,CACEH,SAAU,iEACVC,OACE,aACFC,YACE,+JACFC,IAAK,IAEP,CACEH,SACE,yEACFC,OACE,4EACFC,YACE,sUACFC,IAAK,IAEP,CACEH,SACE,yEACFC,OACE,4EACFC,YACE,sUACFC,IAAK,IAEP,CACEH,SAAU,mDACVC,OACE,qDACFC,YACE,+KACFC,IAAK,IAEP,CACEH,SAAU,oDACVC,OACE,0EACFC,YACE,kPACFC,IAAK,IAEP,CACEH,SACE,gFACFC,OAAQ,OACRC,YACE,wMACFC,IAAK,IAEP,CACEH,SACE,yEACFC,OAAQ,OACRC,YACE,sMACFC,IAAK,IAEP,CACEH,SACE,6EACFC,OAAQ,QACRC,YACE,2OACFC,IAAK,IAEP,CACEH,SACE,8EACFC,OACE,gOACFC,YACE,0RACFC,IAAK,IAEP,CACEH,SAAU,+BACVC,OAAQ,QACRC,YACE,4HACFC,IAAK,IAEP,CACEH,SAAU,sDACVC,OAAQ,QACRC,YACE,4HACFC,IAAK,IAEP,CACEH,SAAU,sDACVC,OAAQ,QACRC,YACE,gIACFC,IAAK,IAEP,CACEH,SAAU,yDACVC,OAAQ,OACRC,YACE,8JACFC,IAAK,IAEP,CACEH,SAAU,0CACVC,OACE,+CACFC,YACE,wJACFC,IAAK,IAEP,CACEH,SAAU,0CACVC,OACE,sDACFC,YACE,+JACFC,IAAK,IAEP,CACEH,SAAU,yCACVC,OACE,2DACFC,YACE,yKACFC,IAAK,IAEP,CACEH,SAAU,0CACVC,OACE,kFACFC,YACE,sLACFC,IAAK,IAEP,CACEH,SAAU,yCACVC,OACE,wDACFC,YACE,sKACFC,IAAK,IAEP,CACEH,SAAU,0CACVC,OACE,oEACFC,YACE,mLACFC,IAAK,IAEP,CACEH,SAAU,yDACVC,OAAQ,OACRC,YACE,0LACFC,IAAK,IAEP,CACEH,SAAU,yDACVC,OAAQ,QACRC,YACE,2LACFC,IAAK,IAEP,CACEH,SAAU,8DACVC,OAAQ,KACRC,YACE,4IACFC,IAAK,IAEP,CACEH,SAAU,8DACVC,OAAQ,IACRC,YACE,2MACFC,IAAK,IAEP,CACEH,SAAU,2DACVC,OAAQ,IACRC,YACE,qMACFC,IAAK,IAEP,CACEH,SACE,0EACFC,OAAQ,KACRC,YACE,oOACFC,IAAK,IAEP,CACEH,SACE,uEACFC,OAAQ,KACRC,YACE,8NACFC,IAAK,IAEP,CACEH,SAAU,yDACVC,OACE,iGACFC,YACE,gMACFC,IAAK,IAEP,CACEH,SAAU,wDACVC,OAAQ,OACRC,YACE,yEACFC,IAAK,IAEP,CACEH,SAAU,wDACVC,OAAQ,QACRC,YACE,2EACFC,IAAK,IAEP,CACEH,SAAU,yDACVC,OAAQ,OACRC,YACE,wFACFC,IAAK,IAEP,CACEH,SAAU,8DACVC,OAAQ,KACRC,YACE,2IACFC,IAAK,IAEP,CACEH,SAAU,8DACVC,OAAQ,IACRC,YACE,iJACFC,IAAK,IAEP,CACEH,SAAU,2DACVC,OAAQ,KACRC,YACE,2IACFC,IAAK,IAEP,CACEH,SACE,0EACFC,OACE,KACFC,YACE,2KACFC,IAAK,IAEP,CACEH,SACE,uEACFC,OACE,KACFC,YACE,qKACFC,IAAK,IAEP,CACEH,SAAU,yDACVC,OAAQ,OACRC,YACE,kMACFC,IAAK,IAEP,CACEH,SAAU,0DACVC,OAAQ,OACRC,YACE,iLACFC,IAAK,IAEP,CACEH,SAAU,yDACVC,OAAQ,QACRC,YACE,qLACFC,IAAK,IAEP,CACEH,SAAU,yDACVC,OAAQ,OACRC,YACE,qMACFC,IAAK,IAEP,CACEH,SAAU,gEACVC,OAAQ,QACRC,YACE,oLACFC,IAAK,IAEP,CACEH,SAAU,yDACVC,OAAQ,SACRC,YACE,+KACFC,IAAK,IAEP,CACEH,SAAU,yDACVC,OAAQ,QACRC,YACE,uMACFC,IAAK,IAEP,CACEH,SAAU,yDACVC,OAAQ,QACRC,YACE,0LACFC,IAAK,IAEP,CACEH,SAAU,iCACVC,OAAQ,OACRC,YACE,wHACFC,IAAK,IAEP,CACEH,SAAU,wCACVC,OAAQ,OACRC,YACE,yJACFC,IAAK,IAEP,CACEH,SAAU,iCACVC,OAAQ,QACRC,YACE,6HACFC,IAAK,IAEP,CACEH,SAAU,kCACVC,OAAQ,OACRC,YACE,+HACFC,IAAK,IAEP,CACEH,SAAU,kCACVC,OAAQ,OACRC,YACE,oLACFC,IAAK,IAEP,CACEH,SAAU,kCACVC,OAAQ,QACRC,YACE,uJACFC,IAAK,IAEP,CACEH,SAAU,uCACVC,OAAQ,QACRC,YACE,8IACFC,IAAK,IAEP,CACEH,SAAU,iCACVC,OAAQ,QACRC,YACE,+IACFC,IAAK,KAIT,UCheA,MAAMU,GAAuB,CAC3B,CACEb,SAAU,uDACVC,OACE,gDACFC,YACE,wQACFC,IAAK,IAEP,CACEH,SACE,sEACFC,OACE,yHACFC,YACE,4QACFC,IAAK,IAEP,CACEH,SAAU,qCACVC,OACE,0CACFC,YACE,uPACFC,IAAK,IAEP,CACEH,SAAU,wDACVC,OAAQ,KACRC,YACE,4GACFC,IAAK,IAEP,CACEH,SAAU,uDACVC,OAAQ,OACRC,YACE,mMACFC,IAAK,IAEP,CACEH,SAAU,kCACVC,OAAQ,KACRC,YACE,kJACFC,IAAK,IAEP,CACEH,SAAU,2CACVC,OAAQ,gDACRC,YACE,iLACFC,IAAK,IAEP,CACEH,SAAU,wCACVC,OAAQ,KACRC,YACE,uJACFC,IAAK,IAEP,CACEH,SAAU,qCACVC,OAAQ,QACRC,YACE,4OACFC,IAAK,IAEP,CACEH,SACE,4FACFC,OAAQ,KACRC,YACE,8KACFC,IAAK,IAEP,CACEH,SAAU,6DACVC,OAAQ,2CACRC,YACE,8MACFC,IAAK,IAEP,CACEH,SAAU,6DACVC,OAAQ,mDACRC,YACE,+LACFC,IAAK,IAEP,CACEH,SAAU,+CACVC,OACE,+DACFC,YACE,wQACFC,IAAK,IAEP,CACEH,SAAU,gDACVC,OAAQ,6DACRC,YACE,mKACFC,IAAK,IAEP,CACEH,SAAU,6CACVC,OAAQ,oEACRC,YACE,2OACFC,IAAK,IAEP,CACEH,SAAU,iDACVC,OACE,kEACFC,YACE,0SACFC,IAAK,IAEP,CACEH,SAAU,gDACVC,OAAQ,uDACRC,YACE,sQACFC,IAAK,IAEP,CACEH,SAAU,oDACVC,OACE,kFACFC,YACE,8UACFC,IAAK,IAEP,CACEH,SAAU,oDACVC,OACE,sEACFC,YACE,uUACFC,IAAK,KAIT,UCjJA,MAAMW,GAAgB,CACpB,CACEd,SAAU,iDACVC,OACE,uHACFC,YACE,6LACFC,IAAK,IAEP,CACEH,SAAU,kEACVC,OAAQ,uBACRC,YACE,6NACFC,IAAK,IAEP,CACEH,SACE,wEACFC,OAAQ,2DACRC,YACE,2KACFC,IAAK,IAEP,CACEH,SACE,2EACFC,OAAQ,yCACRC,YACE,gNACFC,IAAK,IAEP,CACEH,SACE,uFACFC,OACE,gFACFC,YACE,qNACFC,IAAK,KAIT,UC3CA,MAAMY,GAAsB,CAC1B,CACEf,SAAU,oDACVC,OACE,0FACFC,YACE,0IACFC,IAAK,IAEP,CACEH,SAAU,2CACVC,OACE,kHACFC,YACE,8MACFC,IAAK,IAEP,CACEH,SAAU,gEACVC,OACE,0FACFC,YACE,mKACFC,IAAK,IAEP,CACEH,SAAU,yCACVC,OACE,oIACFC,YACE,0KACFC,IAAK,IAEP,CACEH,SACE,gGACFC,OACE,kNACFC,YACE,qPACFC,IAAK,IAEP,CACEH,SAAU,6CACVC,OACE,0IACFC,YACE,iLACFC,IAAK,IAEP,CACEH,SAAU,qDACVC,OACE,iKACFC,YACE,yNACFC,IAAK,IAEP,CACEH,SAAU,qDACVC,OACE,kHACFC,YACE,sTACFC,IAAK,IAEP,CACEH,SAAU,iEACVC,OACE,wEACFC,YACE,qMACAC,IAAK,IAET,CACEH,SAAU,qDACVC,OACE,0HACFC,YACE,wNACAC,IAAK,IAET,CACEH,SAAU,kDACVC,OAAQ,uDACRC,YACE,0NACAC,IAAK,IAET,CACEH,SAAU,2CACVC,OACE,gIACFC,YACE,mKACAC,IAAK,IAET,CACEH,SAAU,wDACVC,OACE,4NACFC,YACE,yHACAC,IAAK,IAET,CACEH,SAAU,4DACVC,OACE,wFACFC,YACE,+UACAC,IAAK,IAET,CACEH,SAAU,wDACVC,OAAQ,0CACRC,YACE,gTACAC,IAAK,IAET,CACEH,SAAU,uDACVC,OACE,uEACFC,YACE,0UACAC,IAAK,IAET,CACEH,SAAU,gCACVC,OACE,wFACFC,YACE,yaACAC,IAAK,KAIX,UC1IA,MAAMa,GAA2B,CAC/B,CACEhB,SACE,iFACFC,OACE,4PACFC,YACE,kaACFC,IAAK,IAEP,CACEH,SAAU,8BACVC,OACE,8IACFC,YACE,wTACFC,IAAK,IAEP,CACEH,SAAU,4BACVC,OACE,kJACFC,YACE,0TACFC,IAAK,IAEP,CACEH,SACE,oEACFC,OACE,iJACFC,YACE,kQACFC,IAAK,IAEP,CACEH,SAAU,0DACVC,OACE,wCACFC,YACE,0NACFC,IAAK,IAEP,CACEH,SACE,uEACFC,OACE,4CACFC,YACE,mbACFC,IAAK,IAEP,CACEH,SACE,+FACFC,OACE,6FACFC,YACE,qZACFC,IAAK,IAEP,CACEH,SACE,sEACFC,OACE,0KACFC,YACE,4WACFC,IAAK,KAIT,UCxEA,MAAMc,GAAY,CAChB,CACEjB,SAAU,kDACVC,OAAQ,2CACRC,YACE,oWACFC,IAAK,IAEP,CACEH,SAAU,kDACVC,OACE,6CACFC,YACE,wWACFC,IAAK,IAEP,CACEH,SAAU,iDACVC,OACE,sEACFC,YACE,+PACFC,IAAK,IAEP,CACEH,SAAU,kDACVC,OACE,kFACFC,YACE,4QACFC,IAAK,IAEP,CACEH,SAAU,iDACVC,OACE,0FACFC,YACE,4PACFC,IAAK,IAEP,CACEH,SAAU,kDACVC,OACE,uGACFC,YACE,yQACFC,IAAK,IAEP,CACEH,SACE,uEACFC,OACE,qHACFC,YACE,0YACFC,IAAK,IAEP,CACEH,SAAU,0DACVC,OACE,+HACFC,YACE,6bACFC,IAAK,IAEP,CACEH,SAAU,mDACVC,OACE,qJACFC,YACE,4YACFC,IAAK,IAEP,CACEH,SAAU,mDACVC,OACE,+IACFC,YACE,sYACFC,IAAK,IAEP,CACEH,SAAU,qDACVC,OAAQ,uCACRC,YACE,8bACFC,IAAK,IAEP,CACEH,SAAU,oDACVC,OACE,+FACFC,YACE,4QACFC,IAAK,IAEP,CACEH,SAAU,6DACVC,OAAQ,IACRC,YACE,mHACFC,IAAK,IAEP,CACEH,SAAU,gEACVC,OAAQ,IACRC,YACE,wGACFC,IAAK,IAEP,CACEH,SACE,mEACFC,OAAQ,IACRC,YACE,+FACFC,IAAK,IAEP,CACEH,SAAU,6DACVC,OAAQ,IACRC,YACE,iGACFC,IAAK,IAEP,CACEH,SAAU,4DACVC,OAAQ,IACRC,YACE,4HACFC,IAAK,IAEP,CACEH,SACE,4EACFC,OACE,yGACFC,YACE,yGACFC,IAAK,IAEP,CACEH,SACE,sEACFC,OACE,2EACFC,YACE,mGACFC,IAAK,IAEP,CACEH,SACE,oEACFC,OACE,iMACFC,YACE,gGACFC,IAAK,IAEP,CACEH,SACE,mGACFC,OACE,wEACFC,YACE,oFACFC,IAAK,IAEP,CACEH,SACE,4EACFC,OAAQ,uCACRC,YACE,6HACFC,IAAK,IAEP,CACEH,SACE,oEACFC,OACE,yEACFC,YACE,qKACFC,IAAK,IAEP,CACEH,SACE,sEACFC,OACE,6EACFC,YACE,8MACFC,IAAK,IAEP,CACEH,SAAU,gEACVC,OAAQ,+BACRC,YACE,6IACFC,IAAK,IAEP,CACEH,SACE,sEACFC,OAAQ,+BACRC,YACE,mJACFC,IAAK,IAEP,CACEH,SACE,qEACFC,OAAQ,0BACRC,YACE,qOACFC,IAAK,IAEP,CACEH,SAAU,iEACVC,OAAQ,0BACRC,YACE,qWACFC,IAAK,IAEP,CACEH,SAAU,0CACVC,OACE,qGACFC,YACE,kNACFC,IAAK,IAEP,CACEH,SAAU,8DACVC,OACE,mCACFC,YACE,oRACFC,IAAK,IAEP,CACEH,SAAU,gDACVC,OACE,qCACFC,YACE,qVACFC,IAAK,IAEP,CACEH,SACE,oFACFC,OACE,+IACFC,YACE,2TACFC,IAAK,IAEP,CACEH,SAAU,gDACVC,OACE,4CACFC,YACE,gMACFC,IAAK,IAEP,CACEH,SAAU,gDACVC,OACE,iFACFC,YACE,kQACFC,IAAK,IAEP,CACEH,SAAU,gDACVC,OACE,gHACFC,YACE,0XACFC,IAAK,IAEP,CACEH,SAAU,gDACVC,OACE,uIACFC,YACE,iZACFC,IAAK,IAEP,CACEH,SAAU,uDACVC,OACE,wKACFC,YACE,kUACFC,IAAK,IAEP,CACEH,SACE,yEACFC,OACE,wFACFC,YACE,oWACFC,IAAK,IAEP,CACEH,SACE,2EACFC,OACE,mFACFC,YACE,4RACFC,IAAK,IAEP,CACEH,SACE,+GACFC,OACE,+HACFC,YACE,2eACFC,IAAK,IAEP,CACEH,SAAU,gDACVC,OACE,iFACFC,YACE,+TACFC,IAAK,IAEP,CACEH,SACE,wFACFC,OACE,oKACFC,YACE,2WACFC,IAAK,IAEP,CACEH,SACE,4EACFC,OAAQ,gDACRC,YACE,wPACFC,IAAK,IAEP,CACEH,SACE,yFACFC,OACE,8FACFC,YACE,8NACFC,IAAK,IAEP,CACEH,SACE,iGACFC,OACE,4JACFC,YACE,6fACFC,IAAK,IAEP,CACEH,SACE,iGACFC,OACE,4JACFC,YACE,6fACFC,IAAK,KAIT,UC1XA,MAAMe,GAA2B,CAC/B,CACElB,SAAU,gCACVC,OACE,mIACFC,YACE,2KACFC,IAAK,IAEP,CACEH,SAAU,yDACVC,OAAQ,sCACRC,YACE,mLACFC,IAAK,IAGP,CACEH,SAAU,iDACVC,OAAQ,4DACRC,YACE,wLACFC,IAAK,IAGP,CACEH,SAAU,wCACVC,OAAQ,mDACRC,YACE,oKACFC,IAAK,IAEP,CACEH,SAAU,+CACVC,OAAQ,gEACRC,YACE,8LACFC,IAAK,IAEP,CACEH,SAAU,kDACVC,OACE,uEACFC,YACE,2NACFC,IAAK,IAEP,CACEH,SAAU,qDACVC,OACE,8IACFC,YACE,6MACFC,IAAK,IAEP,CACEH,SACE,0EACFC,OAAQ,gEACRC,YACE,kQACFC,IAAK,IAEP,CACEH,SACE,oEACFC,OACE,8GACFC,YACE,gNACFC,IAAK,IAEP,CACEH,SAAU,sDACVC,OACE,oFACFC,YACE,0PACFC,IAAK,IAEP,CACEH,SAAU,6DACVC,OAAQ,0DACRC,YACE,iMACFC,IAAK,IAEP,CACEH,SACE,wEACFC,OAAQ,OACRC,YACE,iMACFC,IAAK,IAEP,CACEH,SAAU,6BACVC,OACE,kFACFC,YACE,8OACFC,IAAK,IAEP,CACEH,SACE,oEACFC,OACE,sEACFC,YACE,2QACFC,IAAK,IAEP,CACEH,SAAU,oCACVC,OAAQ,qDACRC,YACE,iSACFC,IAAK,IAEP,CACEH,SAAU,gEACVC,OACE,4EACFC,YACE,6VACFC,IAAK,IAEP,CACEH,SACE,qFACFC,OACE,iGACFC,YACE,qQACFC,IAAK,IAEP,CACEH,SAAU,oDACVC,OAAQ,uDACRC,YACE,iOACFC,IAAK,IAEP,CACEH,SAAU,gDACVC,OAAQ,gEACRC,YACE,8IACFC,IAAK,IAEP,CACEH,SACE,uEACFC,OAAQ,yCACRC,YACE,qSACFC,IAAK,IAEP,CACEH,SAAU,oDACVC,OAAQ,uDACRC,YACE,sVACFC,IAAK,IAEP,CACEH,SAAU,wDACVC,OAAQ,+DACRC,YACE,oSACFC,IAAK,IAEP,CACEH,SACE,6EACFC,OAAQ,MACRC,YACE,sNACFC,IAAK,IAEP,CACEH,SAAU,0DACVC,OAAQ,0DACRC,YACE,+LACFC,IAAK,IAEP,CACEH,SAAU,oDACVC,OAAQ,uDACRC,YACE,sVACFC,IAAK,IAEP,CACEH,SAAU,wDACVC,OAAQ,+DACRC,YACE,oSACFC,IAAK,IAEP,CACEH,SACE,6EACFC,OAAQ,MACRC,YACE,sNACFC,IAAK,IAEP,CACEH,SAAU,8BACVC,OAAQ,yDACRC,YACE,8TACFC,IAAK,IAEP,CACEH,SAAU,yCACVC,OACE,8EACFC,YACE,8SACFC,IAAK,IAEP,CACEH,SACE,0EACFC,OACE,oGACFC,YACE,+XACFC,IAAK,IAEP,CACEH,SAAU,kDACVC,OAAQ,yDACRC,YACE,iVACFC,IAAK,IAEP,CACEH,SACE,sEACFC,OACE,+EACFC,YACE,sWACFC,IAAK,IAEP,CACEH,SAAU,kDACVC,OACE,qFACFC,YACE,qZACFC,IAAK,IAEP,CACEH,SACE,sEACFC,OACE,8FACFC,YACE,kaACFC,IAAK,IAEP,CACEH,SAAU,iCACVC,OACE,2FACFC,YACE,0gBACFC,IAAK,IAEP,CACEH,SAAU,+DACVC,OACE,8FACFC,YACE,keACFC,IAAK,IAEP,CACEH,SAAU,0CACVC,OAAQ,4DACRC,YACE,yeACFC,IAAK,IAEP,CACEH,SACE,sEACFC,OAAQ,SACRC,YACE,sdACFC,IAAK,IAEP,CACEH,SACE,uEACFC,OAAQ,UACRC,YACE,6XACFC,IAAK,IAEP,CACEH,SACE,qGACFC,OACE,mIACFC,YACE,qZACFC,IAAK,IAEP,CACEH,SACE,qFACFC,OAAQ,gEACRC,YACE,sYACFC,IAAK,IAEP,CACEH,SACE,wGACFC,OACE,0KACFC,YACE,8ZACFC,IAAK,IAEP,CACEH,SACE,kFACFC,OACE,oFACFC,YACE,2lBACFC,IAAK,IAEP,CACEH,SACE,qGACFC,OACE,oIACFC,YACE,qZACFC,IAAK,IAEP,CACEH,SAAU,2DACVC,OAAQ,kEACRC,YACE,ghBACFC,IAAK,IAEP,CACEH,SACE,qGACFC,OACE,0LACFC,YACE,khBACFC,IAAK,IAEP,CACEH,SAAU,8CACVC,OAAQ,mEACRC,YACE,qZACFC,IAAK,KAIT,UCtXA,MAAMgB,GAA+B,CACnC,CACEnB,SAAU,2BACVC,OACE,2EACFC,YACE,yNACFC,IAAK,IAEP,CACEH,SAAU,sCACVC,OACE,kFACFC,YACE,0NACFC,IAAK,IAEP,CACEH,SAAU,mDACVC,OAAQ,iDACRC,YACE,gOACFC,IAAK,IAEP,CACEH,SAAU,iCACVC,OAAQ,0DACRC,YACE,mPACFC,IAAK,IAEP,CACEH,SAAU,mCACVC,OAAQ,gEACRC,YACE,oVACFC,IAAK,IAEP,CACEH,SAAU,6CACVC,OACE,yHACFC,YACE,oSACFC,IAAK,IAEP,CACEH,SAAU,+BACVC,OACE,iFACFC,YACE,gSACFC,IAAK,IAEP,CACEH,SAAU,0CACVC,OAAQ,6DACRC,YACE,gQACFC,IAAK,IAEP,CACEH,SAAU,4CACVC,OACE,2EACFC,YACE,4OACFC,IAAK,IAEP,CACEH,SAAU,8DACVC,OACE,uEACFC,YACE,0SACFC,IAAK,IAEP,CACEH,SAAU,yCACVC,OACE,8GACFC,YACE,+TACFC,IAAK,IAEP,CACEH,SAAU,4BACVC,OACE,0EACFC,YACE,8SACFC,IAAK,IAEP,CACEH,SAAU,uCACVC,OACE,iGACFC,YACE,sXACFC,IAAK,IAEP,CACEH,SAAU,+BACVC,OAAQ,gDACRC,YACE,iYACFC,IAAK,IAEP,CACEH,SAAU,kDACVC,OACE,oGACFC,YACE,uTACFC,IAAK,IAEP,CACEH,SAAU,iCACVC,OAAQ,mEACRC,YACE,yRACFC,IAAK,IAEP,CACEH,SAAU,0DACVC,OAAQ,mEACRC,YACE,4QACFC,IAAK,IAEP,CACEH,SAAU,uCACVC,OAAQ,0DACRC,YACE,qSACFC,IAAK,IAEP,CACEH,SAAU,oDACVC,OAAQ,uCACRC,YACE,4TACFC,IAAK,IAEP,CACEH,SAAU,gEACVC,OACE,qEACFC,YACE,sbACFC,IAAK,IAEP,CACEH,SAAU,qDACVC,OAAQ,iDACRC,YACE,iVACFC,IAAK,IAEP,CACEH,SAAU,qCACVC,OACE,mFACFC,YACE,wWACFC,IAAK,IAEP,CACEH,SAAU,gDACVC,OAAQ,wDACRC,YACE,2WACFC,IAAK,IAEP,CACEH,SACE,qFACFC,OACE,8GACFC,YACE,ueACFC,IAAK,IAEP,CACEH,SAAU,mCACVC,OACE,iFACFC,YACE,yWACFC,IAAK,IAEP,CACEH,SAAU,8CACVC,OAAQ,sDACRC,YACE,yZACFC,IAAK,IAEP,CACEH,SACE,iFACFC,OACE,0GACFC,YACE,sdACFC,IAAK,IAEP,CACEH,SAAU,wCACVC,OAAQ,gEACRC,YACE,yZACFC,IAAK,IAEP,CACEH,SAAU,mDACVC,OACE,0FACFC,YACE,uWACFC,IAAK,IAEP,CACEH,SACE,oFACFC,OACE,8HACFC,YACE,ocACFC,IAAK,IAEP,CACEH,SAAU,yCACVC,OACE,gFACFC,YACE,+ZACFC,IAAK,IAEP,CACEH,SACE,0FACFC,OACE,oGACFC,YACE,oeACFC,IAAK,IAEP,CACEH,SAAU,wDACVC,OAAQ,yDACRC,YACE,kUACFC,IAAK,IAEP,CACEH,SAAU,qCACVC,OACE,qEACFC,YACE,0ZACFC,IAAK,IAEP,CACEH,SAAU,gDACVC,OAAQ,2DACRC,YACE,0NACFC,IAAK,IAEP,CACEH,SAAU,yDACVC,OAAQ,qDACRC,YACE,iXACFC,IAAK,IAEP,CACEH,SAAU,gCACVC,OACE,sEACFC,YACE,8WACFC,IAAK,IAEP,CACEH,SAAU,2CACVC,OAAQ,8DACRC,YACE,oNACFC,IAAK,IAEP,CACEH,SAAU,2DACVC,OAAQ,6DACRC,YACE,0YACFC,IAAK,IAEP,CACEH,SAAU,6CACVC,OAAQ,+DACRC,YACE,uWACFC,IAAK,IAEP,CACEH,SAAU,gCACVC,OAAQ,iEACRC,YACE,gWACFC,IAAK,IAEP,CACEH,SAAU,2CACVC,OACE,uFACFC,YACE,yXACFC,IAAK,IAEP,CACEH,SAAU,6DACVC,OACE,gFACFC,YACE,+aACFC,IAAK,IAEP,CACEH,SACE,mFACFC,OACE,oIACFC,YACE,yhBACFC,IAAK,IAEP,CACEH,SAAU,6BACVC,OAAQ,6DACRC,YACE,uUACFC,IAAK,IAEP,CACEH,SAAU,8CACVC,OACE,kGACFC,YACE,khBACFC,IAAK,KAIT,UCnWA,MAAMiB,GAAkB,CACtB,CACEpB,SAAU,iCACVC,OAAQ,kDACRC,YACE,iJACFC,IAAK,IAEP,CACEH,SAAU,uCACVC,OAAQ,0DACRC,YACE,qJACFC,IAAK,IAEP,CACEH,SAAU,oDACVC,OAAQ,wDACRC,YACE,2KACFC,IAAK,IAEP,CACEH,SACE,yEACFC,OAAQ,6DACRC,YACE,6MACFC,IAAK,IAEP,CACEH,SAAU,4CACVC,OACE,2EACFC,YACE,6LACFC,IAAK,IAEP,CACEH,SAAU,8DACVC,OAAQ,yCACRC,YACE,uQACFC,IAAK,IAEP,CACEH,SAAU,yCACVC,OAAQ,oCACRC,YACE,iOACFC,IAAK,IAEP,CACEH,SACE,oEACFC,OAAQ,6DACRC,YACE,uPACFC,IAAK,IAEP,CACEH,SAAU,+DACVC,OACE,8EACFC,YACE,qZACFC,IAAK,IAEP,CACEH,SAAU,yCACVC,OACE,+FACFC,YACE,kQACFC,IAAK,IAEP,CACEH,SAAU,uCACVC,OAAQ,0CACRC,YACE,+OACFC,IAAK,IAEP,CACEH,SACE,0FACFC,OACE,iFACFC,YACE,uaACFC,IAAK,IAEP,CACEH,SACE,wFACFC,OACE,uGACFC,YACE,mfACFC,IAAK,IAEP,CACEH,SAAU,2DACVC,OACE,yEACFC,YACE,iZACFC,IAAK,IAEP,CACEH,SACE,qFACFC,OACE,6GACFC,YACE,0ZACFC,IAAK,IAEP,CACEH,SAAU,+DACVC,OACE,+FACFC,YACE,ifACFC,IAAK,IAEP,CACEH,SAAU,iDACVC,OACE,2FACFC,YACE,whBACFC,IAAK,IAEP,CACEH,SACE,+EACFC,OACE,yGACFC,YACE,mfACFC,IAAK,IAEP,CACEH,SACE,8FACFC,OACE,6GACFC,YACE,ijBACFC,IAAK,IAEP,CACEH,SAAU,yCACVC,OACE,yCACFC,YACE,8lBACFC,IAAK,IAEP,CACEH,SACE,8EACFC,OACE,4FACFC,YACE,kmBACFC,IAAK,IAEP,CACEH,SAAU,iDACVC,OACE,mHACFC,YACE,glBACFC,IAAK,KAIT,UCnLA,MAAMkB,GAAe,CACnB,CACErB,SAAU,iCACVC,OAAQ,+CACRC,YACE,kOACFC,IAAK,IAEP,CACEH,SAAU,4CACVC,OACE,uEACFC,YACE,2OACFC,IAAK,IAEP,CACEH,SAAU,wDACVC,OACE,0EACFC,YACE,6UACFC,IAAK,IAEP,CACEH,SAAU,yCACVC,OACE,2EACFC,YACE,wUACFC,IAAK,IAEP,CACEH,SAAU,wCACVC,OAAQ,8DACRC,YACE,oQACFC,IAAK,IAGP,CACEH,SAAU,+CACVC,OACE,uEACFC,YACE,6PACFC,IAAK,IAGP,CACEH,SAAU,gDACVC,OAAQ,KACRC,YACE,6KACFC,IAAK,IAGP,CACEH,SAAU,kDACVC,OAAQ,MACRC,YACE,+PACFC,IAAK,IAEP,CACEH,SAAU,2CACVC,OACE,0EACFC,YACE,8PACFC,IAAK,IAEP,CACEH,SACE,oEACFC,OAAQ,mEACRC,YACE,0SACFC,IAAK,IAEP,CACEH,SAAU,2DACVC,OAAQ,KACRC,YACE,kLACFC,IAAK,IAEP,CACEH,SACE,yFACFC,OACE,oGACFC,YACE,0TACFC,IAAK,IAEP,CACEH,SAAU,8CACVC,OAAQ,MACRC,YACE,6SACFC,IAAK,IAEP,CACEH,SACE,0FACFC,OACE,sEACFC,YACE,0VACFC,IAAK,IAEP,CACEH,SACE,yEACFC,OACE,6EACFC,YACE,2OACFC,IAAK,IAEP,CACEH,SAAU,gDACVC,OACE,qFACFC,YACE,mTACFC,IAAK,IAEP,CACEH,SACE,2EACFC,OAAQ,KACRC,YACE,+UACFC,IAAK,IAEP,CACEH,SACE,kFACFC,OAAQ,MACRC,YACE,iWACFC,IAAK,IAEP,CACEH,SAAU,sDACVC,OACE,+GACFC,YACE,mWACFC,IAAK,IAEP,CACEH,SACE,uEACFC,OAAQ,2DACRC,YACE,geACFC,IAAK,IAEP,CACEH,SAAU,8DACVC,OAAQ,qCACRC,YACE,sTACFC,IAAK,IAEP,CACEH,SACE,2EACFC,OAAQ,MACRC,YACE,6QACFC,IAAK,IAEP,CACEH,SACE,yFACFC,OACE,yFACFC,YACE,+ZACFC,IAAK,IAEP,CACEH,SAAU,8DACVC,OACE,oHACFC,YACE,wcACFC,IAAK,IAEP,CACEH,SACE,oEACFC,OAAQ,2BACRC,YACE,+WACFC,IAAK,IAEP,CACEH,SACE,sEACFC,OAAQ,KACRC,YACE,0dACFC,IAAK,IAEP,CACEH,SACE,sEACFC,OAAQ,+DACRC,YACE,gZACFC,IAAK,IAEP,CACEH,SACE,sFACFC,OACE,oGACFC,YACE,6aACFC,IAAK,IAEP,CACEH,SACE,8EACFC,OAAQ,+CACRC,YACE,sYACFC,IAAK,KAIT,UC5OA,MAAMmB,GAAU,CACd,CACEtB,SAAU,4BACVC,OAAQ,4BACRC,YACE,qJACFC,IAAK,IAEP,CACEH,SAAU,sCACVC,OAAQ,oEACRC,YACE,wNACFC,IAAK,IAEP,CACEH,SACE,+EACFC,OACE,+FACFC,YACE,oUACFC,IAAK,IAEP,CACEH,SAAU,sDACVC,OAAQ,4CACRC,YACE,wQACFC,IAAK,IAEP,CACEH,SAAU,0CACVC,OAAQ,6DACRC,YACE,gOACFC,IAAK,IAEP,CACEH,SACE,4GACFC,OACE,wFACFC,YACE,4TACFC,IAAK,IAEP,CACEH,SAAU,uDACVC,OAAQ,6BACRC,YACE,gQACFC,IAAK,IAEP,CACEH,SACE,0GACFC,OACE,0EACFC,YACE,4SACFC,IAAK,IAEP,CACEH,SAAU,kDACVC,OAAQ,6BACRC,YACE,uLACFC,IAAK,IAEP,CACEH,SAAU,iEACVC,OAAQ,gDACRC,YACE,yQACFC,IAAK,IAEP,CACEH,SAAU,6DACVC,OAAQ,gCACRC,YACE,yYACFC,IAAK,IAEP,CACEH,SAAU,8DACVC,OAAQ,4BACRC,YACE,uSACFC,IAAK,IAEP,CACEH,SACE,uEACFC,OAAQ,gEACRC,YACE,gbACFC,IAAK,IAEP,CACEH,SACE,+EACFC,OAAQ,2BACRC,YACE,oNACFC,IAAK,IAEP,CACEH,SAAU,uDACVC,OAAQ,kCACRC,YACE,gNACFC,IAAK,IAEP,CACEH,SAAU,uDACVC,OAAQ,gCACRC,YACE,oPACFC,IAAK,IAEP,CACEH,SACE,iFACFC,OAAQ,gDACRC,YACE,iXACFC,IAAK,IAEP,CACEH,SACE,gFACFC,OACE,0FACFC,YACE,4ZACFC,IAAK,IAEP,CACEH,SACE,gFACFC,OAAQ,0DACRC,YACE,6fACFC,IAAK,IAEP,CACEH,SACE,sDACFC,OACE,wCACFC,YACE,wgBACFC,IAAK,IAEP,CACEH,SACE,uEACFC,OAAQ,kCACRC,YACE,oYACFC,IAAK,IAEP,CACEH,SAAU,uCACVC,OAAQ,gEACRC,YACE,oYACFC,IAAK,IAEP,CACEH,SACE,qFACFC,OAAQ,+BACRC,YACE,gaACFC,IAAK,IAEP,CACEH,SACE,wFACFC,OAAQ,yCACRC,YACE,2fACFC,IAAK,IAEP,CACEH,SAAU,4DACVC,OAAQ,gCACRC,YACE,waACFC,IAAK,IAEP,CACEH,SAAU,8DACVC,OAAQ,kCACRC,YACE,mTACFC,IAAK,IAEP,CACEH,SACE,iFACFC,OACE,wEACFC,YACE,kdACFC,IAAK,IAEP,CACEH,SAAU,wDACVC,OACE,qEACFC,YACE,8ZACFC,IAAK,IAEP,CACEH,SACE,4EACFC,OACE,kFACFC,YACE,mfACFC,IAAK,IAEP,CACEH,SAAU,gEACVC,OAAQ,iCACRC,YACE,qaACFC,IAAK,IAEP,CACEH,SACE,4EACFC,OACE,kFACFC,YACE,mfACFC,IAAK,IAEP,CACEH,SAAU,uDACVC,OAAQ,+BACRC,YACE,uUACFC,IAAK,IAEP,CACEH,SACE,sEACFC,OAAQ,iEACRC,YACE,kbACFC,IAAK,IAEP,CACEH,SACE,mFACFC,OACE,uEACFC,YACE,wfACFC,IAAK,KAIT,UC5QA,MAAMoB,GAAc,CAClB,CACEvB,SAAU,oCACVC,OAAQ,kDACRC,YACE,kMACFC,IAAK,IAEP,CACEH,SACE,0EACFC,OAAQ,0BACRC,YACE,2PACFC,IAAK,IAEP,CACEH,SACE,sEACFC,OAAQ,mCACRC,YACE,kTACFC,IAAK,IAEP,CACEH,SACE,uEACFC,OAAQ,yBACRC,YACE,qPACFC,IAAK,IAEP,CACEH,SACE,mEACFC,OAAQ,kCACRC,YACE,sTACFC,IAAK,IAEP,CACEH,SACE,oEACFC,OAAQ,gCACRC,YACE,oPACFC,IAAK,IAEP,CACEH,SACE,6EACFC,OAAQ,KACRC,YACE,kQACFC,IAAK,IAEP,CACEH,SACE,mFACFC,OACE,0EACFC,YACE,waACFC,IAAK,IAEP,CACEH,SACE,2GACFC,OAAQ,6BACRC,YACE,ucACFC,IAAK,IAEP,CACEH,SACE,iGACFC,OAAQ,KACRC,YACE,yPACFC,IAAK,IAEP,CACEH,SACE,sEACFC,OAAQ,yBACRC,YACE,+QACFC,IAAK,IAEP,CACEH,SACE,gFACFC,OAAQ,8BACRC,YACE,kTACFC,IAAK,IAEP,CACEH,SACE,iFACFC,OAAQ,6BACRC,YACE,gZACFC,IAAK,IAEP,CACEH,SACE,8EACFC,OAAQ,qDACRC,YACE,4WACFC,IAAK,IAEP,CACEH,SACE,gGACFC,OAAQ,0BACRC,YACE,uSACFC,IAAK,IAEP,CACEH,SACE,sFACFC,OAAQ,+BACRC,YACE,qWACFC,IAAK,IAEP,CACEH,SACE,sFACFC,OACE,qGACFC,YACE,yYACFC,IAAK,IAEP,CACEH,SACE,4GACFC,OAAQ,uCACRC,YACE,sSACFC,IAAK,KAIT,UCpJA,MAAMqB,GAAgB,CACpB,CACExB,SAAU,iCACVC,OACE,6IACFC,YACE,gMACFC,IAAK,IAEP,CACEH,SAAU,iEACVC,OACE,gKACFC,YACE,0LACFC,IAAK,IAEP,CACEH,SAAU,sDACVC,OACE,gHACFC,YACE,8KACFC,IAAK,IAEP,CACEH,SAAU,4CACVC,OACE,0JACFC,YACE,oPACFC,IAAK,IAEP,CACEH,SAAU,yDACVC,OACE,oEACFC,YACE,+LACFC,IAAK,IAEP,CACEH,SAAU,mDACVC,OACE,sGACFC,YACE,0UACFC,IAAK,IAEP,CACEH,SACE,mFACFC,OACE,qHACFC,YACE,0NACFC,IAAK,IAEP,CACEH,SACE,qFACFC,OACE,2IACFC,YACE,kNACFC,IAAK,IAEP,CACEH,SACE,kFACFC,OACE,4GACFC,YACE,sSACFC,IAAK,IAEP,CACEH,SACE,gGACFC,OACE,6KACFC,YACE,4MACFC,IAAK,IAEP,CACEH,SAAU,kEACVC,OACE,sHACFC,YACE,oQACFC,IAAK,IAEP,CACEH,SAAU,6CACVC,OACE,yLACFC,YACE,4QACFC,IAAK,IAEP,CACEH,SAAU,6CACVC,OACE,8KACFC,YACE,2VACFC,IAAK,IAEP,CACEH,SACE,yEACFC,OACE,oKACFC,YACE,6OACFC,IAAK,IAEP,CACEH,SAAU,iEACVC,OACE,iHACFC,YACE,8RACFC,IAAK,IAEP,CACEH,SAAU,+CACVC,OAAQ,uDACRC,YACE,oUACFC,IAAK,IAEP,CACEH,SAAU,8CACVC,OAAQ,qDACRC,YACE,iRACFC,IAAK,IAEP,CACEH,SACE,mEACFC,OACE,uGACFC,YACE,iKACFC,IAAK,IAEP,CACEH,SACE,oEACFC,OACE,uGACFC,YACE,4MACFC,IAAK,IAEP,CACEH,SACE,yEACFC,OACE,8FACFC,YACE,gSACFC,IAAK,IAEP,CACEH,SAAU,qDACVC,OACE,wEACFC,YACE,mMACFC,IAAK,IAEP,CACEH,SACE,oEACFC,OAAQ,kEACRC,YACE,4KACFC,IAAK,IAEP,CACEH,SAAU,wDACVC,OAAQ,qDACRC,YACE,yPACFC,IAAK,IAEP,CACEH,SACE,6EACFC,OACE,2FACFC,YACE,iRACFC,IAAK,IAEP,CACEH,SACE,wEACFC,OACE,4IACFC,YACE,wdACFC,IAAK,IAEP,CACEH,SAAU,wDACVC,OACE,8HACFC,YACE,+cACFC,IAAK,IAEP,CACEH,SAAU,yDACVC,OACE,gJACFC,YACE,ihBACFC,IAAK,IAEP,CACEH,SACE,qEACFC,OACE,yIACFC,YACE,6fACFC,IAAK,IAEP,CACEH,SACE,uEACFC,OACE,+GACFC,YACE,iWACFC,IAAK,IAEP,CACEH,SAAU,4DACVC,OACE,kFACFC,YACE,qeACFC,IAAK,IAEP,CACEH,SACE,8EACFC,OACE,4GACFC,YACE,ujBACFC,IAAK,IAEP,CACEH,SAAU,2DACVC,OACE,uHACFC,YACE,wcACFC,IAAK,IAEP,CACEH,SAAU,+DACVC,OACE,mHACFC,YACE,wiBACFC,IAAK,IAEP,CACEH,SAAU,gEACVC,OACE,iHACFC,YACE,4iBACFC,IAAK,IAEP,CACEH,SACE,0EACFC,OACE,6JACFC,YACE,8jBACFC,IAAK,IAEP,CACEH,SACE,uEACFC,OACE,6HACFC,YACE,uxBACFC,IAAK,KAIT,UC/SA,MAAMsB,GAAkB,CACtB,CACEzB,SAAU,qCACVC,OACE,qHACFC,YACE,gTACFC,IAAK,IAEP,CACEH,SAAU,+CACVC,OACE,OACFC,YACE,iTACFC,IAAK,IAEP,CACEH,SAAU,+CACVC,OAAQ,0DACRC,YACE,yOACFC,IAAK,IAEP,CACEH,SAAU,mDACVC,OACE,gEACFC,YACE,oYACFC,IAAK,IAEP,CACEH,SAAU,2DACVC,OACE,6TACFC,YACE,gZACFC,IAAK,IAEP,CACEH,SACE,sEACFC,OACE,yLACFC,YACE,kYACFC,IAAK,IAEP,CACEH,SAAU,0DACVC,OACE,KACFC,YACE,8QACFC,IAAK,IAEP,CACEH,SAAU,yDACVC,OACE,MACFC,YACE,kUACFC,IAAK,IAEP,CACEH,SAAU,wCACVC,OACE,mDACFC,YACE,iWACFC,IAAK,IAEP,CACEH,SAAU,uCACVC,OACE,kFACFC,YACE,4UACFC,IAAK,IAEP,CACEH,SAAU,kDACVC,OACE,uFACFC,YACE,6UACFC,IAAK,IAEP,CACEH,SAAU,gDACVC,OACE,oFACFC,YACE,yWACFC,IAAK,IAGP,CACEH,SAAU,4DACVC,OACE,sGACFC,YACE,4bACFC,IAAK,IAEP,CACEH,SAAU,0DACVC,OACE,uFACFC,YACE,sXACFC,IAAK,IAEP,CACEH,SACE,yEACFC,OACE,gPACFC,YACE,obACFC,IAAK,IAEP,CACEH,SACE,yEACFC,OACE,sOACFC,YACE,qXACFC,IAAK,IAEP,CACEH,SACE,uEACFC,OACE,8MACFC,YACE,qZACFC,IAAK,IAEP,CACEH,SACE,wEACFC,OACE,qOACFC,YACE,2XACFC,IAAK,IAEP,CACEH,SACE,sEACFC,OACE,kNACFC,YACE,mYACFC,IAAK,IAEP,CACEH,SAAU,kDACVC,OACE,sEACFC,YACE,ibACFC,IAAK,IAEP,CACEH,SAAU,iDACVC,OACE,qEACFC,YACE,sXACFC,IAAK,IAEP,CACEH,SAAU,oDACVC,OACE,wEACFC,YACE,maACFC,IAAK,IAEP,CACEH,SAAU,kDACVC,OACE,sEACFC,YACE,iZACFC,IAAK,IAEP,CACEH,SAAU,gEACVC,OACE,oEACFC,YACE,0aACFC,IAAK,IAEP,CACEH,SAAU,+DACVC,OACE,mEACFC,YACE,iXACFC,IAAK,IAEP,CACEH,SAAU,kEACVC,OACE,mEACFC,YACE,8aACFC,IAAK,IAEP,CACEH,SAAU,gEACVC,OACE,mEACFC,YACE,iZACFC,IAAK,IAEP,CACEH,SACE,sEACFC,OACE,yMACFC,YACE,8jBACFC,IAAK,IAEP,CACEH,SACE,wEACFC,OACE,6MACFC,YACE,gkBACFC,IAAK,IAEP,CACEH,SACE,qEACFC,OACE,wMACFC,YACE,kfACFC,IAAK,IAEP,CACEH,SACE,sEACFC,OACE,mNACFC,YACE,soBACFC,IAAK,IAEP,CACEH,SACE,yEACFC,OACE,iEACFC,YACE,yWACFC,IAAK,IAEP,CACEH,SACE,2EACFC,OACE,uGACFC,YACE,iYACFC,IAAK,IAEP,CACEH,SACE,wEACFC,OACE,qFACFC,YACE,0UACFC,IAAK,IAEP,CACEH,SACE,yEACFC,OACE,gEACFC,YACE,+TACFC,IAAK,IAEP,CACEH,SAAU,mDACVC,OAAQ,4CACRC,YACE,gVACFC,IAAK,IAEP,CACEH,SACE,qEACFC,OACE,4MACFC,YACE,icACFC,IAAK,IAEP,CACEH,SACE,uEACFC,OACE,0OACFC,YACE,+cACFC,IAAK,IAEP,CACEH,SACE,oEACFC,OACE,4MACFC,YACE,0cACFC,IAAK,IAEP,CACEH,SACE,qEACFC,OACE,uNACFC,YACE,8lBACFC,IAAK,IAEP,CACEH,SAAU,0DACVC,OACE,yEACFC,YACE,qPACFC,IAAK,IAEP,CACEH,SAAU,4DACVC,OACE,yEACFC,YACE,iTACFC,IAAK,IAEP,CACEH,SAAU,yDACVC,OACE,yEACFC,YACE,sRACFC,IAAK,KAIT,UC5WA,MAAMuB,GAAgB,CACpB,CACE1B,SAAU,gCACVC,OACE,0EACFC,YACE,8PACFC,IAAK,IAEP,CACEH,SAAU,iDACVC,OACE,4HACFC,YACE,oPACFC,IAAK,IAEP,CACEH,SAAU,qDACVC,OAAQ,MACRC,YACE,4KACFC,IAAK,IAEP,CACEH,SAAU,qDACVC,OAAQ,MACRC,YACE,wLACFC,IAAK,IAEP,CACEH,SAAU,+CACVC,OACE,yHACFC,YACE,8UACFC,IAAK,IAEP,CACEH,SAAU,sDACVC,OACE,2HACFC,YACE,qaACFC,IAAK,IAEP,CACEH,SAAU,wDACVC,OACE,sEACFC,YACE,mSACFC,IAAK,IAEP,CACEH,SAAU,wCACVC,OACE,yFACFC,YACE,qPACFC,IAAK,IAEP,CACEH,SAAU,8CACVC,OAAQ,KACRC,YACE,4SACFC,IAAK,IAEP,CACEH,SAAU,gEACVC,OAAQ,SACRC,YACE,kOACFC,IAAK,IAEP,CACEH,SAAU,sCACVC,OAAQ,MACRC,YACE,iPACFC,IAAK,IAEP,CACEH,SAAU,uCACVC,OAAQ,KACRC,YACE,2QACFC,IAAK,IAEP,CACEH,SAAU,yCACVC,OAAQ,KACRC,YACE,2VACFC,IAAK,IAEP,CACEH,SAAU,kDACVC,OAAQ,MACRC,YACE,+WACFC,IAAK,IAEP,CACEH,SAAU,gDACVC,OAAQ,MACRC,YACE,qOACFC,IAAK,IAEP,CACEH,SAAU,iDACVC,OAAQ,MACRC,YACE,2XACFC,IAAK,IAEP,CACEH,SAAU,qCACVC,OACE,0GACFC,YACE,waACFC,IAAK,IAEP,CACEH,SAAU,0DACVC,OACE,mPACFC,YACE,wTACFC,IAAK,IAEP,CACEH,SAAU,wDACVC,OAAQ,MACRC,YACE,yNACFC,IAAK,IAEP,CACEH,SAAU,2DACVC,OAAQ,MACRC,YACE,+TACFC,IAAK,IAEP,CACEH,SAAU,iEACVC,OACE,+DACFC,YACE,0VACFC,IAAK,IAEP,CACEH,SACE,uFACFC,OACE,MACFC,YACE,+XACFC,IAAK,IAEP,CACEH,SAAU,gEACVC,OACE,8FACFC,YACE,4VACFC,IAAK,IAEP,CACEH,SAAU,+CACVC,OACE,kCACFC,YACE,wTACFC,IAAK,IAEP,CACEH,SAAU,+DACVC,OACE,KACFC,YACE,2SACFC,IAAK,IAEP,CACEH,SAAU,4CACVC,OAAQ,KACRC,YACE,oUACFC,IAAK,IAEP,CACEH,SAAU,+CACVC,OAAQ,KACRC,YACE,mSACFC,IAAK,IAEP,CACEH,SAAU,sCACVC,OACE,8JACFC,YACE,6bACFC,IAAK,IAEP,CACEH,SACE,mEACFC,OACE,4PACFC,YACE,4gBACFC,IAAK,KAIT,UC/NA,MAAMwB,GAAU,CACd,CACE3B,SAAU,iDACVC,OAAQ,uDACRC,YACE,+JACFC,IAAK,IAEP,CACEH,SACE,8EACFC,OAAQ,uDACRC,YACE,0TACFC,IAAK,IAEP,CACEH,SACE,8EACFC,OACE,kHACFC,YACE,2VACFC,IAAK,IAEP,CACEH,SACE,uFACFC,OACE,sFACFC,YACE,uRACFC,IAAK,IAEP,CACEH,SAAU,4DACVC,OAAQ,0DACRC,YACE,uTACFC,IAAK,IAEP,CACEH,SACE,sGACFC,OAAQ,6DACRC,YACE,gWACFC,IAAK,IAEP,CACEH,SACE,+GACFC,OAAQ,kDACRC,YACE,ySACFC,IAAK,IAEP,CACEH,SACE,8EACFC,OAAQ,sCACRC,YACE,0QACFC,IAAK,IAEP,CACEH,SACE,4GACFC,OACE,gGACFC,YACE,wWACFC,IAAK,IAEP,CACEH,SACE,iFACFC,OAAQ,sDACRC,YACE,+eACFC,IAAK,IAEP,CACEH,SACE,yEACFC,OAAQ,+CACRC,YACE,6UACFC,IAAK,IAEP,CACEH,SACE,2FACFC,OAAQ,oDACRC,YACE,0aACFC,IAAK,IAEP,CACEH,SACE,2EACFC,OACE,iFACFC,YACE,0aACFC,IAAK,IAEP,CACEH,SACE,+HACFC,OACE,oHACFC,YACE,sXACFC,IAAK,IAEP,CACEH,SACE,+EACFC,OACE,mFACFC,YACE,oZACFC,IAAK,IAEP,CACEH,SACE,iFACFC,OACE,6FACFC,YACE,ieACFC,IAAK,IAEP,CACEH,SACE,sEACFC,OAAQ,gEACRC,YACE,6ZACFC,IAAK,IAEP,CACEH,SACE,yEACFC,OACE,4GACFC,YACE,oZACFC,IAAK,IAEP,CACEH,SAAU,4DACVC,OACE,2FACFC,YACE,waACFC,IAAK,IAEP,CACEH,SACE,8EACFC,OACE,6EACFC,YACE,2bACFC,IAAK,KAIT,UC1KA,MAAMyB,GAAU,CACd,CACE5B,SAAU,iDACVC,OAAQ,+CACRC,YACE,6SACFC,IAAK,IAEP,CACEH,SACE,8EACFC,OAAQ,+CACRC,YACE,saACFC,IAAK,IAEP,CACEH,SACE,8EACFC,OACE,6EACFC,YACE,oUACFC,IAAK,IAEP,CACEH,SACE,gFACFC,OACE,sGACFC,YACE,gVACFC,IAAK,IAEP,CACEH,SAAU,4DACVC,OAAQ,kEACRC,YACE,8VACFC,IAAK,IAEP,CACEH,SACE,8FACFC,OACE,6EACFC,YACE,wfACFC,IAAK,IAEP,CACEH,SACE,0EACFC,OACE,sEACFC,YACE,qYACFC,IAAK,IAEP,CACEH,SACE,iFACFC,OAAQ,4DACRC,YACE,yYACFC,IAAK,IAEP,CACEH,SACE,yEACFC,OACE,4EACFC,YACE,gWACFC,IAAK,IAEP,CACEH,SACE,2EACFC,OAAQ,iEACRC,YACE,ybACFC,IAAK,IAEP,CACEH,SACE,6GACFC,OACE,0HACFC,YACE,kaACFC,IAAK,IAEP,CACEH,SACE,+EACFC,OACE,+GACFC,YACE,mkBACFC,IAAK,IAEP,CACEH,SACE,iFACFC,OACE,yFACFC,YACE,6fACFC,IAAK,IAEP,CACEH,SACE,sEACFC,OAAQ,gEACRC,YACE,qaACFC,IAAK,IAEP,CACEH,SACE,yEACFC,OACE,0GACFC,YACE,sbACFC,IAAK,IAEP,CACEH,SAAU,4DACVC,OACE,2FACFC,YACE,8aACFC,IAAK,IAEP,CACEH,SACE,8EACFC,OACE,wGACFC,YACE,+bACFC,IAAK,IAEP,CACEH,SACE,8EACFC,OACE,wEACFC,YACE,wZACFC,IAAK,IAEP,CACEH,SACE,8FACFC,OACE,+EACFC,YACE,ugBACFC,IAAK,KAIT,UCrKA,MAAM0B,GAAc,CAClB,CACE7B,SAAU,sCACVC,OAAQ,oDACRC,YACE,iTACFC,IAAK,IAEP,CACEH,SAAU,wDACVC,OACE,wFACFC,YACE,kWACFC,IAAK,IAEP,CACEH,SACE,uFACFC,OAAQ,oEACRC,YACE,+UACFC,IAAK,IAEP,CACEH,SACE,gGACFC,OAAQ,yDACRC,YACE,6UACFC,IAAK,IAEP,CACEH,SACE,kFACFC,OAAQ,OACRC,YACE,8PACFC,IAAK,IAEP,CACEH,SACE,wEACFC,OACE,uFACFC,YACE,mXACFC,IAAK,IAEP,CACEH,SACE,iFACFC,OAAQ,MACRC,YACE,gYACFC,IAAK,IAEP,CACEH,SACE,sEACFC,OAAQ,MACRC,YACE,4QACFC,IAAK,IAEP,CACEH,SAAU,+DACVC,OACE,0HACFC,YACE,sSACFC,IAAK,IAEP,CACEH,SACE,6EACFC,OAAQ,kEACRC,YACE,oVACFC,IAAK,IAEP,CACEH,SACE,uIACFC,OAAQ,4DACRC,YACE,oRACFC,IAAK,IAEP,CACEH,SACE,qGACFC,OAAQ,MACRC,YACE,8TACFC,IAAK,IAEP,CACEH,SAAU,iEACVC,OACE,yFACFC,YACE,yVACFC,IAAK,IAEP,CACEH,SACE,+FACFC,OACE,sGACFC,YACE,sdACFC,IAAK,IAEP,CACEH,SACE,kGACFC,OACE,+GACFC,YACE,yZACFC,IAAK,IAEP,CACEH,SACE,+EACFC,OACE,uEACFC,YACE,oYACFC,IAAK,IAEP,CACEH,SAAU,gEACVC,OAAQ,OACRC,YACE,+VACFC,IAAK,KAIT,UC7IA,MAAM2B,GAAiB,CACrB,CACE9B,SAAU,kDACVC,OACE,sGACFC,YACE,gWACFC,IAAK,IAEP,CACEH,SACE,sEACFC,OACE,6GACFC,YACE,4YACFC,IAAK,IAEP,CACEH,SACE,oEACFC,OACE,2GACFC,YACE,6YACFC,IAAK,IAEP,CACEH,SACE,sFACFC,OAAQ,iEACRC,YACE,uWACFC,IAAK,IAEP,CACEH,SAAU,6CACVC,OAAQ,iEACRC,YACE,2XACFC,IAAK,IAEP,CACEH,SACE,gGACFC,OAAQ,2BACRC,YACE,sUACFC,IAAK,IAEP,CACEH,SAAU,+DACVC,OAAQ,mEACRC,YACE,6bACFC,IAAK,IAEP,CACEH,SACE,kGACFC,OAAQ,6BACRC,YACE,gWACFC,IAAK,IAEP,CACEH,SACE,2EACFC,OAAQ,8CACRC,YACE,uaACFC,IAAK,IAEP,CACEH,SACE,yEACFC,OAAQ,4DACRC,YACE,oWACFC,IAAK,IAEP,CACEH,SACE,4EACFC,OAAQ,mDACRC,YACE,mhBACFC,IAAK,IAEP,CACEH,SACE,4EACFC,OAAQ,iEACRC,YACE,oaACFC,IAAK,IAEP,CACEH,SACE,4GACFC,OACE,2GACFC,YACE,mdACFC,IAAK,IAEP,CACEH,SACE,2GACFC,OACE,sEACFC,YACE,kgBACFC,IAAK,IAEP,CACEH,SACE,wEACFC,OACE,kFACFC,YACE,ubACFC,IAAK,IAEP,CACEH,SACE,4FACFC,OAAQ,iCACRC,YACE,2eACFC,IAAK,IAEP,CACEH,SACE,6EACFC,OACE,+EACFC,YACE,4iBACFC,IAAK,IAEP,CACEH,SACE,0EACFC,OACE,wHACFC,YACE,6lBACFC,IAAK,IAEP,CACEH,SACE,sFACFC,OACE,mFACFC,YACE,ipBACFC,IAAK,KAIT,UCjKA,MAAM4B,GAAW,CACf,CACE/B,SAAU,wCACVC,OAAQ,uDACRC,YACE,0PACFC,IAAK,IAEP,CACEH,SAAU,+DACVC,OAAQ,iDACRC,YACE,sSACFC,IAAK,IAEP,CACEH,SACE,oEACFC,OAAQ,0CACRC,YACE,6OACFC,IAAK,IAEP,CACEH,SACE,iFACFC,OAAQ,kEACRC,YACE,yaACFC,IAAK,IAEP,CACEH,SACE,8GACFC,OACE,qFACFC,YACE,8jBACFC,IAAK,IAEP,CACEH,SAAU,+DACVC,OACE,qFACFC,YACE,2YACFC,IAAK,IAEP,CACEH,SACE,kGACFC,OACE,yFACFC,YACE,6iBACFC,IAAK,IAEP,CACEH,SACE,gGACFC,OACE,uFACFC,YACE,4ZACFC,IAAK,IAEP,CACEH,SACE,uFACFC,OACE,8EACFC,YACE,ggBACFC,IAAK,IAEP,CACEH,SACE,8EACFC,OACE,wEACFC,YACE,geACFC,IAAK,IAEP,CACEH,SACE,sFACFC,OACE,mFACFC,YACE,qvBACFC,IAAK,IAEP,CACEH,SACE,0FACFC,OACE,6FACFC,YACE,omBACFC,IAAK,IAEP,CACEH,SACE,wFACFC,OACE,kGACFC,YACE,soBACFC,IAAK,IAEP,CACEH,SACE,oGACFC,OAAQ,6CACRC,YACE,weACFC,IAAK,IAEP,CACEH,SACE,gFACFC,OACE,kHACFC,YACE,4qBACFC,IAAK,IAEP,CACEH,SAAU,gEACVC,OACE,0GACFC,YACE,wjBACFC,IAAK,IAEP,CACEH,SAAU,iEACVC,OACE,yIACFC,YACE,6rBACFC,IAAK,IAEP,CACEH,SACE,gFACFC,OACE,8EACFC,YACE,8bACFC,IAAK,IAEP,CACEH,SACE,oEACFC,OACE,uFACFC,YACE,khBACFC,IAAK,IAEP,CACEH,SACE,+FACFC,OAAQ,yDACRC,YACE,mUACFC,IAAK,IAEP,CACEH,SAAU,0DACVC,OACE,yFACFC,YACE,oiBACFC,IAAK,IAEP,CACEH,SACE,wHACFC,OACE,4FACFC,YACE,sfACFC,IAAK,IAEP,CACEH,SAAU,+DACVC,OACE,oGACFC,YACE,qdACFC,IAAK,IAEP,CACEH,SACE,iGACFC,OAAQ,mDACRC,YACE,0jBACFC,IAAK,IAEP,CACEH,SAAU,8CACVC,OACE,iFACFC,YACE,+TACFC,IAAK,IAEP,CACEH,SACE,uEACFC,OAAQ,gEACRC,YACE,qPACFC,IAAK,IAEP,CACEH,SACE,2EACFC,OACE,oHACFC,YACE,wcACFC,IAAK,IAEP,CACEH,SACE,4FACFC,OACE,qJACFC,YACE,+aACFC,IAAK,IAEP,CACEH,SACE,iGACFC,OACE,uFACFC,YACE,2TACFC,IAAK,IAEP,CACEH,SACE,wGACFC,OACE,iHACFC,YACE,2UACFC,IAAK,IAEP,CACEH,SACE,4FACFC,OACE,yEACFC,YACE,ifACFC,IAAK,IAEP,CACEH,SACE,gHACFC,OACE,6GACFC,YACE,mWACFC,IAAK,IAEP,CACEH,SACE,yFACFC,OACE,gFACFC,YACE,uRACFC,IAAK,IAEP,CACEH,SACE,kGACFC,OACE,0FACFC,YACE,mYACFC,IAAK,IAEP,CACEH,SACE,yGACFC,OAAQ,kDACRC,YACE,oSACFC,IAAK,IAEP,CACEH,SACE,qFACFC,OACE,wFACFC,YACE,wUACFC,IAAK,IAEP,CACEH,SACE,kGACFC,OAAQ,uDACRC,YACE,4NACFC,IAAK,IAEP,CACEH,SACE,yGACFC,OACE,0GACFC,YACE,wVACFC,IAAK,IAEP,CACEH,SACE,2FACFC,OAAQ,2DACRC,YACE,wUACFC,IAAK,IAEP,CACEH,SACE,qGACFC,OACE,wEACFC,YACE,8XACFC,IAAK,IAEP,CACEH,SACE,kHACFC,OAAQ,wDACRC,YACE,2XACFC,IAAK,IAEP,CACEH,SACE,6FACFC,OAAQ,kEACRC,YACE,4WACFC,IAAK,IAEP,CACEH,SACE,oGACFC,OACE,sFACFC,YACE,kWACFC,IAAK,IAEP,CACEH,SACE,iGACFC,OACE,0EACFC,YACE,mWACFC,IAAK,IAEP,CACEH,SAAU,sCACVC,OACE,iFACFC,YACE,qQACFC,IAAK,IAEP,CACEH,SACE,0EACFC,OACE,uFACFC,YACE,mNACFC,IAAK,IAEP,CACEH,SAAU,qDACVC,OAAQ,KACRC,YACE,6LACFC,IAAK,IAEP,CACEH,SAAU,uDACVC,OAAQ,KACRC,YACE,gMACFC,IAAK,IAEP,CACEH,SACE,6EACFC,OACE,2GACFC,YACE,8OACFC,IAAK,IAEP,CACEH,SAAU,gEACVC,OAAQ,KACRC,YACE,0NACFC,IAAK,IAEP,CACEH,SAAU,iEACVC,OAAQ,iDACRC,YACE,mMACFC,IAAK,IAEP,CACEH,SACE,yFACFC,OACE,uEACFC,YACE,yRACFC,IAAK,IAEP,CACEH,SACE,4FACFC,OACE,iFACFC,YACE,2LACFC,IAAK,IAEP,CACEH,SACE,sEACFC,OACE,0EACFC,YACE,iRACFC,IAAK,IAEP,CACEH,SACE,0EACFC,OACE,qEACFC,YACE,6RACFC,IAAK,IAEP,CACEH,SACE,uEACFC,OAAQ,mCACRC,YACE,oUACFC,IAAK,IAEP,CACEH,SACE,kFACFC,OAAQ,6CACRC,YACE,uNACFC,IAAK,IAEP,CACEH,SACE,sFACFC,OAAQ,gBACRC,YACE,yRACFC,IAAK,IAEP,CACEH,SACE,2EACFC,OAAQ,wCACRC,YACE,wQACFC,IAAK,IAEP,CACEH,SACE,gGACFC,OAAQ,gEACRC,YACE,+WACFC,IAAK,IAEP,CACEH,SACE,wGACFC,OAAQ,kCACRC,YACE,8RACFC,IAAK,IAEP,CACEH,SACE,qGACFC,OAAQ,qDACRC,YACE,uiBACFC,IAAK,IAEP,CACEH,SACE,qFACFC,OAAQ,qCACRC,YACE,8YACFC,IAAK,IAEP,CACEH,SAAU,2CACVC,OACE,4FACFC,YACE,wPACFC,IAAK,IAEP,CACEH,SACE,oEACFC,OAAQ,yDACRC,YACE,oTACFC,IAAK,IAEP,CACEH,SACE,8EACFC,OAAQ,0CACRC,YACE,yMACFC,IAAK,IAEP,CACEH,SAAU,+DACVC,OAAQ,2BACRC,YACE,0QACFC,IAAK,IAEP,CACEH,SACE,8EACFC,OAAQ,2BACRC,YACE,uQACFC,IAAK,IAEP,CACEH,SACE,oEACFC,OAAQ,2BACRC,YACE,iQACFC,IAAK,IAEP,CACEH,SACE,wFACFC,OACE,qGACFC,YACE,mXACFC,IAAK,IAEP,CACEH,SACE,kFACFC,OAAQ,4DACRC,YACE,gZACFC,IAAK,IAEP,CACEH,SAAU,+DACVC,OAAQ,8BACRC,YACE,+QACFC,IAAK,IAEP,CACEH,SACE,iFACFC,OAAQ,2BACRC,YACE,4RACFC,IAAK,IAEP,CACEH,SACE,qEACFC,OAAQ,4BACRC,YACE,yQACFC,IAAK,IAEP,CACEH,SACE,yEACFC,OAAQ,4BACRC,YACE,iTACFC,IAAK,IAEP,CACEH,SAAU,iEACVC,OAAQ,6BACRC,YACE,mRACFC,IAAK,IAEP,CACEH,SACE,kJACFC,OAAQ,wDACRC,YACE,6VACFC,IAAK,IAEP,CACEH,SACE,qFACFC,OAAQ,qDACRC,YACE,mXACFC,IAAK,IAEP,CACEH,SACE,2EACFC,OAAQ,6CACRC,YACE,6SACFC,IAAK,IAEP,CACEH,SAAU,+BACVC,OAAQ,uDACRC,YACE,iMACFC,IAAK,IAEP,CACEH,SAAU,6DACVC,OAAQ,kDACRC,YACE,wMACFC,IAAK,IAEP,CACEH,SACE,mFACFC,OACE,oFACFC,YACE,0SACFC,IAAK,IAEP,CACEH,SACE,mEACFC,OACE,4EACFC,YACE,sMACFC,IAAK,IAEP,CACEH,SACE,yFACFC,OACE,qEACFC,YACE,oRACFC,IAAK,IAEP,CACEH,SACE,qFACFC,OAAQ,oEACRC,YACE,oPACFC,IAAK,IAEP,CACEH,SACE,8FACFC,OAAQ,+CACRC,YACE,qPACFC,IAAK,IAEP,CACEH,SAAU,6DACVC,OAAQ,wCACRC,YACE,8KACFC,IAAK,IAEP,CACEH,SACE,yEACFC,OAAQ,uCACRC,YACE,2UACFC,IAAK,IAEP,CACEH,SACE,6EACFC,OAAQ,8CACRC,YACE,wOACFC,IAAK,IAEP,CACEH,SACE,qGACFC,OAAQ,uCACRC,YACE,8ZACFC,IAAK,IAEP,CACEH,SACE,0EACFC,OAAQ,0BACRC,YACE,oZACFC,IAAK,IAEP,CACEH,SACE,wEACFC,OACE,0FACFC,YACE,6iBACFC,IAAK,IAEP,CACEH,SAAU,0DACVC,OAAQ,2BACRC,YACE,qfACFC,IAAK,IAEP,CACEH,SAAU,wCACVC,OACE,0FACFC,YACE,4PACFC,IAAK,IAEP,CACEH,SACE,6FACFC,OACE,iFACFC,YACE,qMACFC,IAAK,IAEP,CACEH,SACE,8FACFC,OACE,iFACFC,YACE,2MACFC,IAAK,IAEP,CACEH,SACE,uHACFC,OAAQ,KACRC,YACE,4GACFC,IAAK,IAEP,CACEH,SACE,0HACFC,OACE,mHACFC,YACE,2VACFC,IAAK,IAEP,CACEH,SACE,yHACFC,OACE,iHACFC,YACE,odACFC,IAAK,IAEP,CACEH,SACE,mHACFC,OACE,+IACFC,YACE,0YACFC,IAAK,IAEP,CACEH,SACE,8EACFC,OACE,uGACFC,YACE,6XACFC,IAAK,IAEP,CACEH,SACE,kFACFC,OACE,yIACFC,YACE,qWACFC,IAAK,IAEP,CACEH,SACE,yFACFC,OACE,8EACFC,YACE,6PACFC,IAAK,IAEP,CACEH,SACE,oGACFC,OACE,2KACFC,YACE,wfACFC,IAAK,IAEP,CACEH,SACE,mJACFC,OACE,kJACFC,YACE,0fACFC,IAAK,KAIT,UC52BA,MAAM6B,GAAgB,CACpB,CACEhC,SACE,2FACFC,OACE,+EACFgC,QAAS,CACP,+BACA,0BACA,yCAEF/B,YAAc,oxBAIdC,IAAK,IAEP,CACEH,SACE,mFACFC,OAAQ,IACRgC,QAAS,CAAC,IAAK,OAAQ,KAAM,aAC7B/B,YACE,6LACFC,IAAK,IAEP,CACEH,SACE,kFACFC,OAAQ,cACRgC,QAAS,CACP,4BACA,qCACC,yFAGD,uBAEF/B,YAAc,kHACdC,IAAK,IAEP,CACEH,SACE,8JACFC,OAAQ,QACRgC,QAAS,CAAC,MAAO,iBAAkB,YAAa,SAChD/B,YACE,+WACFC,IAAK,KAIT,UhCGA,IACEzB,WAAY,CAAEwD,SAAQA,GACtBC,OACE,MAAM,CACJnD,eAAiB,EAErB,EACAoD,QAAS,CACPC,iBACEC,KAAKtD,eAAiBe,EAAAA,OACpBK,EAAAA,OACAC,EAAAA,OACAC,EAAAA,OACAC,EAAAA,OACAC,EAAAA,OACAC,GAAAA,OACAC,GAAAA,OACAC,GAAAA,OACAC,GAAAA,OACAC,GAAAA,OACAC,GAAAA,OACAC,GAAAA,OACAC,GAAAA,OACAC,GAAAA,OACAC,GAAAA,OACAC,GAAAA,OACAC,GAAAA,OACAC,GAAAA,OACAC,GAAAA,OACAC,GAAAA,OACAC,GAAAA,OACAC,GAAAA,OACAC,GAAAA,OACAC,GAAAA,OACAC,GAAAA,OACAC,GAAAA,OACAC,GAAAA,OACAS,GAASC,OACTC,GAAQD,MAEZ,GAEFE,UACEJ,KAAKD,gBACP,GiC5FF,MAAM,IAA2B,OAAgB,GAAQ,CAAC,CAAC,SAAS,GAAQ,CAAC,YAAY,qBAEzF,U,UCJavE,MAAM,a,qIAJfN,EAAAA,EAAAA,IAWU,iBAVNC,EAAAA,EAAAA,IAEakF,EAAA,CAFD7E,MAAM,aAAc8E,kBAAmB7D,EAAA6D,kBAAoBP,eAAgBtD,EAAAsD,eAClFQ,eAAgB9D,EAAA8D,eAAiBC,mBAAoBC,EAAAC,UAAYC,cAAcF,EAAAG,a,sGAEpFrF,EAAAA,EAAAA,GAKM,MALNQ,GAKM,gBAJFb,EAAAA,EAAAA,IAG2E2F,EAAAA,GAAA,MAAAC,EAAAA,EAAAA,IAHhCL,EAAAM,uBAAqB,CAAzCrD,EAAUsD,M,WAAjCC,EAAAA,EAAAA,IAG2EC,EAAA,CAHRC,IAAKH,E,WAAOI,IAAI,gBAC/E5F,MAAM,WAAY,iBAAgBiB,EAAA4E,UAAYC,eAAgBN,EAAQ,EAAIO,aAAc7D,EAASA,SAChGC,OAAQD,EAASC,OAASC,YAAaF,EAASE,YAAc,eAAcF,EAASG,IACrF2D,wBAAyBf,EAAAgB,6B,uIAElCtG,EAAAA,EAAAA,IAA4FuG,EAAA,CAA1ElG,MAAM,mBAAoB,gBAAeiB,EAAAkF,c,qGCTtDnG,MAAM,uB,IACFA,MAAM,oB,uBAaPD,EAAAA,EAAAA,GAAwB,YAAlB,eAAW,K,+EAf7BL,EAAAA,EAAAA,IAmBM,aAlBFK,EAAAA,EAAAA,GAiBM,MAjBNQ,GAiBM,EAhBFR,EAAAA,EAAAA,GAEM,MAFNS,GAEM,EADFT,EAAAA,EAAAA,GAAoC,SAAjC,aAASiB,EAAAA,EAAAA,IAAGQ,EAAAsE,gBAAc,MAEjC/F,EAAAA,EAAAA,GAEM,OAFDC,OAAKoG,EAAAA,EAAAA,IAAA,CAAC,qBAAoB,SAAsBnF,EAAAoF,cAAa,iBAAoBpF,EAAAqF,kB,EAClFvG,EAAAA,EAAAA,GAAyB,UAAAiB,EAAAA,EAAAA,IAAnBQ,EAAAuE,cAAY,OAEI,IAAfvE,EAAA+E,cAAW,WAAtB7G,EAAAA,EAAAA,IAA0E,O,MAA3CO,IAAKuB,EAAA+E,YAAapG,IAAI,sB,2CACrDT,EAAAA,EAAAA,IAIM2F,EAAAA,GAAA,MAAAC,EAAAA,EAAAA,IAJ8DL,EAAAuB,cAAY,CAAhCtE,EAAUsD,M,WAA1D9F,EAAAA,EAAAA,IAIM,OAJDM,MAAM,6BAAwE2F,IAAKH,G,EACpF7F,EAAAA,EAAAA,IAEgD8G,EAAA,C,WAF/Bb,IAAI,kBAAkB5F,MAAM,mBAAoB0G,gBAAgBzB,EAAA0B,oBAC5EH,aAAcvB,EAAAuB,aAAeV,eAAgBtE,EAAAsE,eAAiBc,YAAapB,EAC3E,cAAavE,EAAA4F,Y,oGAEtB9G,EAAAA,EAAAA,GAGM,OAHDC,OAAKoG,EAAAA,EAAAA,IAAA,CAAC,wBAAuB,iCAA4CnF,EAAAqF,eAAiBrF,EAAAoF,kB,CAC3FhF,IACAtB,EAAAA,EAAAA,GAA0B,UAAAiB,EAAAA,EAAAA,IAAnBQ,EAAAY,aAAW,U,WChBzBpC,MAAM,U,IAGFA,MAAM,kB,2CAHfN,EAAAA,EAAAA,IAMM,MANNa,GAMM,EALFR,EAAAA,EAAAA,GACS,UADDC,OAAKoG,EAAAA,EAAAA,IAAA,CAAC,iBAAgB,eAA0BnF,EAAA6F,aAAcC,QAAKC,EAAA,KAAAA,EAAA,OAAAC,IAAEhC,EAAAiC,aAAAjC,EAAAiC,eAAAD,K,SAE7ElH,EAAAA,EAAAA,GAEM,MAFNS,GAEM,EADFT,EAAAA,EAAAA,GAAsC,UAAAiB,EAAAA,EAAAA,IAAhCQ,EAAAgF,aAAahF,EAAAoF,cAAW,M,CAM1C,QACI/E,MAAO,CACH2E,aAAc,CACV1E,KAAMqF,MACNnF,UAAU,GAEd4E,YAAa,CACT9E,KAAMsF,OACNpF,UAAU,GAEd8D,eAAgB,CACZhE,KAAMsF,OACNpF,UAAU,GAEd6E,WAAW,CACP/E,KAAMuF,QACNrF,UAAU,IAGlBqC,OACI,MAAO,CACHyC,WAAW,EACXQ,YAAa,EAErB,EACAhD,QAAS,CACL4C,cACK1C,KAAKqC,aAGNrC,KAAKsC,WAAatC,KAAKsC,UACvBtC,KAAK+C,UAAY/C,KAAKgC,aAAahC,KAAKoC,eAAiBpC,KAAKgD,QAAQrF,OACtEqC,KAAKiD,MAAM,iBAAkBjD,MAC7BA,KAAKiD,MAAM,kBAAmBjD,KAAK+C,WAEvC,EACAG,cACIlD,KAAKsC,WAAY,CACrB,GAGJlC,UACIJ,KAAK8C,YAAcK,KAAKC,MAAMD,KAAKE,SAAWrD,KAAKgC,aAAa9B,OACpE,GC/CJ,MAAM,IAA2B,OAAgB,GAAQ,CAAC,CAAC,SAAS,IAAQ,CAAC,YAAY,qBAEzF,UFiBA,IACI9D,WAAY,CAAEkH,eAAcA,IAC5BjG,MAAO,CACHiE,eAAgB,CACZhE,KAAMsF,OACNpF,UAAU,GAEd+D,aAAc,CACVjE,KAAMC,OACNC,UAAU,GAEdG,OAAQ,CACJL,KAAMC,OACNC,UAAU,GAEdI,YAAa,CACTN,KAAMC,OACNC,UAAU,GAEd+F,cAAe,CACXjG,KAAMqF,MACNnF,UAAU,GAEduE,YAAa,CACTzE,KAAMC,OACNiG,WAAW,IAGnB3D,OACI,MAAO,CACHwB,UAAWrB,KAAKuD,cAChB1B,eAAe,EACfC,eAAe,EACfO,YAAY,EAEpB,EACAoB,SAAU,CACNzB,eAEI,MAAM0B,EAAqB1D,KAAKqB,UAAUsC,MAAKC,GAAKA,EAAEjG,SAAWqC,KAAKrC,SAGtE,GAAI+F,GAAsBG,OAAOC,UAAUC,eAAeC,KAAKN,EAAoB,WAAY,CAC3F,MAAM/D,EAAU+D,EAAmB/D,QAAQsE,QAAOC,GAAUA,IAAWlE,KAAKrC,SAG5E,OAFAgC,EAAQwE,KAAKnE,KAAKrC,QAClBgC,EAAQyE,MAAK,IAAMjB,KAAKE,SAAW,KAC5B1D,CACX,CAGA,IAAIA,EAAU,GACV0E,EAAgBrE,KAAKqB,UAAU4C,QAAOL,GAAKA,EAAEjG,SAAWqC,KAAKrC,SACjE,MAAM2G,EAAsBtE,KAAKuE,uBAAuB,EAAGF,EAAcnE,OAAS,GAElF,IAAK,IAAIsE,EAAI,EAAGA,EAAIF,EAAoBpE,OAAQsE,IAC5C7E,EAAQwE,KAAKE,EAAcC,EAAoBE,IAAI7G,QAWvD,OAPKgC,EAAQ8E,SAASzE,KAAKrC,SACvBgC,EAAQwE,KAAKnE,KAAKrC,QAItBgC,EAAQyE,MAAK,IAAMjB,KAAKE,SAAW,KAE5B1D,CACX,GAGJS,UAEA,EACAN,QAAS,CACLqC,oBAAoBuC,GAChB1E,KAAK2E,MAAMC,gBAAgBC,SAASX,IAC5BA,IAAWQ,EACXR,EAAO5B,WAAY,EAEnBtC,KAAKiD,MAAM,0BAA2ByB,EAC1C,GAER,EACAH,uBAAuBO,EAAKC,GACxB,MAAMC,EAAU,IAAIC,IACpB,MAAOD,EAAQE,KAAOJ,EAAK,CACvB,MAAMhC,EAAcK,KAAKC,MAAMD,KAAKE,UAAY0B,EAAW,IAC3DC,EAAQG,IAAIrC,EAChB,CACA,OAAOH,MAAMyC,KAAKJ,EACtB,EACAK,oBACI,IAAI9E,EAAiB,EAQrB,OAPAP,KAAK2E,MAAMC,gBAAgBC,SAASX,IAC5BA,EAAOnB,WAAamB,EAAO5B,YAC3B/B,IACAP,KAAK8B,eAAgB,EACzB,IAEJ9B,KAAKqC,YAAa,EACX9B,CACX,EACA+E,kBACI,MAAMC,EAAmBvF,KAAK2E,MAAMC,gBAAgBY,MAAMtB,IACtD,IAAKA,EAAOnB,WAAamB,EAAO5B,UAE5B,OADAtC,KAAK6B,eAAgB,GACd,CACX,IAGJ,OAAI0D,EACO,CACHjE,eAAgBtB,KAAKsB,eACrBmE,SAAUzF,KAAK0F,IAAIC,gBAGvB,CAER,EACA/E,cACIZ,KAAK2E,MAAMC,gBAAgBC,SAASX,IAChClE,KAAK8B,eAAgB,EACrB9B,KAAK6B,eAAgB,EACrB7B,KAAKqC,YAAa,EAClB6B,EAAOhB,aAAY,EAAK,GAEhC,IGjJR,MAAM,IAA2B,OAAgB,GAAQ,CAAC,CAAC,SAAS,IAAQ,CAAC,YAAY,qBAEzF,U,iECRS1H,MAAM,Q,IACFA,MAAM,0B,IAGNA,MAAM,mB,YAIPD,EAAAA,EAAAA,GAAiB,SAAd,cAAU,K,IAAbsB,I,IAECrB,MAAM,yB,YAIPD,EAAAA,EAAAA,GAAmB,SAAhB,gBAAY,K,IAAfqK,I,2CAdR1K,EAAAA,EAAAA,IAgBM,MAhBNa,GAgBM,EAfFR,EAAAA,EAAAA,GAEM,MAFNS,GAEM,EADFT,EAAAA,EAAAA,GAAuD,UAAAiB,EAAAA,EAAAA,IAAhDQ,EAAAsD,mBAAoB,OAAG9D,EAAAA,EAAAA,IAAGQ,EAAA+C,gBAAc,MAEnDxE,EAAAA,EAAAA,GAEM,MAFNU,GAEM,EADFV,EAAAA,EAAAA,GAAsB,UAAAiB,EAAAA,EAAAA,IAAfC,EAAAoJ,UAAQ,MAEnBtK,EAAAA,EAAAA,GAES,UAFDC,MAAM,mBAAoB+G,QAAKC,EAAA,KAAAA,EAAA,GAAAsD,GAAE5I,EAAA+F,MAAM,wB,KAG/C1H,EAAAA,EAAAA,GAEM,MAFNwK,GAEM,EADFxK,EAAAA,EAAAA,GAA6D,UAAAiB,EAAAA,EAAAA,IAAtDQ,EAAAuD,gBAAiB,iBAAa/D,EAAAA,EAAAA,IAAGQ,EAAA+C,gBAAc,MAE1DxE,EAAAA,EAAAA,GAES,UAFDC,MAAM,gBAAiB+G,QAAKC,EAAA,KAAAA,EAAA,GAAAsD,GAAE5I,EAAA+F,MAAM,kB,MAMpD,QACI5F,MAAO,CACHiD,kBAAmB,CACfhD,KAAMsF,OACNpF,UAAU,GAGduC,eAAgB,CACZzC,KAAMsF,OACNpF,UAAU,GAGd+C,eAAgB,CACZjD,KAAMsF,OACNpF,UAAU,IAIlBqC,OACI,MAAO,CACHgG,SAAU,KAElB,EACA/F,QAAS,CACLkG,aACI,IAAIC,EAAMC,OAAOT,SAAS1I,KACtB8I,EAAWI,EAAIE,UAAUF,EAAIG,YAAY,KAAO,GACpDpG,KAAK6F,SAAWA,CACpB,GAEJzF,UACIJ,KAAKgG,YACT,GC7CJ,MAAM,IAA2B,OAAgB,GAAQ,CAAC,CAAC,SAAS,IAAQ,CAAC,YAAY,qBAEzF,U,iECRSxK,MAAM,a,YACPD,EAAAA,EAAAA,GAAuB,SAApB,oBAAgB,K,IACdC,MAAM,oB,0DAFfN,EAAAA,EAAAA,IAWM,MAXNa,GAWM,CAVFC,IACAT,EAAAA,EAAAA,GAQM,MARNU,GAQM,gBAPFf,EAAAA,EAAAA,IAMM2F,EAAAA,GAAA,MAAAC,EAAAA,EAAAA,IALwB9D,EAAA2E,cAAY,CAA9BhE,EAAQqD,M,WADpB9F,EAAAA,EAAAA,IAMM,OANDM,MAAM,6BAEN2F,IAAKH,EACLuB,QAAKuD,GAAErF,EAAA4F,aAAa1I,EAAO8H,W,EAE5BlK,EAAAA,EAAAA,GAA2C,SAAxC,aAASiB,EAAAA,EAAAA,IAAGmB,EAAO2D,gBAAc,a,UAQpD,QACIjE,MAAM,CACFsE,aAAa,CACTrE,KAAMqF,MACN2D,QAASA,IAAM,KAGvBxG,QAAQ,CACJuG,aAAaZ,GACTS,OAAOK,SAAS,CACZC,IAAKf,EACLgB,KAAM,EACNC,SAAU,UAElB,ICxBR,MAAM,IAA2B,OAAgB,GAAQ,CAAC,CAAC,SAAS,IAAQ,CAAC,YAAY,qBAEzF,UCTA,MAAMC,GAAS,CACb,CACEjJ,SAAU,kCACVC,OACE,qFACFC,YACE,yOACAC,IAAK,IAGT,CACEH,SAAU,mCACVC,OACE,gHACFC,YACE,8MACAC,IAAK,IAGT,CACEH,SAAU,mCACVC,OACE,qDACFC,YACE,4PACAC,IAAK,IAGT,CACEH,SAAU,4CACVC,OACE,4FACFC,YACE,iTACAC,IAAK,IAET,CACEH,SACE,6EACFC,OACE,gLACFC,YACE,qaACFC,IAAK,IAEP,CACEH,SACE,8EACFC,OACE,iKACFC,YACE,0gBACFC,IAAK,IAEP,CACEH,SACE,6EACFC,OACE,2IACFC,YACE,4dACFC,IAAK,KAIT,UTZA,IACIzB,WAAY,CAAEwK,aAAY,GAAEC,UAAS,GAAEC,eAAcA,IACrDjH,OACI,MAAO,CACHwB,UAAW,GACXf,kBAAmB,EACnBP,eAAgB,EAChBQ,eAAgB,EAChBoB,aAAc,GACdoF,gBAAiB,GACjBC,qBAAsB,IAAI/B,IAC1BgC,cAAc,EAEtB,EACAxD,SAAU,CACN1C,wBACI,IAAImG,EAAoB,IAAIlH,KAAKqB,WACjC,IAAK,IAAImD,EAAI0C,EAAkBhH,OAAS,EAAGsE,EAAI,EAAGA,IAAK,CACnD,MAAM2C,EAAIhE,KAAKC,MAAMD,KAAKE,UAAYmB,EAAI,KACzC0C,EAAkB1C,GAAI0C,EAAkBC,IAAM,CAACD,EAAkBC,GAAID,EAAkB1C,GAC5F,CACA,OAAO0C,CACX,GAEJpH,QAAS,CACL2B,4BAA4BiD,GAExB,MAAM0C,EAAgB1C,EAAc1B,QAAQ1B,eAAiB,EAGzDtB,KAAK+G,gBAAgBK,KAErBpH,KAAK+G,gBAAgBK,GAAe9E,WAAY,GAIhDtC,KAAK+G,gBAAgBK,KAAmB1C,GACxC1E,KAAK+G,gBAAgBK,GAAiB1C,EACtC1E,KAAKgH,qBAAqB7B,IAAIiC,KAE9BpH,KAAK+G,gBAAgBK,GAAiB,KACtCpH,KAAKgH,qBAAqBK,OAAOD,IAGrCpH,KAAKM,kBAAoBN,KAAKgH,qBAAqB9B,IACvD,EACAxE,YACI,IAAIV,KAAKiH,aAEF,CACHjH,KAAKiH,cAAe,EACpB,IAAI1G,EAAiB,EACrBP,KAAK2E,MAAM2C,cAAczC,SAAS0C,IAC9BhH,GAAkBgH,EAAalC,oBAC/B,MAAMmC,EAAoBD,EAAajC,uBACblI,IAAtBoK,GACAxH,KAAK2B,aAAawC,KAAKqD,EAC3B,IAEJxH,KAAKO,eAAiBA,EACtBkH,QAAQC,IAAI1H,KAAK2B,aACrB,CACJ,EAEAf,cACIZ,KAAKiH,cAAe,EACpBjH,KAAK2H,iBAAmB,EACxB3H,KAAKO,eAAiB,EACtBP,KAAK2E,MAAM2C,cAAczC,SAAS0C,IAC9BA,EAAa3G,cACbZ,KAAKM,kBAAoB,EACzBN,KAAK2B,aAAe,GACpB3B,KAAKgH,qBAAuB,IAAI/B,GAAK,GAE7C,EACA2C,cACI,IAAI3B,EAAMC,OAAOT,SAAS1I,KACtB8I,EAAWI,EAAIE,UAAUF,EAAIG,YAAY,KAAO,GACpD,OAAOP,CACX,EACAgC,UACI,IAAIhC,EAAW7F,KAAK4H,cAEpB,OAAQ/B,GACJ,IAAK,WACD7F,KAAKqB,UAAYyG,EACjB,MACJ,IAAK,iBACD9H,KAAKqB,UAAYpD,EACjB,MACJ,IAAK,YACD+B,KAAKqB,UAAY5D,EACjB,MACJ,IAAK,uBACDuC,KAAKqB,UAAYvD,EACjB,MACJ,IAAK,uBACDkC,KAAKqB,UAAY0G,EACjB,MACJ,IAAK,kBACD/H,KAAKqB,UAAYnD,EACjB,MACJ,IAAK,2BACD8B,KAAKqB,UAAYlD,GACjB,MACJ,IAAK,SACD6B,KAAKqB,UAAYjD,GACjB,MACJ,IAAK,WACD4B,KAAKqB,UAAYhD,GACjB,MACJ,IAAK,6BACD2B,KAAKqB,UAAY/C,GACjB,MACJ,IAAK,yBACD0B,KAAKqB,UAAY9C,GACjB,MACJ,IAAK,SACDyB,KAAKqB,UAAYsF,GACjB,MACJ,IAAK,iBACD3G,KAAKqB,UAAY2G,GACjB,MACJ,IAAK,yBACDhI,KAAKqB,UAAY5C,GACjB,MACJ,IAAK,6BACDuB,KAAKqB,UAAY3C,GACjB,MACJ,IAAK,YACDsB,KAAKqB,UAAY1C,GACjB,MACJ,IAAK,oCACDqB,KAAKqB,UAAYzC,GACjB,MACJ,IAAK,mCACDoB,KAAKqB,UAAYxC,GACjB,MACJ,IAAK,mBACDmB,KAAKqB,UAAYvC,GACjB,MACJ,IAAK,eACDkB,KAAKqB,UAAYtC,GACjB,MACJ,IAAK,UACDiB,KAAKqB,UAAYrC,GACjB,MACJ,IAAK,eACDgB,KAAKqB,UAAYpC,GACjB,MACJ,IAAK,gBACDe,KAAKqB,UAAYnC,GACjB,MACJ,IAAK,mBACDc,KAAKqB,UAAYlC,GACjB,MACJ,IAAK,YACDa,KAAKqB,UAAYjC,GACjB,MACJ,IAAK,UACDY,KAAKqB,UAAYhC,GACjB,MACJ,IAAK,UACDW,KAAKqB,UAAY/B,GACjB,MACJ,IAAK,eACDU,KAAKqB,UAAY9B,GACjB,MACJ,IAAK,kBACDS,KAAKqB,UAAY7B,GACjB,MACJ,IAAK,WACDQ,KAAKqB,UAAYpB,GACjB,MACJ,IAAK,UACDD,KAAKqB,UAAYlB,GACjB,MACJ,QACIsH,QAAQQ,MAAM,sBAAuBpC,GACrC,MAER7F,KAAKD,eAAiBC,KAAKqB,UAAUnB,MACzC,GAEJE,UACIJ,KAAK6H,UACLJ,QAAQC,IAAI1H,KAAKe,sBAAsBpD,OAC3C,GUzOJ,MAAM,IAA2B,OAAgB,GAAQ,CAAC,CAAC,SAAS,IAAQ,CAAC,YAAY,qBAEzF,U,yECPMpC,EAAAA,EAAAA,GAGM,OAHDC,MAAM,SAAO,EAChBD,EAAAA,EAAAA,GAAwC,MAApCC,MAAM,eAAc,gBACxBD,EAAAA,EAAAA,GAA0C,QAApCC,MAAM,mBAAkB,WAAK,K,IAEhCA,MAAM,U,IAOAA,MAAM,gB,yEAZnBN,EAAAA,EAAAA,IAeU,gBAdRa,IAIAR,EAAAA,EAAAA,GASM,MATNS,GASM,gBARFd,EAAAA,EAAAA,IAOY2F,EAAAA,GAAA,MAAAC,EAAAA,EAAAA,IAJerE,EAAAyL,aAAW,CAA5BC,EAAOnH,M,WAHjBC,EAAAA,EAAAA,IAOYtE,EAAA,CANTC,SAAQ,aAAiBuL,EAC1B3M,MAAM,eAEL2F,IAAKH,G,mBAEJ,IAAuC,EAAvCzF,EAAAA,EAAAA,GAAuC,IAAvCU,IAAuCO,EAAAA,EAAAA,IAAZ2L,GAAK,M,qCCb9C,QACIrI,QAAS,CACLsI,cACI,IAAInC,EAAMC,OAAOT,SAAS1I,KACtBsL,EAAWpC,EAAIE,UAAUF,EAAIG,YAAY,KAAO,GACpD,OAAOiC,CACX,ICNR,MAAMC,GAAS,CACX,WACA,iBACA,YACA,uBACA,uBACA,kBACA,2BACA,SACA,WACA,6BACA,yBACA,SACA,iBACA,yBACA,6BACA,YACA,oCACA,mCACA,mBACA,eACA,UACA,eACA,gBACA,mBACA,YACA,UACA,UACA,eACA,kBACA,YAGJ,UCjCA,MAAMC,GAAiB,CACnB,WAGJ,UHqBA,IACEnM,WAAY,CAAEwD,SAAQA,GACtB4I,OAAQ,CAACvC,IACTpG,OACE,MAAM,CACJqI,YAAc,GAElB,EACApI,QAAU,CACR2I,eACE,IAAIJ,EAAWrI,KAAKoI,cACpB,MAAe,UAAZC,GACCrI,KAAKkI,YAAcQ,GACZL,GAEI,mBAAZA,GACDrI,KAAKkI,YAAcK,GACZF,QAFT,CAIF,GAEFjI,UACEJ,KAAKyI,eACLhB,QAAQC,IAAI,QACb,GI1CH,MAAM,IAA2B,OAAgB,GAAQ,CAAC,CAAC,SAAS,IAAQ,CAAC,YAAY,qBAEzF,UCJA,MAAMiB,IAASC,EAAAA,EAAAA,IAAa,CACxBC,SAASC,EAAAA,EAAAA,MACTC,OAAQ,CACJ,CAAEC,KAAM,IAAKC,UAAWC,IACxB,CAAEF,KAAM,sBAAuBC,UAAWE,IAC1C,CAAEH,KAAM,gBAAiBC,UAAWG,IACpC,CAAEJ,KAAM,0BAA2BC,UAAWG,OAItD,UCXA,MAAMC,IAAMC,EAAAA,EAAAA,IAAUC,GAEtBF,GAAIG,IAAIb,IACRU,GAAII,MAAM,O,GCNNC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBxM,IAAjByM,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CAGjDE,QAAS,CAAC,GAOX,OAHAE,EAAoBJ,GAAUG,EAAQA,EAAOD,QAASH,GAG/CI,EAAOD,OACf,CAGAH,EAAoBM,EAAID,E,WCzBxB,IAAIE,EAAW,GACfP,EAAoBQ,EAAI,SAASC,EAAQC,EAAUC,EAAIC,GACtD,IAAGF,EAAH,CAMA,IAAIG,EAAeC,IACnB,IAASjG,EAAI,EAAGA,EAAI0F,EAAShK,OAAQsE,IAAK,CACrC6F,EAAWH,EAAS1F,GAAG,GACvB8F,EAAKJ,EAAS1F,GAAG,GACjB+F,EAAWL,EAAS1F,GAAG,GAE3B,IAJA,IAGIkG,GAAY,EACPvD,EAAI,EAAGA,EAAIkD,EAASnK,OAAQiH,MACpB,EAAXoD,GAAsBC,GAAgBD,IAAa1G,OAAO8G,KAAKhB,EAAoBQ,GAAGS,OAAM,SAASzJ,GAAO,OAAOwI,EAAoBQ,EAAEhJ,GAAKkJ,EAASlD,GAAK,IAChKkD,EAASQ,OAAO1D,IAAK,IAErBuD,GAAY,EACTH,EAAWC,IAAcA,EAAeD,IAG7C,GAAGG,EAAW,CACbR,EAASW,OAAOrG,IAAK,GACrB,IAAIsG,EAAIR,SACElN,IAAN0N,IAAiBV,EAASU,EAC/B,CACD,CACA,OAAOV,CArBP,CAJCG,EAAWA,GAAY,EACvB,IAAI,IAAI/F,EAAI0F,EAAShK,OAAQsE,EAAI,GAAK0F,EAAS1F,EAAI,GAAG,GAAK+F,EAAU/F,IAAK0F,EAAS1F,GAAK0F,EAAS1F,EAAI,GACrG0F,EAAS1F,GAAK,CAAC6F,EAAUC,EAAIC,EAwB/B,C,eC5BAZ,EAAoBoB,EAAI,SAAShB,GAChC,IAAIiB,EAASjB,GAAUA,EAAOkB,WAC7B,WAAa,OAAOlB,EAAO,UAAY,EACvC,WAAa,OAAOA,CAAQ,EAE7B,OADAJ,EAAoBuB,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CACR,C,eCNArB,EAAoBuB,EAAI,SAASpB,EAASsB,GACzC,IAAI,IAAIjK,KAAOiK,EACXzB,EAAoB0B,EAAED,EAAYjK,KAASwI,EAAoB0B,EAAEvB,EAAS3I,IAC5E0C,OAAOyH,eAAexB,EAAS3I,EAAK,CAAEoK,YAAY,EAAMC,IAAKJ,EAAWjK,IAG3E,C,eCPAwI,EAAoB8B,EAAI,WACvB,GAA0B,kBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAO1L,MAAQ,IAAI2L,SAAS,cAAb,EAChB,CAAE,MAAOC,GACR,GAAsB,kBAAX1F,OAAqB,OAAOA,MACxC,CACA,CAPuB,E,eCAxByD,EAAoB0B,EAAI,SAASQ,EAAKC,GAAQ,OAAOjI,OAAOC,UAAUC,eAAeC,KAAK6H,EAAKC,EAAO,C,eCAtGnC,EAAoBoC,EAAI,qC,eCKxB,IAAIC,EAAkB,CACrB,IAAK,GAaNrC,EAAoBQ,EAAEhD,EAAI,SAAS8E,GAAW,OAAoC,IAA7BD,EAAgBC,EAAgB,EAGrF,IAAIC,EAAuB,SAASC,EAA4BtM,GAC/D,IAKI+J,EAAUqC,EALV5B,EAAWxK,EAAK,GAChBuM,EAAcvM,EAAK,GACnBwM,EAAUxM,EAAK,GAGI2E,EAAI,EAC3B,GAAG6F,EAAS7E,MAAK,SAAS8G,GAAM,OAA+B,IAAxBN,EAAgBM,EAAW,IAAI,CACrE,IAAI1C,KAAYwC,EACZzC,EAAoB0B,EAAEe,EAAaxC,KACrCD,EAAoBM,EAAEL,GAAYwC,EAAYxC,IAGhD,GAAGyC,EAAS,IAAIjC,EAASiC,EAAQ1C,EAClC,CAEA,IADGwC,GAA4BA,EAA2BtM,GACrD2E,EAAI6F,EAASnK,OAAQsE,IACzByH,EAAU5B,EAAS7F,GAChBmF,EAAoB0B,EAAEW,EAAiBC,IAAYD,EAAgBC,IACrED,EAAgBC,GAAS,KAE1BD,EAAgBC,GAAW,EAE5B,OAAOtC,EAAoBQ,EAAEC,EAC9B,EAEImC,EAAqBC,KAAK,2BAA6BA,KAAK,4BAA8B,GAC9FD,EAAmB1H,QAAQqH,EAAqBO,KAAK,KAAM,IAC3DF,EAAmBpI,KAAO+H,EAAqBO,KAAK,KAAMF,EAAmBpI,KAAKsI,KAAKF,G,IC/CvF,IAAIG,EAAsB/C,EAAoBQ,OAAE/M,EAAW,CAAC,MAAM,WAAa,OAAOuM,EAAoB,KAAO,IACjH+C,EAAsB/C,EAAoBQ,EAAEuC,E","sources":["webpack://java-prep-q/./src/App.vue","webpack://java-prep-q/./src/components/VueHeader.vue","webpack://java-prep-q/./src/components/VueHeader.vue?b362","webpack://java-prep-q/./src/components/VueFooter.vue","webpack://java-prep-q/./src/components/VueFooter.vue?9e5f","webpack://java-prep-q/./src/App.vue?7ccd","webpack://java-prep-q/./src/pages/HomePage.vue","webpack://java-prep-q/./src/components/BaseLink.vue","webpack://java-prep-q/./src/components/BaseLink.vue?0553","webpack://java-prep-q/./src/questions/introJava.js","webpack://java-prep-q/./src/questions/primitiveDataTypes.js","webpack://java-prep-q/./src/questions/referenceDataTypes.js","webpack://java-prep-q/./src/questions/Terminal.js","webpack://java-prep-q/./src/questions/versionControl.js","webpack://java-prep-q/./src/questions/stringHandling.js","webpack://java-prep-q/./src/questions/variablesDecIntIns.js","webpack://java-prep-q/./src/questions/Arrays.js","webpack://java-prep-q/./src/questions/booleans.js","webpack://java-prep-q/./src/questions/logicalAndComparisonOperators.js","webpack://java-prep-q/./src/questions/dotEqualsAndComments.js","webpack://java-prep-q/./src/questions/strictlyTyped.js","webpack://java-prep-q/./src/questions/instantiatingAclass.js","webpack://java-prep-q/./src/questions/PrimitiveAndNonPrimitive.js","webpack://java-prep-q/./src/questions/operators.js","webpack://java-prep-q/./src/questions/attributesAndInstanceVar.js","webpack://java-prep-q/./src/questions/classesAndReferenceDataTypes.js","webpack://java-prep-q/./src/questions/creatingObjects.js","webpack://java-prep-q/./src/questions/constructors.js","webpack://java-prep-q/./src/questions/strings.js","webpack://java-prep-q/./src/questions/dotNotation.js","webpack://java-prep-q/./src/questions/encapsulation.js","webpack://java-prep-q/./src/questions/accessModifiers.js","webpack://java-prep-q/./src/questions/interface.js","webpack://java-prep-q/./src/questions/getters.js","webpack://java-prep-q/./src/questions/setters.js","webpack://java-prep-q/./src/questions/thiskeyword.js","webpack://java-prep-q/./src/questions/wrapperClasses.js","webpack://java-prep-q/./src/questions/strings2.js","webpack://java-prep-q/./src/questions/arrays1.js","webpack://java-prep-q/./src/pages/HomePage.vue?a24f","webpack://java-prep-q/./src/pages/QuestionPage.vue","webpack://java-prep-q/./src/components/QuestionCard.vue","webpack://java-prep-q/./src/components/QuestionOption.vue","webpack://java-prep-q/./src/components/QuestionOption.vue?fc8b","webpack://java-prep-q/./src/components/QuestionCard.vue?abbd","webpack://java-prep-q/./src/components/InfoPanel.vue","webpack://java-prep-q/./src/components/InfoPanel.vue?4c2b","webpack://java-prep-q/./src/components/JumpToQuestion.vue","webpack://java-prep-q/./src/components/JumpToQuestion.vue?3000","webpack://java-prep-q/./src/questions/errors.js","webpack://java-prep-q/./src/pages/QuestionPage.vue?fe1e","webpack://java-prep-q/./src/pages/TopicPage.vue","webpack://java-prep-q/./src/mixins/url.js","webpack://java-prep-q/./src/topicArrays/qnotes.js","webpack://java-prep-q/./src/topicArrays/codingQuestions.js","webpack://java-prep-q/./src/pages/TopicPage.vue?2a62","webpack://java-prep-q/./src/router/index.js","webpack://java-prep-q/./src/main.js","webpack://java-prep-q/webpack/bootstrap","webpack://java-prep-q/webpack/runtime/chunk loaded","webpack://java-prep-q/webpack/runtime/compat get default export","webpack://java-prep-q/webpack/runtime/define property getters","webpack://java-prep-q/webpack/runtime/global","webpack://java-prep-q/webpack/runtime/hasOwnProperty shorthand","webpack://java-prep-q/webpack/runtime/publicPath","webpack://java-prep-q/webpack/runtime/jsonp chunk loading","webpack://java-prep-q/webpack/startup"],"sourcesContent":["<template>\n  <section>\n    <vue-header/>\n    <router-view></router-view>\n    <vue-footer/>\n  </section>\n</template>\n\n<script>\nimport VueHeader from './components/VueHeader.vue';\nimport VueFooter from './components/VueFooter.vue';\nexport default {\n  components: { VueHeader, VueFooter }\n\n}\n</script>\n\n<style>\n\nbody{\n  margin: auto;\n}\n\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 0;\n}\n\na{\n  color: inherit;\n  text-decoration: none;\n}\n</style>\n","<template>\r\n  <header>\r\n    <router-link to=\"/\" class=\"header-left\">\r\n      <h2 class=\"header-left__title\">Enjoy the Vue</h2>\r\n      <img src=\"../assets/vuelogo.png\" alt=\"\" class=\"header-left__icon\" />\r\n    </router-link>\r\n    <div class=\"header-right\">\r\n      <img src=\"../assets/amazonlogo.png\" alt=\"\" class=\"header-right__icon\" />\r\n    </div>\r\n  </header>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\nheader {\r\n  width: 100%;\r\n  height: 8vh;\r\n  display: flex;\r\n  margin: 0;\r\n  background-color: $primary-color;\r\n  justify-content: space-between;\r\n\r\n  &__left{\r\n    display: flex;\r\n  }\r\n\r\n  &__vue-icon, &__amz-icon{\r\n    width: 40px;\r\n    height: 40px;\r\n  }\r\n}\r\n\r\n.header-left__icon, .header-right__icon{\r\n    width: 40px;\r\n    height: 40px;\r\n}\r\n\r\n.header-left{\r\n    background-color: #38FCA5;\r\n    color: $secondary-color;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    width: 20%;\r\n\r\n    &:hover{\r\n      cursor: pointer;\r\n    }\r\n\r\n    &__title{\r\n      padding-top: 15px;\r\n      padding-left: 15px;\r\n    }\r\n\r\n    &__icon{\r\n      padding-top: 5px;\r\n      margin-right: 70px;\r\n    }\r\n    \r\n    \r\n}\r\n\r\n.header-right__icon{\r\n    padding-top: 5px;\r\n    padding-right: 15px;\r\n}\r\n\r\n</style>\r\n","import { render } from \"./VueHeader.vue?vue&type=template&id=2e95174c&scoped=true\"\nconst script = {}\n\nimport \"./VueHeader.vue?vue&type=style&index=0&id=2e95174c&lang=scss&scoped=true\"\n\nimport exportComponent from \"C:\\\\Users\\\\Quamir\\\\Downloads\\\\JavaPrepQ\\\\java-prep-q\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-2e95174c\"]])\n\nexport default __exports__","<template>\r\n    <footer>\r\n        <p>Quamir Joyner</p>\r\n    </footer>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n    footer{\r\n        width: 100%;\r\n        height: 8vh;\r\n        background-color: $secondary-color;\r\n        display: flex;\r\n        justify-content: flex-start;\r\n    }\r\n\r\n    p{\r\n        color: #ffff;\r\n        padding-top: 20px;\r\n        padding-left: 10px;\r\n    }\r\n</style>","import { render } from \"./VueFooter.vue?vue&type=template&id=30e4ff34&scoped=true\"\nconst script = {}\n\nimport \"./VueFooter.vue?vue&type=style&index=0&id=30e4ff34&lang=scss&scoped=true\"\n\nimport exportComponent from \"C:\\\\Users\\\\Quamir\\\\Downloads\\\\JavaPrepQ\\\\java-prep-q\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-30e4ff34\"]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=ce0c9044\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=ce0c9044&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\Quamir\\\\Downloads\\\\JavaPrepQ\\\\java-prep-q\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n  <section>\r\n    <div class=\"title\">\r\n      <h1 class=\"title__text\">Java Practice Questions</h1>\r\n      <span class=\"title__sub-text\">V 2.0</span>\r\n    </div>\r\n    <div class=\"title__question-number\">\r\n      <span>{{numOfQuestions}} questions and growing</span>\r\n    </div>\r\n    <div class=\"pages\">\r\n      <base-link linkPath=\"topics/qnotes\" class=\"pages__link\">\r\n          <p class=\"pages__text\">Q's Notes Java Theory </p>\r\n      </base-link>\r\n      <base-link linkPath=\"topics/codingquestions\" class=\"pages__link\">\r\n          <p class=\"pages__text\">coding questions</p>\r\n      </base-link>\r\n    </div>\r\n  </section>\r\n</template>\r\n\r\n<script>\r\nimport BaseLink from \"../components/BaseLink.vue\";\r\n\r\n//test\r\nimport introJava from \"@/questions/introJava\";\r\nimport primitiveDataTypes from \"@/questions/primitiveDataTypes\";\r\nimport refernceDataTypes from \"@/questions/referenceDataTypes\";\r\nimport terminal from \"@/questions/Terminal\";\r\nimport versionControl from \"@/questions/versionControl\";\r\nimport stringHandling from \"@/questions/stringHandling\";\r\nimport VariableDecIntIns from \"@/questions/variablesDecIntIns\";\r\nimport arrays from \"@/questions/Arrays\";\r\nimport booleans from \"@/questions/booleans\";\r\nimport logicalAndComparison from \"@/questions/logicalAndComparisonOperators\";\r\nimport dotEqualsAndComments from \"@/questions/dotEqualsAndComments\";\r\nimport stricklyTyped from \"@/questions/strictlyTyped\";\r\nimport instantiatingAclass from \"@/questions/instantiatingAclass\";\r\nimport primitiveAndNonPrimitive from \"@/questions/PrimitiveAndNonPrimitive\";\r\nimport operators from \"@/questions/operators\";\r\nimport attributesAndInstanceVar from \"@/questions/attributesAndInstanceVar\";\r\nimport classesAndReferenceDataTypes from \"@/questions/classesAndReferenceDataTypes\";\r\nimport creatingObjects from \"@/questions/creatingObjects\";\r\nimport constructors from \"@/questions/constructors\";\r\nimport strings from \"@/questions/strings\";\r\nimport dotNotation from \"@/questions/dotNotation\";\r\nimport encapsulation from \"@/questions/encapsulation\";\r\nimport accessModifiers from \"@/questions/accessModifiers\";\r\nimport interfaceJava from \"@/questions/interface\";\r\nimport getters from \"@/questions/getters\";\r\nimport setters from \"@/questions/setters\";\r\nimport thisKeyword from \"@/questions/thiskeyword\";\r\nimport wrapperClasses from \"@/questions/wrapperClasses\";\r\nimport strings2 from \"@/questions/strings2\"\r\nimport arrays1 from \"@/questions/arrays1\";\r\n\r\nexport default {\r\n  components: { BaseLink },\r\n  data(){\r\n    return{\r\n      numOfQuestions : 0\r\n    }\r\n  },\r\n  methods: {\r\n    questionAmount() {\r\n      this.numOfQuestions = introJava.length + \r\n        primitiveDataTypes.length + \r\n        refernceDataTypes.length + \r\n        terminal.length + \r\n        versionControl.length + \r\n        stringHandling.length +\r\n        VariableDecIntIns.length +\r\n        arrays.length + \r\n        booleans.length +\r\n        logicalAndComparison.length +\r\n        dotEqualsAndComments.length + \r\n        stricklyTyped.length + \r\n        instantiatingAclass.length +\r\n        primitiveAndNonPrimitive.length + \r\n        operators.length + \r\n        attributesAndInstanceVar.length + \r\n        classesAndReferenceDataTypes.length + \r\n        creatingObjects.length + \r\n        constructors.length +\r\n        strings.length +\r\n        dotNotation.length +\r\n        encapsulation.length +\r\n        accessModifiers.length +\r\n        interfaceJava.length + \r\n        getters.length + \r\n        setters.length +\r\n        thisKeyword.length +\r\n        wrapperClasses.length +\r\n        strings2.length +\r\n        arrays1.length\r\n\r\n    }\r\n  },\r\n  created(){\r\n    this.questionAmount();\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\nsection {\r\n  height: 84vh;\r\n}\r\n.title {\r\n  display: flex;\r\n  justify-content: center;\r\n  &__text {\r\n    font-size: rem(40);\r\n  }\r\n  &__sub-text {\r\n    width: 10%;\r\n    margin-top: auto;\r\n    margin-bottom: auto;\r\n    font-size: rem(40);\r\n    color: #f8b160;\r\n  }\r\n  &__question-number{\r\n    margin-top: 8px;\r\n    margin-bottom: 8px;\r\n    font-size: rem(20);\r\n    font-weight: bold;\r\n  }\r\n}\r\n\r\n.pages{\r\n    width: 50%;\r\n    height: 250px;\r\n    margin: auto;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n\r\n    &__link{\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n    }\r\n\r\n    &__text{\r\n      font-size: rem(40);\r\n      font-weight: 600;\r\n      height: 100%;\r\n      padding-top: 8px;\r\n    }\r\n}\r\n</style>\r\n","<template>\r\n    <a :href=\"'#/' + linkPath\" class=\"base-link\"> \r\n        <div>\r\n            <slot></slot>\r\n        </div>\r\n    </a>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    props: {\r\n        linkPath: {\r\n            type: String,\r\n            required: true\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n    .base-link{\r\n        height: 60px;\r\n        background-color: $light-green;\r\n        border-radius: 20px;\r\n    }\r\n    p{\r\n        padding-top: 10px;\r\n        font-size: rem(30);\r\n    }\r\n</style>","import { render } from \"./BaseLink.vue?vue&type=template&id=15dca632&scoped=true\"\nimport script from \"./BaseLink.vue?vue&type=script&lang=js\"\nexport * from \"./BaseLink.vue?vue&type=script&lang=js\"\n\nimport \"./BaseLink.vue?vue&type=style&index=0&id=15dca632&lang=scss&scoped=true\"\n\nimport exportComponent from \"C:\\\\Users\\\\Quamir\\\\Downloads\\\\JavaPrepQ\\\\java-prep-q\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-15dca632\"]])\n\nexport default __exports__","const introJava = [\r\n    {\r\n        question: 'What is the minimum value of a short data type in Java?',\r\n        answer: '-32768',\r\n        explanation: 'The short data type is a 16-bit signed two\\'s complement integer. Its minimum value is -2^15, which is equal to -32,768.',\r\n        img: ''\r\n      },\r\n      {\r\n        question: 'What is the purpose of the .equals() method in Java?',\r\n        answer: 'To compare the contents of two objects',\r\n        explanation: 'The .equals() method is used to compare the contents of two objects, rather than their memory addresses. This is particularly useful when comparing strings or other objects with internal state.',\r\n        img: ''\r\n      },\r\n      {\r\n        question: 'How do you declare an array of 5 integers and initialize it with values in Java?',\r\n        answer: 'int[] numbers = {1, 2, 3, 4, 5};',\r\n        explanation: 'In Java, you can declare and initialize an array with values by using the following syntax: \"dataType[] arrayName = {value1, value2, ...};\". In this case, we declare an integer array named \"numbers\" and initialize it with the values 1 to 5.',\r\n        img: ''\r\n      },\r\n      {\r\n        question: 'Which Java data type can hold only two possible values, true or false?',\r\n        answer: 'boolean',\r\n        explanation: 'The boolean data type is a primitive data type in Java that can hold only two possible values, true or false. It is used to represent the logical values of a condition and is commonly used in control structures like if, while, and for statements.',\r\n        img: ''\r\n      },\r\n      {\r\n        question: 'What type of error occurs when the code violates the syntax rules of a programming language?',\r\n        answer: 'Syntax error',\r\n        explanation: 'A syntax error occurs when the code does not follow the syntax rules of the programming language. These errors usually prevent the code from being compiled or executed and must be fixed before the program can run.',\r\n        img: ''\r\n      },\r\n      {\r\n        question: 'What is the difference between primitive and reference data types in Java?',\r\n        answer: 'Primitive data types are basic, predefined data types, while reference data types refer to objects in memory.',\r\n        explanation: 'Primitive data types are basic data types that have a fixed size and directly store values, such as int, double, or char. Reference data types, on the other hand, store the memory address of an object, such as classes, interfaces, arrays, or strings. Reference data types can also be assigned null, indicating no object is referenced.',\r\n        img: ''\r\n      },\r\n      {\r\n        question: 'What is the purpose of a switch statement in Java?',\r\n        answer: 'To check multiple conditions against a single expression.',\r\n        explanation: 'A switch statement is used to evaluate a single expression and compare it to various cases. When a case matches the expression, the associated code block is executed. This is useful when you have multiple conditions to check against, as it simplifies the code compared to using multiple if-else statements.',\r\n        img: ''\r\n      },\r\n      {\r\n        question: 'What does the term \"short-circuiting\" mean in the context of logical operators?',\r\n        answer: 'The evaluation of an expression stops when the result can be determined without evaluating the entire expression.',\r\n        explanation: 'In the case of the && (AND) operator, if the left-hand operand is false, the entire expression will be false, so the right-hand operand is not evaluated. In the case of the || (OR) operator, if the left-hand operand is true, the entire expression will be true, so the right-hand operand is not evaluated. Short-circuiting can improve performance and prevent unnecessary evaluations.',\r\n        img: ''\r\n      },\r\n      {\r\n        question: 'What does it mean when a String is immutable in Java?',\r\n        answer: 'An immutable String cannot be changed after it is created.',\r\n        explanation: 'In Java, Strings are immutable, which means that once a String object is created, its contents cannot be altered. Instead of modifying the original String, you can create a new String by concatenating, substring, or other operations.',\r\n        img: ''\r\n      },\r\n      {\r\n        question: 'What is the purpose of comments in Java?',\r\n        answer: 'To add explanatory or descriptive text to the source code.',\r\n        explanation: 'Comments provide a way to include explanatory or descriptive text in the source code, helping developers understand the code better. They are ignored by the compiler or interpreter, so they do not affect the program execution. Comments are useful for documenting code, explaining complex logic, or providing context for future developers.',\r\n        img: ''\r\n      },\r\n      {\r\n        question: 'What is a runtime error in Java?',\r\n        answer: 'An error that occurs while a program is running.',\r\n        explanation: 'A runtime error, also called an exception, occurs when a program encounters an unexpected condition that was not handled by the code, such as dividing by zero or accessing an array index out of bounds. When a runtime error occurs, the program stops executing and usually displays an error message. Exception handling techniques can be used to handle runtime errors and prevent the program from crashing.',\r\n        img: ''\r\n      },\r\n      {\r\n        question: 'How do you access the first element of an array in Java?',\r\n        answer: 'arrayName[0]',\r\n        explanation: 'In Java, arrays are zero-indexed, which means the first element of an array is at index 0. To access the first element of an array, you would use the array name followed by the index in square brackets, like this: \"arrayName[0]\".',\r\n        img: ''\r\n      },\r\n      {\r\n        question: 'What is a nested conditional statement in Java?',\r\n        answer: 'A conditional statement placed inside another conditional statement.',\r\n        explanation: 'Nested conditional statements allow you to check for multiple conditions before taking a particular action. They provide a way to create more complex decision-making structures by placing if, else-if, or switch statements inside other conditional statements.',\r\n        img: ''\r\n      },\r\n      {\r\n        question: 'What is the difference between the \"==\" operator and the \".equals()\" method in Java?',\r\n        answer: 'The \"==\" operator compares memory addresses, while the \".equals()\" method compares object contents.',\r\n        explanation: 'The \"==\" operator checks if two variables refer to the same object in memory, comparing their memory addresses. The \".equals()\" method, on the other hand, checks if two objects have the same contents, regardless of their memory addresses. This is particularly important when comparing objects like Strings, where the contents of the objects are more relevant than their memory addresses.',\r\n        img: ''\r\n      },\r\n      {\r\n        question: 'What is the purpose of the boolean data type in Java?',\r\n        answer: 'To represent logical values of true or false.',\r\n        explanation: 'The boolean data type is used to represent logical values, true or false. It is commonly used in control structures like if, while, and for statements to control program flow based on conditions, and in complex logical expressions combined with logical operators like &&, ||, and !.',\r\n        img: ''\r\n      },\r\n      {\r\n        question: 'How do you declare and initialize an array in Java with specific values?',\r\n        answer: 'Using the format: dataType[] arrayName = {value1, value2, value3};',\r\n        explanation: 'To declare and initialize an array in Java with specific values, you can use the following syntax: dataType[] arrayName = {value1, value2, value3}; This creates an array of the specified data type with the given values. The size of the array is determined by the number of values provided.',\r\n        img: ''\r\n      },\r\n      {\r\n        question: 'What are the two types of comments in Java?',\r\n        answer: 'Single-line comments and multi-line comments.',\r\n        explanation: 'Single-line comments begin with two forward slashes (//) and continue until the end of the line, typically used for short, descriptive comments. Multi-line comments begin with a forward slash and an asterisk (/*) and end with an asterisk and a forward slash (*/), allowing the comment to span across multiple lines, typically used for longer comments or commenting out blocks of code.',\r\n        img: ''\r\n      },\r\n      {\r\n        question: 'What is the difference between a syntax error and a logical error in Java?',\r\n        answer: 'A syntax error violates language rules, while a logical error produces unexpected output.',\r\n        explanation: 'A syntax error occurs when the code violates the language \\'s syntax rules, usually preventing the code from being compiled or executed. A logical error, on the other hand, occurs when the code runs without throwing any errors, but the output is not what was expected, usually due to a mistake in the program\\'s logic.',\r\n        img: ''\r\n      },\r\n      {\r\n        question: 'How do you create a new String object in Java?',\r\n        answer: 'Using the \"new\" keyword or by assigning a string literal to a variable.',\r\n        explanation: 'You can create a new String object in Java by using the \"new\" keyword followed by the String class constructor or by simply assigning a string literal to a variable. For example: String s1 = new String(\"Hello, World\"); or String s2 = \"Hello, World\"; Both create a new String object with the value \"Hello, World\".',\r\n        img: ''\r\n      },\r\n      {\r\n        question: 'What are the four JavaDoc tags commonly used to document methods?',\r\n        answer: '@param, @return, @throws, and @author.',\r\n        explanation: '@param is used to document a method\\'s parameters, providing information about the data type and purpose of each parameter. @return is used to document a method\\'s return value, providing information about the data type and meaning of the value. @throws is used to document the exceptions a method can throw. @author is used to document the author of a class or method.',\r\n        img: ''\r\n      },\r\n      {\r\n        question: 'What is the purpose of the \"!=\" operator in Java?',\r\n        answer: 'To compare two values and return true if they are not equal.',\r\n        explanation: 'The \"!=\" operator is a comparison operator in Java used to check if two values are not equal. It returns true if the values are not equal, and false otherwise. This operator can be used with both primitive data types and reference data types to check for inequality.',\r\n        img: ''\r\n      },\r\n      {\r\n        question: 'How can you access the first element of an array in Java?',\r\n        answer: 'Using arrayName[0].',\r\n        explanation: 'In Java, arrays are zero-indexed, meaning the first element is at index 0. To access the first element of an array, you can use the array name followed by the index enclosed in square brackets: arrayName[0].',\r\n        img: ''\r\n      },\r\n      {\r\n        question: 'What is short-circuiting in Java?',\r\n        answer: 'A behavior in logical operators where the result is determined without evaluating the entire expression.',\r\n        explanation: 'Short-circuiting occurs in logical operators (&& and ||) when the result of an expression can be determined without evaluating the entire expression. For the && operator, if the left-hand operand is false, the entire expression is false. For the || operator, if the left-hand operand is true, the entire expression is true. This behavior can be useful for optimizing performance and avoiding unnecessary computations.',\r\n        img: ''\r\n      },\r\n      {\r\n        question: 'What does it mean for a String to be immutable in Java?',\r\n        answer: 'Once a String object is created, its contents cannot be changed.',\r\n        explanation: 'In Java, Strings are immutable, meaning that once a String object is created, its contents cannot be changed. However, you can create new strings by concatenating existing strings with the \"+\" operator. This immutability is beneficial for performance and security reasons, as well as making it easier to reason about the behavior of the code.',\r\n        img: ''\r\n      }\r\n];\r\n\r\nexport default introJava;","const primitiveDataTypes = [\r\n  {\r\n    question: \"What is the smallest integer data type in Java?\",\r\n    answer: \"byte\",\r\n    explanation:\r\n      \"The byte data type is the smallest integer data type in Java, taking up only 8 bits of memory. It has a range of -128 to 127, which is sufficient for small integer values.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between float and double data types in Java?\",\r\n    answer:\r\n      \"Float is a single-precision floating-point, while double is a double-precision floating-point.\",\r\n    explanation:\r\n      \"The main difference between float and double data types in Java is their precision. Float uses 32 bits of memory and has a single-precision, while double uses 64 bits of memory and has a double-precision. As a result, double data types can store larger numbers with higher precision than float data types.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Which data type would you use to store a single character in Java?\",\r\n    answer: \"char\",\r\n    explanation:\r\n      \"The char data type is designed to store a single character in Java. It uses 16 bits of memory and can represent Unicode characters, which makes it suitable for storing individual characters from various languages and symbols.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What are the possible values of a boolean data type in Java?\",\r\n    answer: \"true or false\",\r\n    explanation:\r\n      \"A boolean data type in Java can have only two possible values: true or false. Booleans are used to represent the logical values of a condition and are often used in control structures to control the flow of a program.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the primary use of the short data type in Java?\",\r\n    answer: \"To store small integer values with less memory usage.\",\r\n    explanation:\r\n      \"The short data type in Java is used to store small integer values while using less memory than the int data type. Short uses 16 bits of memory and has a range of -32,768 to 32,767. It is useful when memory efficiency is important, and the range of values is within the short data type limits.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the range of values for an int data type in Java?\",\r\n    answer: \"-2,147,483,648 to 2,147,483,647\",\r\n    explanation:\r\n      \"The int data type in Java has a range of values from -2,147,483,648 to 2,147,483,647. This 32-bit signed integer data type is suitable for most integer value requirements in a typical program and is widely used for general-purpose integer operations.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Which data type has the largest range of integer values in Java?\",\r\n    answer: \"long\",\r\n    explanation:\r\n      \"The long data type has the largest range of integer values in Java. It is a 64-bit signed integer data type with a minimum value of -9,223,372,036,854,775,808 and a maximum value of 9,223,372,036,854,775,807. The long data type is suitable for very large integer values or when a larger range than the int data type is required.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the main advantage of using the double data type over the float data type in Java?\",\r\n    answer: \"Higher precision and a larger range of values.\",\r\n    explanation:\r\n      \"The main advantage of using the double data type over the float data type in Java is its higher precision and larger range of values. Double is a 64-bit floating-point data type with an 11-bit exponent and a 52-bit significand, while float is a 32-bit floating-point data type with an 8-bit exponent and a 23-bit significand. This allows double to store larger numbers with greater precision than float.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Which Java data type should you use to store a boolean value?\",\r\n    answer: \"boolean\",\r\n    explanation:\r\n      \"The boolean data type in Java is specifically designed to store boolean values. It can hold one of two possible values: true or false. Booleans are often used to represent the logical values of a condition and are commonly used in control structures such as if, while, and for statements to control program flow.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: 'Which Java data type is used to store a single 16-bit Unicode character?',\r\n    answer: 'char',\r\n    explanation: 'The char data type in Java is used to store a single 16-bit Unicode character. Its minimum value is \\'u0000\\' (or 0) and its maximum value is \\'uffff\\' (or 65,535 inclusive).',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'What is the range of values that can be stored in an 8-bit signed byte?',\r\n    answer: '-128 to 127',\r\n    explanation: 'An 8-bit signed byte can store values from -128 to 127, because it uses two\\'s complement representation to store negative numbers.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'What is the difference between an int and a long in Java?',\r\n    answer: 'Size and range of values',\r\n    explanation: 'The difference between an int and a long in Java is the size and the range of values they can store. An int is a 32-bit signed two\\'s complement integer, with a minimum value of -2,147,483,648 and a maximum value of 2,147,483,647. A long is a 64-bit signed two\\'s complement integer, with a minimum value of -9,223,372,036,854,775,808 and a maximum value of 9,223,372,036,854,775,807.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'What is the primary use of the boolean data type in Java?',\r\n    answer: 'Representing true or false values',\r\n    explanation: 'The primary use of the boolean data type in Java is to represent true or false values. Booleans are often used to represent the logical values of a condition and are commonly used in control structures such as if, while, and for statements to control program flow.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'Which Java data type is used to store a single-precision 32-bit floating-point number?',\r\n    answer: 'float',\r\n    explanation: 'The float data type in Java is used to store a single-precision 32-bit floating-point number. It follows the IEEE 754 standard for floating-point arithmetic and includes a sign bit, an 8-bit exponent, and a 23-bit significand.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'What is the main disadvantage of using the byte data type over the int data type in Java?',\r\n    answer: 'Limited range of values',\r\n    explanation: 'The main disadvantage of using the byte data type over the int data type in Java is its limited range of values. A byte can store values from -128 to 127, while an int can store values from -2,147,483,648 to 2,147,483,647. If you need to store larger numbers, using an int or a larger data type would be more suitable.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'Which Java data type is used to store a double-precision 64-bit floating-point number?',\r\n    answer: 'double',\r\n    explanation: 'The double data type in Java is used to store a double-precision 64-bit floating-point number. It follows the IEEE 754 standard for floating-point arithmetic and includes a sign bit, an 11-bit exponent, and a 52-bit significand.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'What is the smallest data type that can store a negative value in Java?',\r\n    answer: 'byte',\r\n    explanation: 'The byte data type is the smallest data type in Java that can store a negative value. A byte is an 8-bit signed two\\'s complement integer with a minimum value of -128 and a maximum value of 127.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'Which Java data type should you use when you need to store a value that is either true or false?',\r\n    answer: 'boolean',\r\n    explanation: 'You should use the boolean data type in Java when you need to store a value that is either true or false. It represents one bit of information and can only have two possible values: true or false.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'Which data type in Java is used to store a single 16-bit Unicode character?',\r\n    answer: 'char',\r\n    explanation: 'The char data type is used to store a single 16-bit Unicode character, with a minimum value of \\'\\u0000\\' (or 0) and a maximum value of \\'\\uffff\\' (or 65,535 inclusive).',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'Which Java data type can store the largest positive integer value?',\r\n    answer: 'long',\r\n    explanation: 'The long data type can store the largest positive integer value in Java. A long is a 64-bit signed two\\'s complement integer with a maximum value of 9,223,372,036,854,775,807.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'What is the range of values that can be stored in a Java short data type?',\r\n    answer: '-32,768 to 32,767',\r\n    explanation: 'The short data type in Java is a 16-bit signed two\\'s complement integer, with a minimum value of -32,768 and a maximum value of 32,767.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'Which Java data type can store decimal values with the highest precision?',\r\n    answer: 'double',\r\n    explanation: 'The double data type can store decimal values with the highest precision in Java. It is a double-precision 64-bit IEEE 754 floating-point number, which provides more precision and a larger range of values than the float data type.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'What is the size in bits of the int data type in Java?',\r\n    answer: '32 bits',\r\n    explanation: 'The int data type in Java is a 32-bit signed two\\'s complement integer, which allows it to store a range of values from -2,147,483,648 to 2,147,483,647.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'What is the maximum value that can be stored in a Java byte data type?',\r\n    answer: '127',\r\n    explanation: 'The maximum value that can be stored in a Java byte data type is 127. A byte is an 8-bit signed two\\'s complement integer, with a range of -128 to 127.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'What is the minimum value that can be stored in a Java long data type?',\r\n    answer: '-9,223,372,036,854,775,808',\r\n    explanation: 'The minimum value that can be stored in a Java long data type is -9,223,372,036,854,775,808. A long is a 64-bit signed two\\'s complement integer.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'Which Java data type can store a floating-point number with the smallest memory footprint?',\r\n    answer: 'float',\r\n    explanation: 'The float data type in Java can store a floating-point number with the smallest memory footprint. It is a single-precision 32-bit IEEE 754 floating-point number, which uses less memory compared to the double data type.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'What is the range of values that can be stored in a byte data type?',\r\n    answer: '-128 to 127',\r\n    explanation: 'The byte data type in Java is an 8-bit signed two\\'s complement integer, which can store values ranging from -128 to 127.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'Which data type is used to store a single Unicode character?',\r\n    answer: 'char',\r\n    explanation: 'The char data type in Java is used to store a single Unicode character. It is a 16-bit data type with a range of values from \\\\u0000 (0) to \\\\uffff (65,535 inclusive).',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'What is the default value of a boolean data type?',\r\n    answer: 'false',\r\n    explanation: 'The default value of a boolean data type in Java is false. If a boolean variable is not explicitly initialized, it will have the default value of false.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'Which data type can store a 64-bit floating-point number?',\r\n    answer: 'double',\r\n    explanation: 'The double data type in Java can store a 64-bit floating-point number. It is a double-precision IEEE 754 floating-point number, which offers more precision and a larger range of values compared to the float data type.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'What is the maximum value that can be stored in a short data type?',\r\n    answer: '32,767',\r\n    explanation: 'The short data type in Java is a 16-bit signed two\\'s complement integer, which can store values up to 32,767 as its maximum value.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'What is the minimum value that can be stored in an int data type?',\r\n    answer: '-2,147,483,648',\r\n    explanation: 'The int data type in Java is a 32-bit signed two\\'s complement integer, which can store values as low as -2,147,483,648 as its minimum value.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'Which primitive data type has the largest range of values?',\r\n    answer: 'long',\r\n    explanation: 'The long data type in Java has the largest range of values among the primitive data types. It is a 64-bit signed two\\'s complement integer with a minimum value of -9,223,372,036,854,775,808 and a maximum value of 9,223,372,036,854,775,807.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'Which data type is used to store a logical value?',\r\n    answer: 'boolean',\r\n    explanation: 'The boolean data type in Java is used to store a logical value. It can have only two possible values: true or false.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'Which floating-point data type offers more precision?',\r\n    answer: 'double',\r\n    explanation: 'The double data type in Java offers more precision compared to the float data type. Double is a 64-bit floating-point number, while float is a 32-bit floating-point number.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'What is the maximum value that can be stored in a char data type?',\r\n    answer: '\\\\uffff (65,535)',\r\n    explanation: 'The maximum value that can be stored in a char data type in Java is \\\\uffff, which is equal to 65,535. Char is a 16-bit Unicode character data type.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'Which primitive data type is suitable for storing small integer values?',\r\n    answer: 'byte',\r\n    explanation: 'The byte data type in Java is suitable for storing small integer values, as it is an 8-bit signed two\\'s complement integer with a range of -128 to 127.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'Which data type should be used when you need to store a precise decimal value?',\r\n    answer: 'float or double',\r\n    explanation: 'To store a precise decimal value in Java, you can use either the float or double data type. Float is a single-precision 32-bit floating-point number, while double is a double-precision 64-bit floating-point number. Double offers higher precision and a larger range of values.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'What is the primary difference between the short and int data types?',\r\n    answer: 'Size and range of values',\r\n    explanation: 'The primary difference between the short and int data types is their size and range of values. Short is a 16-bit signed integer with a range of -32,768 to 32,767, while int is a 32-bit signed integer with a range of -2,147,483,648 to 2,147,483,647.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'Which data type is suitable for storing large integer values?',\r\n    answer: 'long',\r\n    explanation: 'The long data type in Java is suitable for storing large integer values, as it is a 64-bit signed two\\'s complement integer with a range of -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'What is the default value of a char data type?',\r\n    answer: '\\\\u0000',\r\n    explanation: 'The default value of a char data type in Java is \\\\u0000, which represents the Unicode character with the value 0.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'What is the primary difference between the float and double data types?',\r\n    answer: 'Size, precision, and range of values',\r\n    explanation: 'The primary difference between the float and double data types is their size, precision, and range of values. Float is a single-precision 32-bit floating-point number, while double is a double-precision 64-bit floating-point number. Double offers higher precision and a larger range of values.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'Which data type should be used when you need to store a small decimal value?',\r\n    answer: 'float',\r\n    explanation: 'To store a small decimal value in Java, you can use the float data type, which is a single-precision 32-bit floating-point number. It offers less precision and a smaller range of values compared to the double data type.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'What is the default value of an int data type?',\r\n    answer: '0',\r\n    explanation: 'The default value of an int data type in Java is 0. If an int variable is not explicitly initialized, it will have the default value of 0.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'Which primitive data type is suitable for storing a large floating-point number?',\r\n    answer: 'double',\r\n    explanation: 'The double data type in Java is suitable for storing a large floating-point number, as it is a double-precision 64-bit floating-point number that offers more precision and a larger range of values compared to the float data type.',\r\n    img: ''\r\n  },\r\n  {\r\n    question: 'Which primitive data type has the smallest range of values?',\r\n    answer: 'byte',\r\n    explanation: 'The byte data type in Java has the smallest range of values among the primitive data types. It is an 8-bit signed two\\'s complement integer with a range of -128 to 127.',\r\n    img: ''\r\n  }\r\n];\r\n\r\nexport default primitiveDataTypes;\r\n","const refernceDataTypes = [\r\n  {\r\n    question: \"What are the two main types of data types in Java?\",\r\n    answer: \"Primitive data types and reference data types\",\r\n    explanation:\r\n      \"Java has two main categories of data types: primitive data types and reference data types. Primitive data types include byte, short, int, long, float, double, char, and boolean. Reference data types include classes, interfaces, arrays, and strings.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Which reference data type is used to store a sequence of characters?\",\r\n    answer: \"String\",\r\n    explanation:\r\n      'The String class is a reference data type in Java that is used to store a sequence of characters. It represents a text value and can be created using a string literal or the \"new\" keyword.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you declare an array in Java?\",\r\n    answer: \"dataType[] arrayName = new dataType[arraySize];\",\r\n    explanation:\r\n      'To declare an array in Java, you specify the data type, followed by square brackets, the array name, and then the \"new\" keyword with the data type and the size of the array in square brackets. For example, int[] numbers = new int[10]; declares an array of 10 integers.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Are arrays in Java considered objects or primitive data types?\",\r\n    answer: \"Objects\",\r\n    explanation:\r\n      \"Arrays in Java are considered objects, not primitive data types. They are instances of a reference data type and can store elements of either primitive data types or other reference data types.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the base class for all classes in Java?\",\r\n    answer: \"Object\",\r\n    explanation:\r\n      \"The base class for all classes in Java is the Object class. Every class in Java either directly or indirectly inherits from the Object class, which provides some common methods, such as toString(), equals(), and hashCode().\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you access elements in an array using negative indexes in Java?\",\r\n    answer: \"No\",\r\n    explanation:\r\n      \"In Java, you cannot access elements in an array using negative indexes. Array indexes in Java start at 0 and go up to the size of the array minus one. Using a negative index would result in an ArrayIndexOutOfBoundsException at runtime.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What happens if you try to access an element in a Java array using an index that is out of bounds?\",\r\n    answer: \"ArrayIndexOutOfBoundsException\",\r\n    explanation:\r\n      \"If you try to access an element in a Java array using an index that is out of bounds (either negative or greater than or equal to the array length), you will get an ArrayIndexOutOfBoundsException at runtime.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the base class for all reference data types in Java?\",\r\n    answer: \"Object\",\r\n    explanation:\r\n      \"The Object class is the base class for all reference data types in Java. All classes, including arrays, inherit from the Object class, which provides some default methods and behaviors.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the keyword used to create an instance of a class in Java?\",\r\n    answer: \"new\",\r\n    explanation:\r\n      'The \"new\" keyword is used to create an instance of a class in Java. It allocates memory for a new object and returns a reference to that object.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"In Java, can you assign a String object to a variable of type Object?\",\r\n    answer: \"Yes\",\r\n    explanation:\r\n      \"In Java, you can assign a String object to a variable of type Object because String is a subclass of Object. This is an example of polymorphism, where a subclass can be treated as an instance of its superclass.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How can you concatenate two strings in Java?\",\r\n    answer: \"Using the + operator\",\r\n    explanation:\r\n      \"In Java, you can concatenate two strings using the + operator. This creates a new string that contains the characters of the first string followed by the characters of the second string.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can you create an array of objects in Java?\",\r\n    answer: \"Yes\",\r\n    explanation:\r\n      \"In Java, you can create an array of objects just like you would create an array of primitive data types. The elements of the array would be of the same class or a class derived from a common superclass.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: 'What is the purpose of the \"length\" property in a Java array?',\r\n    answer: \"To obtain the number of elements\",\r\n    explanation:\r\n      'The \"length\" property of a Java array is used to obtain the number of elements in the array. It is automatically assigned when the array is created and cannot be changed during the lifetime of the array.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between an abstract class and an interface in Java?\",\r\n    answer: \"Abstract classes can have implementation, interfaces cannot\",\r\n    explanation:\r\n      \"An abstract class in Java can have both abstract methods (methods without implementation) and non-abstract methods (methods with implementation), whereas an interface can only have abstract methods. Additionally, a class can extend only one abstract class, but it can implement multiple interfaces.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Which method should be used to compare the contents of two String objects in Java?\",\r\n    answer: \"equals()\",\r\n    explanation:\r\n      \"In Java, the equals() method should be used to compare the contents of two String objects. Using the == operator compares the memory addresses of the objects, which may not be the same even if the contents are identical.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is a multi-dimensional array in Java?\",\r\n    answer: \"An array of arrays\",\r\n    explanation:\r\n      \"A multi-dimensional array in Java is essentially an array of arrays. The elements of a multi-dimensional array are other arrays, which can have their own elements, and so on. The most common type of multi-dimensional array is a two-dimensional array, which can be thought of as a table with rows and columns.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the syntax to create a new instance of a class in Java?\",\r\n    answer: \"new ClassName();\",\r\n    explanation:\r\n      'To create a new instance of a class in Java, you use the \"new\" keyword followed by the class name and a pair of parentheses. This creates a new object of the specified class and calls its constructor to initialize the object.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you concatenate two strings in Java?\",\r\n    answer: \"Using the + operator\",\r\n    explanation:\r\n      \"In Java, you can concatenate two strings by using the + operator. When the + operator is used between two strings, it appends the second string to the end of the first string.\",\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question: \"What is the purpose of an interface in Java?\",\r\n    answer: \"To define a contract for implementing classes\",\r\n    explanation:\r\n      \"An interface in Java is a collection of abstract methods (methods without a body) that serves as a contract for classes that implement the interface. The implementing class must provide a concrete implementation for each method defined in the interface. Interfaces are used to define common behavior and promote code reusability.\",\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question: \"How do you declare a constant (immutable) variable in Java?\",\r\n    answer: \"Using the final keyword\",\r\n    explanation:\r\n      'In Java, you can declare a constant (immutable) variable by using the \"final\" keyword before the variable declaration. Once a final variable is assigned a value, it cannot be changed.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the default value of a reference data type in Java?\",\r\n    answer: \"null\",\r\n    explanation:\r\n      'In Java, the default value for a reference data type (such as an object, class, or array) is \"null\". This means that, by default, a reference variable does not point to any object in memory.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you create an array of objects in Java?\",\r\n    answer: \"new ClassName[arraySize];\",\r\n    explanation:\r\n      'To create an array of objects in Java, you use the \"new\" keyword followed by the class name and square brackets containing the desired array size. This creates an array of the specified class with the specified size, but the array elements will be initialized with the default value for reference data types, which is \"null\". You will need to initialize each element separately by creating a new instance of the class.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of the toString() method in Java?\",\r\n    answer: \"To provide a string representation of an object\",\r\n    explanation:\r\n      \"The toString() method in Java is used to provide a string representation of an object. By default, the toString() method returns a string containing the object's class name and its hash code. However, you can override the toString() method in your class to provide a more meaningful string representation of the object.\",\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question: \"What is the instanceof operator used for in Java?\",\r\n    answer:\r\n      \"To check if an object is an instance of a specific class or interface\",\r\n    explanation:\r\n      'The instanceof operator in Java is used to determine whether an object is an instance of a specific class or an implementation of a specific interface. It returns \"true\" if the object is an instance of the specified class or interface; otherwise, it returns \"false\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you declare and initialize a one-dimensional array in Java?\",\r\n    answer: \"dataType[] arrayName = new dataType[arraySize];\",\r\n    explanation:\r\n      'To declare and initialize a one-dimensional array in Java, you first specify the data type, followed by square brackets, the array name, an equals sign, the \"new\" keyword, the data type again, and square brackets with the desired array size. This creates an array of the specified data type with the specified size, and initializes its elements with the default values for the data type.',\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default refernceDataTypes;\r\n","const terminal = [\r\n  {\r\n    question: \"What does the pwd command do in the terminal?\",\r\n    answer: \"Prints the current working directory\",\r\n    explanation:\"The pwd (print working directory) command displays the current working directory (the directory you are currently in) when executed in the terminal. This helps users understand their current location within the file system.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of the echo command?\",\r\n    answer: \"Prints text to the console\",\r\n    explanation:\r\n      \"The echo command is a Unix-based command that prints the specified text to the console. It is useful for displaying messages, variable values, or the contents of a file.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What does the ls command do?\",\r\n    answer: \"Lists the contents of a directory\",\r\n    explanation:\r\n      \"The ls (list) command is a Unix-based command that shows the contents of a directory. By default, it lists the files and folders in the current working directory, but it can also be used with specific directory paths or with various options for additional details.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What does the cd command do?\",\r\n    answer: \"Changes the current working directory\",\r\n    explanation:\r\n      \"The cd (change directory) command is used to navigate between directories in the terminal. By specifying a target directory, either by its name or an absolute path, the cd command allows users to change their current working directory.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What does the mv command do?\",\r\n    answer: \"Moves or renames files and directories\",\r\n    explanation:\r\n      \"The mv (move) command is used to move files or directories from one location to another, or to rename them. It takes two arguments: the source file or directory and the destination file or directory. It is useful for organizing files and directories within the file system.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of the mkdir command?\",\r\n    answer: \"Creates a new directory\",\r\n    explanation:\r\n      \"The mkdir (make directory) command is used to create a new directory with the specified name. This helps users organize their files by creating separate directories for different projects or categories.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What does the rmdir command do?\",\r\n    answer: \"Removes an empty directory\",\r\n    explanation:\r\n      \"The rmdir (remove directory) command is used to delete an empty directory. It takes one argument, which is the name of the directory you want to remove. Note that it can only remove directories that are empty; for directories containing files or other directories, you need to use the rm command with the -r (recursive) option.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of the touch command?\",\r\n    answer: \"Creates a new file or updates the timestamp of an existing file\",\r\n    explanation:\r\n      \"The touch command is used to create new, empty files or update the timestamp of existing files. When creating a new file, it takes the file name as an argument. If the file already exists, touch updates its last modified timestamp to the current time.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What does the cp command do?\",\r\n    answer: \"Copies files or directories from one location to another\",\r\n    explanation:\r\n      \"The cp (copy) command is used to duplicate files or directories from a source location to a destination location. It takes two arguments: the source file or directory and the destination file or directory. This is useful for creating backups or duplicating files for different purposes.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What does the man command do?\",\r\n    answer: \"Displays the manual page for a Unix command or system function\",\r\n    explanation:\r\n      \"The man (manual) command shows the manual page for a Unix command or system function, providing detailed documentation about its purpose, usage, options, and examples. This is useful for learning how to use a command correctly and efficiently, or for understanding the various options and parameters available.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What do the double dots (..) represent in a terminal command?\",\r\n    answer: \"The parent directory of the current directory\",\r\n    explanation:\r\n      \"When you use the double dots (..) in a terminal command, it refers to the parent directory of the current directory, which is the directory one level up in the directory hierarchy. This is useful when you want to navigate up one level or perform operations on files or directories in the parent directory.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use the cd command to change the current working directory to the previous directory?\",\r\n    answer: \"cd ..\",\r\n    explanation:\r\n      'To change the current working directory to the previous directory, use the command \"cd ..\". The double dots (..) represent the parent directory of the current directory, and using the cd command with the double dots allows you to navigate up one level in the directory hierarchy.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What does the rm command do?\",\r\n    answer: \"Remove files or directories\",\r\n    explanation:\r\n      \"The rm command is a Unix-based command that is used to remove files or directories. It can be used with various options to remove single files, multiple files, empty directories, or directories with contents.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use the cp command to copy a directory and its contents to a different directory?\",\r\n    answer: \"cp -r directory /path/to/directory\",\r\n    explanation:\r\n      \"To copy a directory and its contents to a different directory, use the cp command with the -r option followed by the source directory and the destination directory. The -r option tells the cp command to copy the files and directories recursively, which means it will copy the directory, its contents, and any subdirectories and their contents.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What does the whatis command do?\",\r\n    answer: \"Displays a brief one-line description of a Unix command\",\r\n    explanation:\r\n      \"The whatis command is a Unix-based command that displays a brief one-line description of a Unix command. It is helpful when you want to quickly understand the purpose of a command without referring to the full manual page.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you display the manual page for a Unix command?\",\r\n    answer: \"man command_name\",\r\n    explanation:\r\n      'To display the manual page for a Unix command, use the \"man\" command followed by the name of the command you want to look up. The manual page provides detailed documentation about the command, including its purpose, usage, options, and examples.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What does the touch command do?\",\r\n    answer: \"Creates a new file or updates the timestamp of an existing file\",\r\n    explanation:\r\n      \"The touch command is a Unix-based command that is used to create a new file or update the timestamp of an existing file. When used with a file that does not exist, it creates the file; when used with an existing file, it updates the filetimestamp to the current time.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you create a new directory using the mkdir command?\",\r\n    answer: \"mkdir new_directory_name\",\r\n    explanation:\r\n      'To create a new directory using the mkdir command, type \"mkdir\" followed by the name of the new directory you want to create. This will create the directory in the current working directory.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you remove a file using the rm command?\",\r\n    answer: \"rm file_name\",\r\n    explanation:\r\n      'To remove a file using the rm command, type \"rm\" followed by the name of the file you want to remove. This will delete the specified file from the current working directory.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use the ls command to list the contents of a directory, including hidden files?\",\r\n    answer: \"ls -a\",\r\n    explanation:\r\n      \"To list the contents of a directory, including hidden files, use the ls command with the -a option. The -a option tells the ls command to display all files and directories, including those that are hidden (whose names start with a dot).\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you create multiple new files using the touch command?\",\r\n    answer: \"touch file1.txt file2.txt file3.txt\",\r\n    explanation:\r\n      'To create multiple new files using the touch command, type \"touch\" followed by the names of the files you want to create, separated by spaces. This will create the specified files in the current working directory.',\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question:\r\n      \"How do you use the mv command to move a file to a different directory?\",\r\n    answer: \"mv source_file /path/to/destination_directory\",\r\n    explanation:\r\n      'To move a file to a different directory using the mv command, type \"mv\" followed by the source file and the destination directory. This will move the specified file from its current location to the specified directory.',\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question: 'What does the \".\" symbol represent in terminal commands?',\r\n    answer: \"Current directory\",\r\n    explanation:\r\n      \"In terminal commands, the single dot (.) symbol represents the current directory. When used in a command, it refers to the directory you are currently in.\",\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question: 'What does the \"..\" symbol represent in terminal commands?',\r\n    answer: \"Parent directory\",\r\n    explanation:\r\n      \"In terminal commands, the two dots (..) symbol represents the parent directory of the current directory. When used in a command, it refers to the directory one level up in the directory hierarchy.\",\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question:\r\n      \"How do you remove a directory and its contents using the rm command?\",\r\n    answer: \"rm -r directory_name\",\r\n    explanation:\r\n      'To remove a directory and its contents using the rm command, type \"rm -r\" followed by the name of the directory. The -r option tells the rm command to remove the directory and its contents recursively, which means it will delete the directory, its contents, and any subdirectories and their contents.',\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question: \"What does the -l option do when used with the ls command?\",\r\n    answer: \"Lists the contents of a directory in long format\",\r\n    explanation:\r\n      \"When used with the ls command, the -l option lists the contents of a directory in long format. This provides additional information about each file and directory, such as permissions, ownership, size, and modification date.\",\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question:\r\n      \"How do you create a new file with content using the echo command?\",\r\n    answer: 'echo \"file content\" > file_name',\r\n    explanation:\r\n      'To create a new file with content using the echo command, type \"echo\" followed by the content you want to add, enclosed in quotes, then use the redirection operator \">\" followed by the file name. This will create a new file with the specified content.',\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default terminal;\r\n","const versionControl = [\r\n  {\r\n    question: \"What is the Git command used to create a new Git repository?\",\r\n    answer: \"git init\",\r\n    explanation:\r\n      \"The `git init` command is used to create a new Git repository. When you initialize a repository with `git init`, Git creates a hidden .git directory in the current working directory, which contains all the necessary files and directories to manage version control for your project.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What Git command is used to add changes in the working directory to the staging area?\",\r\n    answer: \"git add\",\r\n    explanation:\r\n      \"The `git add` command is used to add changes in the working directory to the staging area. The staging area is a space in Git where you can prepare changes for the next commit.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the Git command used to create a new commit with the changes that have been staged in the staging area?\",\r\n    answer: \"git commit\",\r\n    explanation:\r\n      \"The `git commit` command is used to create a new commit with the changes that have been staged in the staging area. A commit is a snapshot of your project at a particular point in time, and it contains a record of the changes that have been made.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What Git command shows the commit history of a Git repository?\",\r\n    answer: \"git log\",\r\n    explanation:\r\n      \"The `git log` command shows the commit history of a Git repository. It displays a list of all commits in reverse chronological order, with the most recent commit listed first.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of a version control system (VCS)?\",\r\n    answer: \"To manage changes made to files and folders over time.\",\r\n    explanation:\r\n      \"The purpose of a version control system (VCS) is to manage changes made to files and folders over time. A VCS allows you to track and record changes to your project, collaborate with others, and maintain a history of your work.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is Git?\",\r\n    answer: \"a version control system.\",\r\n    explanation:\r\n      \"Git is a free and open-source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you initialize a new Git repository?\",\r\n    answer:\r\n      \"git init\",\r\n    explanation:\r\n      \"The 'git init' command creates an empty Git repository or reinitializes an existing one by creating the necessary hidden .git directory in the current working directory. This directory contains all the necessary files and directories to manage version control for your project.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of the staging area in Git?\",\r\n    answer:\r\n      \"a space in Git where you can prepare changes for the next commit.\",\r\n    explanation:\r\n      \"The staging area is an intermediate area where you can add changes to be committed. By staging changes, you can choose which changes to include in the next commit and which changes to exclude. This allows you to control the granularity of your commits and keep your commit history organized.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you add changes to the staging area?\",\r\n    answer:\r\n      \"git add\",\r\n    explanation:\r\n      \"The 'git add' command adds changes in the working directory to the staging area. You can add individual files or directories, or use wildcards to add multiple files at once. Once changes are staged, they are ready to be committed using the 'git commit' command.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the command to check the status of the working directory and staging area in Git?\",\r\n    answer:\r\n      \"git status\",\r\n    explanation:\r\n      \"The 'git status' command shows the current status of the working directory and the staging area. It displays information about the files that have been modified, added, or deleted, as well as the changes that have been staged and committed.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is a commit in Git?\",\r\n    answer:\r\n      \"a snapshot of your project at a particular point in time that contains a record of the changes that have been made.\",\r\n    explanation:\r\n      \"A commit is a fundamental concept in Git that represents a snapshot of your project at a particular point in time. It contains a record of the changes that have been made to the files in your repository since the last commit, along with a commit message that describes the changes.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you create a commit in Git?\",\r\n    answer: \"git commit\",\r\n    explanation:\r\n      \"The 'git commit' command creates a new commit with the changes that have been staged in the staging area. The commit includes a commit message that describes the changes, which can be used later to understand the purpose of the commit.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the command to view the commit history in Git?\",\r\n    answer: \"git log\",\r\n    explanation:\r\n      \"The 'git log' command shows the commit history of a Git repository. It displays a list of all commits in reverse chronological order, with the most recent commit listed first. Each commit includes a commit message, author information, and the date and time the commit was made.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between the working directory and the staging area?\",\r\n    answer:\r\n      \"The working directory is where you make changes to files, while the staging area is where you prepare changes for the next commit.\",\r\n    explanation:\r\n      \"The working directory is where you make changes to files in your project. The staging area, also known as the index, is where you prepare changes for the next commit. When you make changes to files in the working directory, those changes are not automatically tracked by Git. Instead, you need to use the git add command to stage the changes in the staging area. Once the changes are staged, you can create a commit with git commit to save the changes to the repository.\",\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question: \"What is the git init command used for?\",\r\n    answer: \"used to create a new Git repository.\",\r\n    explanation:\r\n      \"The git init command is used to create a new Git repository. When you initialize a repository with git init, Git creates a hidden .git directory in the current working directory, which contains all the necessary files and directories to manage version control for your project. Once a repository is initialized, you can start tracking changes to files in your project by adding them to the staging area and creating commits.\",\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question: \"What is the git add command used for?\",\r\n    answer:\r\n      \"adds changes in the working directory to the staging area.\",\r\n    explanation:\r\n      \"The git add command is used to add changes in the working directory to the staging area. The staging area is where you prepare changes for the next commit. When you make changes to files in the working directory, those changes are not automatically tracked by Git. Instead, you need to use the git add command to stage the changes in the staging area. Once the changes are staged, you can create a commit with git commit to save the changes to the repository.\",\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question: \"What is the git commit command used for?\",\r\n    answer:\r\n      \"used to create a new commit with the changes that have been staged in the staging area.\",\r\n    explanation:\r\n      \"The git commit command is used to create a new commit with the changes that have been staged in the staging area. A commit is a snapshot of your project at a particular point in time, and it contains a record of the changes that have been made. Each commit has a unique identifier, which allows you to track changes to your project over time. Creating descriptive commit messages can also make it easier to understand the changes made to your project.\",\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default versionControl;\r\n","const stringHandling = [\r\n  {\r\n    question: \"What does it mean that strings are immutable in Java?\",\r\n    answer: \"Once a string object is created, its content cannot be changed.\",\r\n    explanation:\r\n      \"Immutability means that once a string object is created, its content cannot be altered. Instead, any operation that appears to modify the string actually creates a new string object with the desired modifications, leaving the original string object unchanged.\",\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question: \"How do you concatenate two strings in Java?\",\r\n    answer: 'Using the \"+\" operator.',\r\n    explanation:\r\n      'The \"+\" operator is used to concatenate two strings in Java. When the \"+\" operator is used with strings, it combines the two strings into a single, new string without modifying the original strings.',\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question: \"What is the primary purpose of the StringBuilder class in Java?\",\r\n    answer: \"To allow for efficient manipulation of strings.\",\r\n    explanation:\r\n      \"The StringBuilder class in Java is designed to allow for efficient manipulation of strings, especially when performing numerous string operations, such as concatenation or insertion. Unlike strings, StringBuilder objects are mutable, which means their content can be changed without creating new objects.\",\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question:\r\n      \"What method can be used to compare the contents of two strings in Java?\",\r\n    answer: \"The equals() method.\",\r\n    explanation:\r\n      \"The equals() method is used to compare the contents of two strings in Java. This method compares the individual characters within the strings and returns true if the contents are the same and false otherwise.\",\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question: \"How do you convert a string to a character array in Java?\",\r\n    answer: \"By using the toCharArray() method.\",\r\n    explanation:\r\n      \"The toCharArray() method is a method of the String class in Java that converts a string into a character array. The method returns a new character array containing the characters of the original string in the same order.\",\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question: \"What method can be used to find the length of a string in Java?\",\r\n    answer: \"The length() method.\",\r\n    explanation:\r\n      \"The length() method is a method of the String class in Java that returns the number of characters in a string. This method is useful when iterating through the characters of a string or when performing other string-related operations.\",\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question: \"How do you create a substring from an existing string in Java?\",\r\n    answer: \"By using the substring() method.\",\r\n    explanation:\r\n      \"The substring() method is a method of the String class in Java that creates a new string containing a portion of the original string. The method accepts one or two integer arguments, which represent the starting index and optionally the ending index of the substring.\",\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question:\r\n      \"How do you replace all occurrences of a character in a string with another character in Java?\",\r\n    answer: \"By using the replace() method.\",\r\n    explanation:\r\n      \"The replace() method is a method of the String class in Java that creates a new string with all occurrences of a specified character replaced by another character. The method accepts two arguments, the character to be replaced and the character to replace it with.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you remove leading and trailing whitespace from a string in Java?\",\r\n    answer: \"By using the trim() method.\",\r\n    explanation:\r\n      \"The trim() method is a method of the String class in Java that creates a new string with leading and trailing whitespace removed from the original string. The method does not modify the original string, as strings are immutable in Java.\",\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question:\r\n      \"What is the method to convert a string to all uppercase letters in Java?\",\r\n    answer: \"toUpperCase()\",\r\n    explanation:\r\n      \"The toUpperCase() method of the String class in Java creates a new string with all characters of the original string converted to uppercase. The original string remains unchanged, as strings are immutable in Java.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the method to convert a string to all lowercase letters in Java?\",\r\n    answer: \"toLowerCase()\",\r\n    explanation:\r\n      \"The toLowerCase() method of the String class in Java creates a new string with all characters of the original string converted to lowercase. The original string remains unchanged, as strings are immutable in Java.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you get the length of a string in Java?\",\r\n    answer: \"length()\",\r\n    explanation:\r\n      \"The length() method of the String class in Java returns the number of characters in the string. It does not modify the string itself.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you replace all occurrences of a character in a string in Java?\",\r\n    answer: \"replace()\",\r\n    explanation:\r\n      \"The replace() method of the String class in Java creates a new string by replacing all occurrences of a specified character with another character. The original string remains unchanged, as strings are immutable in Java.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you check if a string starts with a specific substring in Java?\",\r\n    answer: \"startsWith()\",\r\n    explanation:\r\n      \"The startsWith() method of the String class in Java checks if the string starts with a specified substring. It returns a boolean value, true if the string starts with the substring, and false otherwise.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you check if a string ends with a specific substring in Java?\",\r\n    answer: \"endsWith()\",\r\n    explanation:\r\n      \"The endsWith() method of the String class in Java checks if the string ends with a specified substring. It returns a boolean value, true if the string ends with the substring, and false otherwise.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you get the character at a specific index in a string in Java?\",\r\n    answer: \"charAt()\",\r\n    explanation:\r\n      \"The charAt() method of the String class in Java returns the character at a specified index in the string. Indexes in Java strings are zero-based.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you split a string into an array of substrings in Java?\",\r\n    answer: \"split()\",\r\n    explanation:\r\n      \"The split() method of the String class in Java takes a regular expression as an argument and splits the string into an array of substrings based on the pattern defined by the regular expression. The original string remains unchanged, as strings are immutable in Java.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you concatenate two strings in Java?\",\r\n    answer: 'By using the \"+\" operator or concat() method.',\r\n    explanation:\r\n      'In Java, you can concatenate two strings using the \"+\" operator, which creates a new string by joining the two strings. Alternatively, you can use the concat() method of the String class, which also creates a new string by appending the specified string to the original string. Both methods do not modify the original strings, as strings are immutable in Java.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you find the index of the first occurrence of a substring in a string in Java?\",\r\n    answer: \"indexOf()\",\r\n    explanation:\r\n      \"The indexOf() method of the String class in Java returns the index ofthe first occurrence of a specified substring in the string. If the substring is not found, it returns -1. The original string remains unchanged, as strings are immutable in Java.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What does it mean that strings are immutable in Java?\",\r\n    answer:\r\n      \"Strings are immutable in Java, meaning that once a string object is created, it cannot be changed.\",\r\n    explanation:\r\n      \"In Java, strings are immutable because once a string object is created, its contents cannot be modified. This immutability has several benefits, such as improved security and simplified string handling. When you perform operations that appear to change a string, a new string object is created with the modified content, while the original string remains unchanged.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you create a new string after modifying an existing one in Java?\",\r\n    answer:\r\n      \"You can create a new string by concatenating or performing other operations on the existing string, as the original string remains unchanged due to its immutability.\",\r\n    explanation:\r\n      \"When you perform an operation on a string in Java, such as concatenation or replacement, a new string object is created with the modified content. The original string object remains unchanged because strings are immutable in Java. This means that you are not modifying the existing string but rather creating a new one with the desired changes.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the advantage of string immutability in Java?\",\r\n    answer:\r\n      \"String immutability offers several advantages, including improved security, optimized performance, and simplified string handling.\",\r\n    explanation:\r\n      \"Immutability ensures that once a string object is created, its content cannot be changed, which prevents unauthorized modifications and increases security. It also allows the Java runtime to optimize performance by reusing the same string object across multiple references, reducing memory usage. Additionally, string handling is simplified, as developers don't need to worry about the side effects of modifying shared string instances.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How does the + operator work with immutable strings in Java?\",\r\n    answer:\r\n      \"The + operator creates a new string object by concatenating two or more strings.\",\r\n    explanation:\r\n      \"When using the + operator to concatenate strings in Java, a new string object is created, and the contents of the original strings are combined into the new object. The original strings remain unchanged due to their immutability. The + operator can be used to concatenate multiple strings or to concatenate strings with other data types by implicitly converting them to strings.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Why is the StringBuilder class recommended for repeated string manipulations in Java?\",\r\n    answer:\r\n      \"StringBuilder is recommended for repeated string manipulations because it is mutable, offering better performance compared to using immutable strings.\",\r\n    explanation:\r\n      \"When manipulating strings repeatedly in Java, using immutable strings can result in the creation of many temporary string objects, leading to decreased performance and increased memory usage. The StringBuilder class provides a mutable alternative that allows you to modify the contents of the string directly without creating new string objects, resulting in more efficient memory usage and improved performance.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What happens to the original string when you perform the .replace() method on it?\",\r\n    answer:\r\n      \"The original string remains unchanged, and a new string is created with the specified replacements.\",\r\n    explanation:\r\n      \"Because strings are immutable in Java, the .replace() method does not modify the original string. Instead, it creates a new string object with the specified replacements. The original string remains unchanged, and the new string with the replacements is returned by the method.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Are string literals in Java mutable or immutable?\",\r\n    answer: \"immutable.\",\r\n    explanation:\r\n      \"In Java, string literals are immutable, just like any other string objects created using the String class. This means that once a string literal is defined, its contents cannot be changed.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How does the .substring() method work with immutable strings in Java?\",\r\n    answer:\r\n      \"The .substring() method creates a new string object that is a substring of the original string.\",\r\n    explanation:\r\n      \"When you call the .substring() method on a string object in Java, a new string object is created containing the specified range of characters from the original string. The original string remains unchanged due to its immutability. The new substring shares the same underlying character array with the original string, further optimizing memory usage.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Why does the String class in Java have private final fields?\",\r\n    answer:\r\n      \"The String class in Java has private final fields to enforce immutability and encapsulation.\",\r\n    explanation:\r\n      \"The private final fields in the String class ensure that the contents of a string object cannot be changed after it is created. This enforces the immutability of strings in Java. Additionally, by making the fields private, the String class encapsulates its internal state, preventing external code from accessing or modifying the fields directly.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How does the equals() method compare two strings in Java?\",\r\n    answer:\r\n      \"The equals() method compares two strings character by character for equality.\",\r\n    explanation:\r\n      \"The equals() method in Java compares two string objects to determine if they have the same sequence of characters. It does this by checking each character in the two strings one by one. If all characters match, the method returns true, indicating that the strings are equal; otherwise, it returns false.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the primary difference between the equals() and compareTo() methods for comparing strings in Java?\",\r\n    answer:\r\n      \"The equals() method checks if two strings are equal, while the compareTo() method compares the lexicographic order of the strings.\",\r\n    explanation:\r\n      \"The equals() method in Java is used to determine if two string objects have the same sequence of characters, whereas the compareTo() method compares the strings lexicographically. The compareTo() method returns a negative, zero, or positive integer if the first string is lexicographically less than, equal to, or greater than the second string, respectively.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      'Why is it not recommended to use the \"==\" operator for comparing strings in Java?',\r\n    answer:\r\n      'The \"==\" operator compares object references, not the content of the strings.',\r\n    explanation:\r\n      'In Java, the \"==\" operator compares the memory addresses of the two objects, not their contents. When comparing strings, this can lead to unexpected results, as two strings with the same content might have different memory addresses. To compare the content of strings, it is recommended to use the equals() method, which compares the characters in the strings to determine if they are equal.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you ignore case when comparing strings using the equals() method in Java?\",\r\n    answer: \"Use the equalsIgnoreCase() method.\",\r\n    explanation:\r\n      \"The equalsIgnoreCase() method in Java compares two strings without considering their case. It checks each character in the two strings one by one, and if all characters match regardless of their case, the method returns true; otherwise, it returns false.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the return type of the compareTo() method in Java?\",\r\n    answer: \"int\",\r\n    explanation:\r\n      \"The compareTo() method in Java returns an integer value. This integer value is negative, zero, or positive if the first string is lexicographically less than, equal to, or greater than the second string, respectively.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Which Java method can be used to test if a string starts with a specified prefix?\",\r\n    answer: \"startsWith()\",\r\n    explanation:\r\n      \"The startsWith() method in Java can be used to test if a string starts with a specified prefix. It returns true if the string starts with the given prefix, and false otherwise.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Which Java method can be used to test if a string ends with a specified suffix?\",\r\n    answer: \"endsWith()\",\r\n    explanation:\r\n      \"The endsWith() method in Java can be used to test if a string ends with a specified suffix. It returns true if the string ends with the given suffix, and false otherwise.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you check if two strings have the same reference in Java?\",\r\n    answer: 'Use the \"==\" operator.',\r\n    explanation:\r\n      'In Java, the \"==\" operator checks if two object references point to the same object in memory. When applied to strings, it compares the memory addresses of the two string objects, not their contents. If the memory addresses are the same, it returns true; otherwise, it returns false.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Which method should you use to compare strings for sorting purposes in Java?\",\r\n    answer: \"compareTo()\",\r\n    explanation:\r\n      \"For sorting purposes, you should use the compareTo() method in Java. This method compares two strings lexicographically, returning a negative, zero, or positive integer if the first string is lexicographically less than, equal to, or greater than the second string, respectively. This information can be used to sort strings in alphabetical order.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How can you compare strings based on their Unicode values in Java?\",\r\n    answer: \"Use the compareTo() method.\",\r\n    explanation:\r\n      \"The compareTo() method in Java compares two strings based on their Unicode values. When comparing characters in the strings, it uses the difference between the Unicode values of the characters to determine if one string is lexicographically less than, equal to, or greater than the other.\",\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default stringHandling;\r\n","const VariableDecIntIns = [\r\n  {\r\n    question:\r\n      \"What is the difference between declaring and initializing a variable in Java?\",\r\n    answer:\r\n      \"Declaration defines the data type and name of a variable, while initialization assigns a value to it.\",\r\n    explanation:\r\n      \"When a variable is declared, its data type and name are specified, but no memory is allocated for the variable. In contrast, initialization allocates memory for the variable and assigns an initial value to it.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is an instance variable in Java?\",\r\n    answer:\r\n      \"A non-static variable that belongs to an object and holds values specific to each instance of the class.\",\r\n    explanation:\r\n      \"Instance variables are declared inside a class but outside any method. They store data that is specific to each instance of a class and can have different values for different objects.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you declare and initialize an integer variable in Java?\",\r\n    answer: \"int variableName = value;\",\r\n    explanation:\r\n      'The \"int\" keyword is used to declare an integer variable, followed by the variable name, an equals sign, and the initial value of the variable. The statement ends with a semicolon.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can instance variables be accessed directly from a static method in Java?\",\r\n    answer: \"No\",\r\n    explanation:\r\n      \"Instance variables belong to an object, and a static method belongs to the class itself. To access instance variables from a static method, you need to create an object of the class and access the instance variables through that object.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the scope of an instance variable in Java?\",\r\n    answer:\r\n      \"The entire class in which it is declared.\",\r\n    explanation:\r\n      \"Instance variables can be accessed by any method within the class where they are declared. They are not accessible outside the class unless the access modifier (such as public) allows it.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you declare a variable of type String in Java?\",\r\n    answer: \"String variableName;\",\r\n    explanation:\r\n      'To declare a variable of type String, use the \"String\" keyword followed by the variable name. The statement ends with a semicolon.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What are the default values assigned to instance variables in Java?\",\r\n    answer: \"Numeric types: 0, boolean: false, reference types: null\",\r\n    explanation:\r\n      \"In Java, the default values for instance variables are 0 for numeric types (such as int, long, float, double), false for boolean, and null for reference types (such as String or custom objects).\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you declare multiple variables of the same data type in a single line in Java?\",\r\n    answer: \"Yes\",\r\n    explanation:\r\n      \"In Java, you can declare multiple variables of the same data type in a single line, separated by commas. For example: int a, b, c;\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you declare and initialize a boolean variable in Java?\",\r\n    answer: \"boolean variableName = value;\",\r\n    explanation:\r\n      'To declare and initialize a boolean variable in Java, use the \"boolean\" keyword followed by the variable name, an equals sign, and the initial value (either \"true\" or \"false\"). The statement ends with a semicolon.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What are local variables in Java?\",\r\n    answer: \"Variables defined within a method, constructor, or block.\",\r\n    explanation:\r\n      \"Local variables are variables that are declared within a method, constructor, or block. They have a limited scope, and their visibility is restricted to the block in which they are defined.\",\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question: \"What are class variables in Java?\",\r\n    answer: \"Static variables within a class.\",\r\n    explanation:\r\n      'Class variables are variables that are declared with the \"static\" keyword within a class, but outside of any method, constructor, or block. They have a single value that is shared among all instances of the class.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between instance variables and local variables?\",\r\n    answer:\r\n      \"Instance variables are declared within a class, and local variables are declared within a method or block.\",\r\n    explanation:\r\n      \"Instance variables are variables declared within a class but outside of any method or block. They have a separate value for each instance of the class. Local variables, on the other hand, are declared within a method, constructor, or block and have a limited scope and visibility.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the default value of an uninitialized instance variable of type int?\",\r\n    answer: \"0\",\r\n    explanation:\r\n      \"In Java, when an instance variable of type int is not explicitly initialized, it is automatically initialized to its default value, which is 0.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the default value of an uninitialized instance variable of type boolean?\",\r\n    answer: \"false\",\r\n    explanation:\r\n      'In Java, when an instance variable of type boolean is not explicitly initialized, it is automatically initialized to its default value, which is \"false\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the default value of an uninitialized instance variable of type char?\",\r\n    answer: \"\\\\u0000\",\r\n    explanation:\r\n      \"In Java, when an instance variable of type char is not explicitly initialized, it is automatically initialized to its default value, which is the null character (\\u0000).\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the scope of a local variable in Java?\",\r\n    answer:\r\n      \"The block which it is declared.\",\r\n    explanation:\r\n      \"In Java, the scope of a local variable is limited to the block in which it is declared. The variable is only accessible within that block and goes out of scope when the block execution is completed.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      'What does the \"final\" keyword do when applied to a variable in Java?',\r\n    answer: \"It makes the variable a constant.\",\r\n    explanation:\r\n      'When the \"final\" keyword is applied to a variable in Java, it makes the variable a constant. This means the variable\\'s value cannot be changed after it has been initialized.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What happens if you do not initialize an instance variable?\",\r\n    answer: \"It gets a default value.\",\r\n    explanation:\r\n      \"If you do not initialize an instance variable, Java automatically assigns a default value based on the data type of the variable. For example, numeric types default to 0, boolean types default to false, and reference types default to null.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      'What is the purpose of the \"final\" keyword when used with a variable?',\r\n    answer: \"It makes the variable's value unmodifiable.\",\r\n    explanation:\r\n      'When the \"final\" keyword is used with a variable, it makes the variable\\'s value unmodifiable, meaning it can only be assigned once. This creates a constant variable that cannot be changed after its initial assignment.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What are class variables and how are they declared?\",\r\n    answer:\r\n      'Variables shared among all instances of a class and are declared with the \"static\" keyword.',\r\n    explanation:\r\n      'Class variables are shared among all instances of a class, and only one copy of the variable exists in memory. They are declared using the \"static\" keyword before the data type. For example: static int counter;',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: 'What does it mean for a variable to be \"shadowed\"?',\r\n    answer:\r\n      \"When a local variable has the same name as an instance variable.\",\r\n    explanation:\r\n      'When a local variable has the same name as an instance variable, the local variable is said to \"shadow\" the instance variable. In this case, the local variable takes precedence within the method, and the instance variable is only accessible using the \"this\" keyword. For example: this.instanceVariable = localVariable;',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you explicitly initialize an array?\",\r\n    answer: \"Use curly braces {} and a comma-separated list of values.\",\r\n    explanation:\r\n      \"To explicitly initialize an array in Java, use curly braces and a comma-separated list of values. For example: int[] numbers = {1, 2, 3, 4, 5};\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you initialize an object in Java?\",\r\n    answer: 'Use the \"new\" keyword and call the constructor.',\r\n    explanation:\r\n      'In Java, you initialize an object by using the \"new\" keyword and calling the constructor of the class. For example: ClassName object = new ClassName();',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of a constructor in Java?\",\r\n    answer: \"Initializes an object when it is created.\",\r\n    explanation:\r\n      \"A constructor is a special method in a class that is called when a new instance of the class is created. Constructors are used to initialize the state of an object by setting the values of its instance variables.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between declaring and initializing a variable?\",\r\n    answer:\r\n      \"Declaring a variable reserves memory for it, while initializing a variable assigns a value to it.\",\r\n    explanation:\r\n      \"Declaring a variable involves specifying its type and name, which reserves memory for it. Initializing a variable involves assigning a specific value to it. Variables can be declared and initialized at the same time, or they can be declared first and then initialized later in the code.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How can you access an instance variable from a static method?\",\r\n    answer:\r\n      \"By creating an instance of the class and using it to access the instance variable.\",\r\n    explanation:\r\n      \"Static methods belong to the class and not to instances of the class. As a result, you cannot directly access instance variables from a static method. To access an instance variable from a static method, you need to create an instance of the class and then use that instance to access the variable.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: 'What does the \"this\" keyword refer to in Java?',\r\n    answer: \"the current instance of a class.\",\r\n    explanation:\r\n      'In Java, the \"this\" keyword refers to the current instance of a class. It can be used to access instance variables and methods within the class. The \"this\" keyword is often used to resolve naming conflicts between instance variables and local variables or method parameters.',\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default VariableDecIntIns;\r\n","const arrays = [\r\n  {\r\n    question: \"How do you declare an array in Java?\",\r\n    answer:\r\n      \"You declare an array by specifying its type, followed by square brackets and the array name.\",\r\n    explanation:\r\n      'In Java, you declare an array by specifying its type, followed by square brackets and the array name. For example, to declare an integer array, you would use the syntax \"int[] myArray;\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you initialize an array in Java?\",\r\n    answer:\r\n      \"Specifying its size or by providing a list of elements.\",\r\n    explanation:\r\n      'In Java, you can initialize an array either by specifying its size using the \"new\" keyword or by providing a list of elements enclosed in curly braces. For example, \"int[] myArray = new int[5];\" initializes an array of size 5, and \"int[] myArray = {1, 2, 3, 4, 5};\" initializes an array with the provided elements.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you access an element in a Java array?\",\r\n    answer:\r\n      \"Using its index and the array name.\",\r\n    explanation:\r\n      'To access an element in a Java array, you use the array name followed by the index of the element in square brackets. For example, \"myArray[2]\" would access the third element in the array \"myArray\". Remember that array indices start at 0 in Java.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How can you find the length of an array in Java?\",\r\n    answer: 'Use the \".length\" property of the array.',\r\n    explanation:\r\n      'In Java, you can find the length of an array by accessing its \".length\" property. For example, \"int arrayLength = myArray.length;\" would assign the length of \"myArray\" to the variable \"arrayLength\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What happens if you try to access an array element with an index that is out of bounds?\",\r\n    answer: \"A java.lang.ArrayIndexOutOfBoundsException is thrown.\",\r\n    explanation:\r\n      \"In Java, if you try to access an array element with an index that is either negative or greater than or equal to the length of the array, a java.lang.ArrayIndexOutOfBoundsException is thrown. This is a runtime exception, so the program will terminate unless the exception is caught and handled appropriately.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you create a two-dimensional array in Java?\",\r\n    answer:\r\n      \"By specifying two sets of square brackets and the array type.\",\r\n    explanation:\r\n      'In Java, you can create a two-dimensional array by specifying two sets of square brackets and the array type. For example, \"int[][] my2DArray;\" declares a two-dimensional integer array. To initialize the array, you can use the \"new\" keyword followed by the type and sizes of the dimensions, like this: \"int[][] my2DArray = new int[3][4];\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How can you iterate over an array in Java using a for loop?\",\r\n    answer:\r\n      \"Using an index variable to access each element.\",\r\n    explanation:\r\n      'In Java, you can use a for loop to iterate over an array by using an index variable. For example: \"for (int i = 0; i < myArray.length; i++) { System.out.println(myArray[i]); }\" would print out each element of the \"myArray\" array.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How can you iterate over an array in Java using a for-each loop?\",\r\n    answer:\r\n      'with the following syntax: \"for (ElementType element : array) { ... }\".',\r\n    explanation:\r\n      'In Java, you can use a for-each loop to iterate over an array by specifying the element type and the array. For example, \"for (int number : myArray) { System.out.println(number); }\" would print out each element of the integer array \"myArray\". The for-each loop automatically iterates over each element in the array without the need for an index variable.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How can you convert an ArrayList to an array in Java?\",\r\n    answer:\r\n      \"Using the toArray() method.\",\r\n    explanation:\r\n      'In Java, you can convert an ArrayList to an array by calling the toArray() method on the ArrayList object. You need to pass an array of the same type and size as the ArrayList to the toArray() method. For example, if you have an ArrayList of integers called \"myList\", you can convert it to an array like this: \"Integer[] myArray = myList.toArray(new Integer[myList.size()]);\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you determine the length of an array in Java?\",\r\n    answer:\r\n      \"Using the length attribute.\",\r\n    explanation:\r\n      'In Java, you can determine the length of an array by accessing its \"length\" attribute. For example, if you have an integer array called \"myArray\", you can get its length like this: \"int arrayLength = myArray.length;\". The length attribute returns the number of elements in the array.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is an array of arrays in Java?\",\r\n    answer:\r\n      \"A multidimensional array\",\r\n    explanation:\r\n      'In Java, an array of arrays is a type of multidimensional array where each element is itself an array. This structure can also be referred to as a \"jagged array\" because the inner arrays can have different lengths, resulting in a non-rectangular shape. To declare an array of arrays, you can use syntax similar to a regular multidimensional array,such as \"int[][] myArrayOfArrays;\". To initialize an array of arrays, you can use nested curly braces with varying lengths for the inner arrays, like this: \"int[][] myArrayOfArrays = { {1, 2}, {3, 4, 5}, {6} };\". This creates an array of arrays with three elements, where the first element is an array of length 2, the second is an array of length 3, and the third is an array of length 1',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you initialize an array with a specific size in Java?\",\r\n    answer:\r\n      'Using the \"new\" keyword and specifying the size within square brackets.',\r\n    explanation:\r\n      'In Java, you can initialize an array with a specific size by using the \"new\" keyword and specifying the size within square brackets. For example, to initialize an integer array of size 5, you can use the following syntax: \"int[] myArray = new int[5];\". This creates an array with 5 elements, each initialized to the default value for integers (0 in this case).',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the default value for elements in a newly initialized array of integers in Java?\",\r\n    answer:\r\n      \"0.\",\r\n    explanation:\r\n      \"In Java, when you initialize an array of integers without specifying the initial values for its elements, the default value for each element is 0. This is because Java automatically initializes the elements of an array with their default values, and the default value for the int data type is 0.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is an array initializer in Java?\",\r\n    answer:\r\n      \"A list of values enclosed in curly braces used to provide initial values for an array.\",\r\n    explanation:\r\n      'In Java, an array initializer is a list of values enclosed in curly braces, which can be used to provide initial values for an array when it is declared. For example, you can declare and initialize an integer array with specific values like this: \"int[] myArray = {1, 2, 3, 4, 5};\". The array initializer, \"{1, 2, 3, 4, 5}\", provides the initial values for the elements of the array.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between an array and an ArrayList in Java?\",\r\n    answer:\r\n      \"An array has a fixed size, while an ArrayList is a dynamic data structure that can grow or shrink as needed.\",\r\n    explanation:\r\n      \"In Java, an array is a fixed-size data structure, meaning that once it is created, its size cannot be changed. In contrast, an ArrayList is a dynamic data structure that can grow or shrink as needed. ArrayLists are part of the Java Collections Framework and provide more flexible and convenient methods for adding, removing, and modifying elements compared to arrays.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you change the size of an array in Java after it has been created?\",\r\n    answer:\r\n      \"No\",\r\n    explanation:\r\n      \"In Java, arrays have a fixed size that is determined when they are created. Once an array has been created, you cannot change its size. If you need a dynamic data structure that can grow or shrink as needed, consider using an ArrayList or another collection class from the Java Collections Framework.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you change the size of an array in Java after it has been created?\",\r\n    answer:\r\n      \"No, you cannot change the size of an array in Java after it has been created.\",\r\n    explanation:\r\n      \"In Java, arrays have a fixed size that is determined when they are created. Once an array has been created, you cannot change its size. If you need a dynamic data structure that can grow or shrink as needed, consider using an ArrayList or another collection class from the Java Collections Framework.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you create an array of objects in Java?\",\r\n    answer:\r\n      'By declaring an array with the class type and initializing it using the \"new\" keyword.',\r\n    explanation:\r\n      'In Java, you can create an array of objects by declaring an array with the class type and initializing it using the \"new\" keyword followed by the class type and the desired size within square brackets. For example, if you have a class called \"Person\", you can create an array of Person objects like this: \"Person[] people = new Person[5];\". This creates an array with 5 elements, each initialized to the default value for objects (null).',\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default arrays;\r\n","const booleans = [\r\n  {\r\n    question: \"What is the boolean data type in Java?\",\r\n    answer:\r\n      \"A primitive data type that represents true or false values.\",\r\n    explanation:\r\n      \"The boolean data type is used to represent true or false values in Java. It is a primitive data type and can be used in conditional expressions and control structures like if, while, and for loops. Booleans are typically used to control the flow of a program based on certain conditions.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you declare a boolean variable in Java?\",\r\n    answer:\r\n      'Use the keyword \"boolean\" followed by the variable name.',\r\n    explanation:\r\n      'In Java, you declare a boolean variable by using the keyword \"boolean\" followed by the variable name. For example, to declare a boolean variable named \"isTrue\", you would write: \"boolean isTrue;\". You can also initialize the variable at the time of declaration, like this: \"boolean isTrue = false;\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of an if statement in Java?\",\r\n    answer:\r\n      \"To execute a block of code only if a specific condition is true.\",\r\n    explanation:\r\n      \"An if statement in Java is a control structure that allows you to execute a block of code only if a specific condition evaluates to true. If the condition is false, the block of code within the if statement is skipped, and the program continues executing the code after the if statement.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you write a for loop in Java?\",\r\n    answer:\r\n      'Use the syntax \"for (initialization; condition; increment) { // code to be executed }\".',\r\n    explanation:\r\n      'In Java, a for loop is a control structure that allows you to execute a block of code a specific number of times. The loop consists of three parts: the initialization, where you set the initial value of a loop control variable; the condition, which is checked before each iteration and determines whether the loop should continue; and the increment, which updates the loop control variable after each iteration. The syntax for a for loop is: \"for (initialization; condition; increment) { // code to be executed }\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between a while loop and a do-while loop in Java?\",\r\n    answer:\r\n      \"The difference between a while loop and a do-while loop in Java is that a while loop checks the condition before executing the loop body, while a do-while loop checks the condition after executing the loop body.\",\r\n    explanation:\r\n      \"In Java, a while loop checks the condition before executing the loop body, and if the condition is false, the loop body is never executed. In contrast, a do-while loop always executes the loop body at least once, because the condition is checked after the loop body has been executed.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of a break statement in Java?\",\r\n    answer:\r\n      \"The purpose of a break statement in Java is to exit a loop or switch statement prematurely.\",\r\n    explanation:\r\n      \"A break statement in Java is used to exit a loop or switch statement before its natural termination point. When a break statement is encountered, the control flow jumps out of the loop or switch block and continues executing the code that follows the block.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of a continue statement in Java?\",\r\n    answer:\r\n      \"To skip the remaining code in the current iteration of a loop and start the next iteration.\",\r\n    explanation:\r\n      \"A continue statement in Java is used within a loop (for, while, or do-while) to skip the remaining code in the current iteration and start the next iteration of the loop. The loop control variable is updated, and the loop condition is checked before starting the next iteration.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How can you use an if-else statement to check for multiple conditions in Java?\",\r\n    answer:\r\n      \"In Java, you can use an if-else statement with multiple else-if blocks to check for multiple conditions.\",\r\n    explanation:\r\n      'To check for multiple conditions in Java, you can use an if-else statement with multiple else-if blocks. Each else-if block checks a different condition, and the code within the corresponding block is executed if the condition is true. If none of the conditions are true, the code within the else block is executed. The syntax looks like this: \"if (condition1) { // code } else if (condition2) { // code } else { // code }\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is a nested loop in Java?\",\r\n    answer:\r\n      \"A loop that is placed inside another loop.\",\r\n    explanation:\r\n      \"A nested loop in Java refers to a situation where a loop is placed inside another loop. The inner loop completes all its iterations for each iteration of the outer loop. Nested loops are often used when working with multidimensional arrays or when a specific combination of values needs to be generated.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you use a while loop in Java?\",\r\n    answer:\r\n      \"By providing a condition that is checked before each iteration of the loop.\",\r\n    explanation:\r\n      'A while loop in Java is a control structure that repeatedly executes a block of code as long as the given condition is true. The syntax for a while loop is \"while (condition) { // code }\". The loop will continue to execute the code inside the curly braces until the condition becomes false.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is a do-while loop in Java?\",\r\n    answer:\r\n      \"A do-while loop is a control structure in Java that executes a block of code at least once and then continues executing it as long as a given condition remains true.\",\r\n    explanation:\r\n      'A do-while loop in Java is similar to a while loop, but the main difference is that the code inside the loop is executed at least once, even if the condition is false from the start. The syntax for a do-while loop is \"do { // code } while (condition);\". The loop will continue to execute the code inside the curly braces until the condition becomes false.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of a for loop in Java?\",\r\n    answer:\r\n      \"To execute a block of code a specific number of times or for each element in a collection or array.\",\r\n    explanation:\r\n      'A for loop in Java is a control structure that allows you to execute a block of code a specific number of times, or for each element in a collection or array. The for loop has three parts: an initialization, a condition, and an update, which are separated by semicolons. The syntax for a for loop is \"for (initialization; condition; update) { // code }\". The loop will execute the code inside the curly braces as long as the condition is true, and the update statement is executed after each iteration.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you use a for-each loop in Java?\",\r\n    answer:\r\n      \"To iterate through each element in a collection or array without needing to know the size or index of the elements.\",\r\n    explanation:\r\n      'A for-each loop in Java, also known as an enhanced for loop, is a simpler way to iterate through each element in a collection or array without the need for an index or knowing the size of the collection. The syntax for a for-each loop is \"for (elementType element : collection) { // code }\". The loop automatically iterates through each element in the collection, and the element variable takes on the value of the current element in each iteration.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the difference between the && and || operators in Java?\",\r\n    answer:\r\n      \"In Java, the && operator is a logical AND operator, while the || operator is a logical OR operator.\",\r\n    explanation:\r\n      \"In Java, the && operator is a logical AND operator that returns true only if both operands are true, and false otherwise. The || operator is a logical OR operator that returns true if at least one of the operands is true, and false if both operands are false. Both operators are used in control structures, like if statements and loops, to combine multiple conditions.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the syntax for a while loop in Java?\",\r\n    answer: \"while (condition) { // code to be executed }\",\r\n    explanation:\r\n      \"The while loop in Java is used to execute a block of code repeatedly as long as the given condition is true. The condition is checked before each iteration of the loop. If the condition is true, the code block is executed. If it is false, the loop terminates and control passes to the next statement in the program.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the syntax for a do-while loop in Java?\",\r\n    answer: \"do { // code to be executed } while (condition);\",\r\n    explanation:\r\n      \"The do-while loop in Java is similar to the while loop, but with one key difference: the condition is checked at the end of the loop rather than at the beginning. This means that the code block is always executed at least once, regardless of whether the condition is true or false.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the syntax for a for loop in Java?\",\r\n    answer:\r\n      \"for (initialization; condition; update) { // code to be executed }\",\r\n    explanation:\r\n      \"The for loop in Java is used to execute a block of code a fixed number of times. It consists of three parts: initialization, condition, and update. The initialization statement is executed once at the beginning of the loop. The condition is checked before each iteration of the loop. If it is true, the code block is executed. After the code block has executed, the update statement is executed. The condition is checked again, and the loop continues as long as it remains true.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the syntax for an if statement in Java?\",\r\n    answer: \"if (condition) { // code to be executed }\",\r\n    explanation:\r\n      \"The if statement in Java is used to execute a block of code if a given condition is true. If the condition is false, the code block is skipped and control passes to the next statement in the program. If the condition is true, the code block is executed.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the syntax for an if-else statement in Java?\",\r\n    answer:\r\n      \"if (condition) { // code to be executed if condition is true } else { // code to be executed if condition is false }\",\r\n    explanation:\r\n      \"The if-else statement in Java is used to execute one block of code if a given condition is true, and another block of code if it is false. If the condition is true, the first code block is executed. If it is false, the second code block is executed.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the syntax for a basic if statement in Java?\",\r\n    answer: \"if (condition) {\\n // code block\\n}\",\r\n    explanation:\r\n      \"The 'if' keyword is followed by parentheses containing a condition that evaluates to either true or false. If the condition is true, the code block inside the curly braces will be executed.\",\r\n    img: \"\",\r\n  },\r\n  \r\n  {\r\n    question: \"What is the syntax for a basic for loop in Java?\",\r\n    answer: \"for (initialization; condition; update) {\\n // code block\\n}\",\r\n    explanation:\r\n      \"The 'for' keyword is followed by parentheses containing three parts separated by semicolons: initialization, condition, and update. The initialization step is executed once at the beginning, the condition is checked before each iteration, and the update statement is executed at the end of each iteration.\",\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question:\r\n      \"What is the purpose of the 'else' keyword in an if/else statement?\",\r\n    answer:\r\n      \"Used to specify a block of code to be executed if the condition in the if statement is false.\",\r\n    explanation:\r\n      \"If the condition in the if statement is false, the code block inside the else statement will be executed. The else statement is optional, and if it is not included, nothing will be executed if the condition is false.\",\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default booleans;\r\n","const logicalAndComparison = [\r\n  {\r\n    question: \"What is the purpose of the logical AND (&&) operator in Java?\",\r\n    answer:\r\n      \"Evaluates to true if and only if both of its operands are true.\",\r\n    explanation:\r\n      \"The logical AND operator is often used in conditional statements and loops to check if two or more conditions are both true before executing a block of code. If either operand is false, the entire expression will evaluate to false, and the code block will not be executed. This is known as short-circuiting because if the first operand is false, the second operand is never evaluated since the entire expression will always be false regardless of the second operand.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of the logical OR (||) operator in Java?\",\r\n    answer:\r\n      \"The logical OR (||) operator in Java evaluates to true if and only if at least one of its operands is true.\",\r\n    explanation:\r\n      \"The logical OR operator is often used in conditional statements and loops to check if at least one of two or more conditions is true before executing a block of code. If either operand is true, the entire expression will evaluate to true, and the code block will be executed. This is known as short-circuiting because if the first operand is true, the second operand is never evaluated since the entire expression will always be true regardless of the second operand.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of the logical NOT (!) operator in Java?\",\r\n    answer:\r\n      \"Negates the value of its operand.\",\r\n    explanation:\r\n      \"The logical NOT operator is often used to reverse the truth value of a boolean expression. If the operand is true, the expression will evaluate to false, and vice versa. It can also be used to check for the opposite of a condition, for example using !(x > y) to check if x is not greater than y. \",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is short-circuiting in Java?\",\r\n    answer:\r\n      \"When the second operand of a logical expression is not evaluated because the result is already determined by the first operand.\",\r\n    explanation:\r\n      \"Short-circuiting occurs when evaluating a logical expression with the && or || operators, and is a feature of these operators in Java. If the first operand of a logical AND (&&) expression is false, or if the first operand of a logical OR (||) expression is true, the second operand is not evaluated. This can be useful for optimizing code by avoiding unnecessary calculations, or for avoiding errors that could occur if the second operand is not valid for some reason.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is an example of short-circuiting in Java?\",\r\n    answer:\r\n      \"The expression (x != null && x.length() > 0), where the second operand is only evaluated if the first operand is true.\",\r\n    explanation:\r\n      \"In this example, the && operator is used to check if a String variable x is not null and has a length greater than 0. If x is null, the first operand is false, and the second operand is never evaluated since the entire expression will always be false regardless of the second operand. This is an example of short-circuiting because the second operand is not evaluated if the first operand is false. This can be useful for avoiding errors that could occur if the second operand is not valid for some reason, such as a null pointer exception.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the result of the expression (false && true) in Java?\",\r\n    answer: \"false\",\r\n    explanation:\r\n      \"In Java, the '&&' operator performs a logical AND operation on two boolean values. It returns 'true' only if both operands are 'true'. If either operand is 'false', the entire expression is evaluated to 'false'.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the result of the expression (true || false) in Java?\",\r\n    answer: \"true\",\r\n    explanation:\r\n      \"In Java, the '||' operator performs a logical OR operation on two boolean values. It returns 'true' if either operand is 'true'. If both operands are 'false', the entire expression is evaluated to 'false'.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of the '!' operator in Java?\",\r\n    answer:\r\n      \"Is the logical NOT operator. It negates the value of the operand that follows it.\",\r\n    explanation:\r\n      \"For example, if the operand is 'true', the '!' operator will return 'false'. If the operand is 'false', the '!' operator will return 'true'.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How can short-circuiting be used in Java to avoid NullPointerExceptions?\",\r\n    answer:\r\n      \"By using short-circuiting with the '&&' operator, Java can avoid NullPointerExceptions by only evaluating the second operand if the first operand is not null.\",\r\n    explanation:\r\n      \"For example, instead of writing: if (str != null && str.equals('hello')) , you can write if ('hello'.equals(str)) to avoid a NullPointerException if 'str' is null.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What does the || operator do in Java?\",\r\n    answer:\r\n      \"Performs a logical OR operation between two boolean expressions. If either expression evaluates to true, the overall result is true.\",\r\n    explanation:\r\n      \"For example, in the expression 'A || B', if A evaluates to true, B will not be evaluated at all because the overall result is already true due to the short-circuiting behavior of the || operator.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What does the && operator do in Java?\",\r\n    answer:\r\n      \"Performs a logical AND operation between two boolean expressions. If both expressions evaluate to true, the overall result is true.\",\r\n    explanation:\r\n      \"For example, in the expression 'A && B', if A evaluates to false, B will not be evaluated at all because the overall result is already false due to the short-circuiting behavior of the && operator.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What does the ! operator do in Java?\",\r\n    answer:\r\n      \"Performs a logical NOT operation on a boolean expression. If the expression evaluates to true, the result is false, and vice versa.\",\r\n    explanation:\r\n      \"For example, in the expression '!A', if A evaluates to true, the result will be false. Similarly, if A evaluates to false, the result will be true.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the order of precedence for logical operators in Java?\",\r\n    answer:\r\n      \"!, &&, ||.\",\r\n    explanation:\r\n      \"This means that the ! operator has the highest precedence, followed by &&, and then ||. Parentheses can be used to override the default order of precedence.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between the logical operators && and & in Java?\",\r\n    answer:\r\n      \"The && operator performs short-circuiting, while the & operator does not.\",\r\n    explanation:\r\n      \"The && operator evaluates the second operand only if the first operand does not determine the outcome of the expression, while the & operator evaluates both operands regardless of the outcome of the first operand. Therefore, the && operator can be used to improve the efficiency of code by avoiding unnecessary evaluations.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between the logical operators || and | in Java?\",\r\n    answer:\r\n      \"The || operator performs short-circuiting, while the | operator does not.\",\r\n    explanation:\r\n      \"The || operator evaluates the second operand only if the first operand does not determine the outcome of the expression, while the | operator evaluates both operands regardless of the outcome of the first operand. Therefore, the || operator can be used to improve the efficiency of code by avoiding unnecessary evaluations.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the logical operator ! used for in Java?\",\r\n    answer:\r\n      \"To invert the truth value of a boolean expression.\",\r\n    explanation:\r\n      \"The ! operator returns true if its operand is false, and false if its operand is true. This can be useful in writing expressions that depend on the negation of a condition.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is a common use of short-circuiting in Java?\",\r\n    answer:\r\n      \"To avoid null pointer exceptions when accessing an object's properties.\",\r\n    explanation:\r\n      \"By using the short-circuiting behavior of the && operator, it is possible to check whether an object is null before attempting to access one of its properties. This can help avoid null pointer exceptions and improve the robustness of code.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the result of the logical expression 'true || false && true' in Java?\",\r\n    answer: \"true\",\r\n    explanation:\r\n      \"In Java, logical AND has higher precedence than logical OR. So, the expression is evaluated as 'true || (false && true)', which is equivalent to 'true || false', which ultimately results in 'true'.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the result of the logical expression '!false && true' in Java?\",\r\n    answer: \"true\",\r\n    explanation:\r\n      \"The '!' operator is the logical NOT operator, which flips the value of the operand. So, '!false' evaluates to 'true'. Then, the expression is evaluated as 'true && true', which results in 'true'.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the result of the logical expression 'false && (5/0 > 0)' in Java?\",\r\n    answer: \"false\",\r\n    explanation:\r\n      \"In Java, division by zero is not allowed and results in a runtime exception. Since the second operand in the expression '5/0 > 0' involves division by zero, it is not evaluated. Therefore, the entire expression evaluates to 'false'.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between the logical operators '&&' and '||' in Java?\",\r\n    answer:\r\n      \"The '&&' operator performs logical AND and requires both operands to be true for the expression to be true. The '||' operator performs logical OR and requires at least one operand to be true for the expression to be true.\",\r\n    explanation:\r\n      \"The '&&' and '||' operators are used to combine multiple boolean expressions into a single expression. The difference between them is in their truth tables. For '&&', the result is true only if both operands are true. For '||', the result is true if at least one operand is true.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the result of !true?\",\r\n    answer: \"false\",\r\n    explanation:\r\n      \"The NOT (!) operator inverts the boolean value of its operand. In this case, the operand is true, so the result is false.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the result of the expression true || false?\",\r\n    answer: \"true.\",\r\n    explanation:\r\n      \"This is because the || operator evaluates to true if either operand is true, and in this case, the first operand is true.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the result of the expression true && false?\",\r\n    answer: \"false\",\r\n    explanation:\r\n      \"This is because the && operator evaluates to false if either operand is false, and in this case, the second operand is false.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the result of the expression !(true && false)?\",\r\n    answer: \"true\",\r\n    explanation:\r\n      \"This is because the && operator evaluates to false if either operand is false, but the ! operator negates the outcome of the expression, resulting in true.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What does the '==' operator do in Java?\",\r\n    answer:\r\n      \"checks if two variables have the same value.\",\r\n    explanation:\r\n      \"The '==' operator is a comparison operator in Java that returns a boolean value of 'true' if the operands have the same value, and 'false' otherwise.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What does the '!=' operator do in Java?\",\r\n    answer:\r\n      \"Checks if two variables do not have the same value.\",\r\n    explanation:\r\n      \"The '!=' operator is a comparison operator in Java that returns a boolean value of 'true' if the operands do not have the same value, and 'false' otherwise.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What does the '>' operator do in Java?\",\r\n    answer:\r\n      \"Checks if one variable is greater than another variable.\",\r\n    explanation:\r\n      \"The '>' operator is a comparison operator in Java that returns a boolean value of 'true' if the left operand is greater than the right operand, and 'false' otherwise.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What does the '>=' operator do in Java?\",\r\n    answer:\r\n      \"Used for checking if one variable is greater than or equal to another variable.\",\r\n    explanation:\r\n      \"The '>=' operator is a comparison operator in Java that returns a boolean value of 'true' if the left operand is greater than or equal to the right operand, and 'false' otherwise.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What does the '<' operator do in Java?\",\r\n    answer:\r\n      \"checks if one variable is less than another variable.\",\r\n    explanation:\r\n      \"The '<' operator is a comparison operator in Java that returns a boolean value of 'true' if the left operand is less than the right operand, and 'false' otherwise.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What does the '<=' operator do in Java?\",\r\n    answer:\r\n      \"Checks if one variable is less than or equal to another variable.\",\r\n    explanation:\r\n      \"The '<=' operator is a comparison operator in Java that returns a boolean value of 'true' if the left operand is less than or equal to the right operand, and 'false' otherwise.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the result of the expression '5 == 5' in Java?\",\r\n    answer: \"true\",\r\n    explanation:\r\n      \"The '==' operator in Java compares the values of the operands on either side of the operator. In this case, both operands have the value of '5', so the expression evaluates to 'true'.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the result of the expression '5 != 5' in Java?\",\r\n    answer: \"false\",\r\n    explanation:\r\n      \"The '!=' operator in Java compares the values of the operands on either side of the operator. In this case, both operands have the value of '5', so the expression evaluates to 'false'.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: 'What is the comparison operator for \"not equal to\" in Java?',\r\n    answer: \"!=\",\r\n    explanation:\r\n      'The \"!=\" operator is used to compare two values for inequality in Java. It returns true if the values are not equal, and false otherwise.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: 'What is the comparison operator for \"greater than\" in Java?',\r\n    answer: \">\",\r\n    explanation:\r\n      'The \">\" operator is used to compare two values to see if the left operand is greater than the right operand. It returns true if the left operand is greater than the right operand, and false otherwise.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: 'What is the comparison operator for \"less than\" in Java?',\r\n    answer: \"<\",\r\n    explanation:\r\n      'The \"<\" operator is used to compare two values to see if the left operand is less than the right operand. It returns true if the left operand is less than the right operand, and false otherwise.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      'What is the comparison operator for \"greater than or equal to\" in Java?',\r\n    answer: \">=\",\r\n    explanation:\r\n      'The \">=\" operator is used to compare two values to see if the left operand is greater than or equal to the right operand. It returns true if the left operand is greater than or equal to the right operand, and false otherwise.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      'What is the comparison operator for \"less than or equal to\" in Java?',\r\n    answer: \"<=\",\r\n    explanation:\r\n      'The \"<=\" operator is used to compare two values to see if the left operand is less than or equal to the right operand. It returns true if the left operand is less than or equal to the right operand, and false otherwise.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: 'What is the difference between \"!=\" and \"!==\" in Java?',\r\n    answer:\r\n      '\"!=\" checks for inequality in value, while \"!==\" checks for inequality in both value and type.',\r\n    explanation:\r\n      'The \"!=\" operator checks if two values are not equal in value, but not necessarily in type. The \"!==\" operator, on the other hand, checks if two values are not equal in both value and type.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: 'What is the result of the expression \"5 > 3\" in Java?',\r\n    answer: \"true\",\r\n    explanation:\r\n      'The expression \"5 > 3\" evaluates to true, because 5 is greater than 3.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: 'What is the result of the expression \"2 < 1\" in Java?',\r\n    answer: \"false\",\r\n    explanation:\r\n      'The expression \"2 < 1\" evaluates to false, because 2 is not less than 1.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: 'What is the result of the expression \"3 == 3\" in Java?',\r\n    answer: \"true\",\r\n    explanation:\r\n      'The expression \"3 == 3\" evaluates to true, because both operands have the same value.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the comparison operator for 'not equal to' in Java?\",\r\n    answer: \"!=\",\r\n    explanation:\r\n      \"The '!=' operator returns true if the operands are not equal to each other. For example, 'x != y' returns true if x and y are not equal.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the comparison operator for 'greater than' in Java?\",\r\n    answer: \">\",\r\n    explanation:\r\n      \"The '>' operator returns true if the left operand is greater than the right operand. For example, 'x > y' returns true if x is greater than y.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the comparison operator for 'less than' in Java?\",\r\n    answer: \"<.\",\r\n    explanation:\r\n      \"The '<' operator returns true if the left operand is less than the right operand. For example, 'x < y' returns true if x is less than y.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the comparison operator for 'greater than or equal to' in Java?\",\r\n    answer:\r\n      \">=\",\r\n    explanation:\r\n      \"The '>=' operator returns true if the left operand is greater than or equal to the right operand. For example, 'x >= y' returns true if x is greater than or equal to y.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the comparison operator for 'less than or equal to' in Java?\",\r\n    answer:\r\n      \"<=\",\r\n    explanation:\r\n      \"The '<=' operator returns true if the left operand is less than or equal to the right operand. For example, 'x <= y' returns true if x is less than or equal to y.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the result of the expression '5 <= 5' in Java?\",\r\n    answer: \"true\",\r\n    explanation:\r\n      \"The operator '<=' checks if the left-hand side operand is less than or equal to the right-hand side operand. In this case, both operands are equal to 5, so the expression evaluates to 'true'.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the result of the expression '10 != 5' in Java?\",\r\n    answer: \"true\",\r\n    explanation:\r\n      \"The operator '!=' checks if the left-hand side operand is not equal to the right-hand side operand. In this case, 10 is not equal to 5, so the expression evaluates to 'true'.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the result of the expression '5 > 10' in Java?\",\r\n    answer: \"false\",\r\n    explanation:\r\n      \"The operator '>' checks if the left-hand side operand is greater than the right-hand side operand. In this case, 5 is not greater than 10, so the expression evaluates to 'false'.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the result of the expression '3 >= 3' in Java?\",\r\n    answer: \"true\",\r\n    explanation:\r\n      \"The operator '>=' checks if the left-hand side operand is greater than or equal to the right-hand side operand. In this case, both operands are equal to 3, so the expression evaluates to 'true'.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the result of the expression 'true == false' in Java?\",\r\n    answer: \"false\",\r\n    explanation:\r\n      \"The operator '==' checks if the left-hand side operand is equal to the right-hand side operand. In this case, true is not equal to false, so the expression evaluates to 'false'.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the result of the expression '10 < 5' in Java?\",\r\n    answer: \"false.\",\r\n    explanation:\r\n      \"The operator '<' checks if the left-hand side operand is less than the right-hand side operand. In this case, 10 is not less than 5, so the expression evaluates to 'false'.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the result of the expression '6 <= 5' in Java?\",\r\n    answer: \"false\",\r\n    explanation:\r\n      \"The operator '<=' checks if the left-hand side operand is less than or equal to the right-hand side operand. In this case, 6 is not less than or equal to 5, so the expression evaluates to 'false'.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the result of the expression '4 != 4' in Java?\",\r\n    answer: \"false\",\r\n    explanation:\r\n      \"The operator '!=' checks if the left-hand side operand is not equal to the right-hand side operand. In this case, both operands are equal to 4, so the expression evaluates to 'false'.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the result of 10 != 5?\",\r\n    answer: \"true\",\r\n    explanation:\r\n      \"The '!=' operator in Java means 'not equal to'. Since 10 is not equal to 5, the expression 10 != 5 evaluates to true.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the result of 'cat' == 'cat'?\",\r\n    answer: \"true\",\r\n    explanation:\r\n      \"The '==' operator in Java is used for checking equality. Since the strings 'cat' and 'cat' are equal, the expression 'cat' == 'cat' evaluates to true.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the result of 15 > 20?\",\r\n    answer: \"false\",\r\n    explanation:\r\n      \"The '>' operator in Java means 'greater than'. Since 15 is not greater than 20, the expression 15 > 20 evaluates to false.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the result of 30 <= 30?\",\r\n    answer: \"true\",\r\n    explanation:\r\n      \"The '<=' operator in Java means 'less than or equal to'. Since 30 is equal to 30, the expression 30 <= 30 evaluates to true.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the result of 3.0 == 3?\",\r\n    answer: \"true\",\r\n    explanation:\r\n      \"The '==' operator in Java checks for equality. Although 3.0 is a double and 3 is an integer, they are still equal in value. Therefore, the expression 3.0 == 3 evaluates to true.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the result of 25 >= 30?\",\r\n    answer: \"false\",\r\n    explanation:\r\n      \"The '>=' operator in Java means 'greater than or equal to'. Since 25 is not greater than or equal to 30, the expression 25 >= 30 evaluates to false.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the result of true == false?\",\r\n    answer: \"false\",\r\n    explanation:\r\n      \"The '==' operator in Java is used to check for equality. Since true is not equal to false, the expression true == false evaluates to false.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the result of 10 <= 5?\",\r\n    answer: \"false\",\r\n    explanation:\r\n      \"The '<=' operator in Java means 'less than or equal to'. Since 10 is not less than or equal to 5, the expression 10 <= 5 evaluates to false.\",\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default logicalAndComparison;\r\n","const dotEqualsAndComments = [\r\n  {\r\n    question: \"What is the purpose of the .equals() method in Java?\",\r\n    answer:\r\n      \"To compare the values of two objects in Java.\",\r\n    explanation:\r\n      \"In Java, the == operator is used to compare the reference values of two objects, while the .equals() method is used to compare their actual values. This is particularly useful when working with objects that contain complex data types, such as strings or arrays.\",\r\n    img: \"\"\r\n  },\r\n  {\r\n    question:\r\n      \"How is the .equals() method different from the == operator in Java?\",\r\n    answer:\r\n      \"The == operator compares the reference values of two objects, while the .equals() method compares their actual values.\",\r\n    explanation:\r\n      \"In Java, the == operator checks if two objects have the same reference value in memory, while the .equals() method checks if their actual values are the same. This means that two objects with the same values may not be equal if they have different reference values.\",\r\n    img: \"\"\r\n  },\r\n  {\r\n    question: \"What is object comparison in Java?\",\r\n    answer:\r\n      \"Checking whether two objects are equal.\",\r\n    explanation:\r\n      \"Object comparison can be performed using the == operator or the .equals() method. The == operator checks whether two object references point to the same object in memory, while the .equals() method checks whether two objects are equal in value.\",\r\n    img: \"\"\r\n  },\r\n  {\r\n    question: \"What is the syntax for a single-line comment in Java?\",\r\n    answer: \"//\",\r\n    explanation:\r\n      \"In Java, a single-line comment begins with two forward slashes (//) and continues to the end of the line.\",\r\n    img: \"\"\r\n  },\r\n  {\r\n    question: \"What is the syntax for a multi-line comment in Java?\",\r\n    answer: \"/* /\",\r\n    explanation:\r\n      \"In Java, a multi-line comment begins with a forward slash followed by an asterisk (/) and ends with an asterisk followed by a forward slash (*/). Everything between these symbols is a comment.\",\r\n    img: \"\"\r\n  },\r\n  {\r\n    question: \"Can comments be nested in Java?\",\r\n    answer: \"No\",\r\n    explanation:\r\n      \"Java does not support nested comments. If you try to nest a multi-line comment inside another multi-line comment, it will cause a syntax error.\",\r\n    img: \"\"\r\n  },\r\n  {\r\n    question: \"What is the purpose of comments in Java?\",\r\n    answer: \"To explain the code and make it more readable\",\r\n    explanation:\r\n      \"Comments are added to code to explain what it does, how it works, and why certain decisions were made. This makes the code easier to read and understand for other developers.\",\r\n    img: \"\"\r\n  },\r\n  {\r\n    question: \"Are comments executable code in Java?\",\r\n    answer: \"No\",\r\n    explanation:\r\n      \"Comments are not executed by the Java compiler and do not affect the program's functionality. They are simply used to annotate and explain the code.\",\r\n    img: \"\"\r\n  },\r\n  {\r\n    question: \"What is a Javadoc comment in Java?\",\r\n    answer: \"/** /\",\r\n    explanation:\r\n      \"A Javadoc comment is a special type of multi-line comment that begins with a forward slash followed by two asterisks (/**) and ends with an asterisk followed by a forward slash (/). It is used to generate documentation for Java code.\",\r\n    img: \"\"\r\n  },\r\n  {\r\n    question:\r\n      \"Can Javadoc comments be used to generate documentation for non-public classes or methods?\",\r\n    answer: \"No\",\r\n    explanation:\r\n      \"Javadoc comments can only be used to generate documentation for public classes and methods. Non-public classes and methods are not included in the generated documentation.\",\r\n    img: \"\"\r\n  },\r\n  {\r\n    question: \"What is the purpose of a @return tag in a Javadoc comment?\",\r\n    answer: \"To describe the return value of a method\",\r\n    explanation:\r\n      \"A @return tag is used in a Javadoc comment to describe the value returned by a method. It is followed by a description of the expected return value and any special cases that may affect the return value.\",\r\n    img: \"\"\r\n  },\r\n  {\r\n    question: \"What is the purpose of a @throws tag in a Javadoc comment?\",\r\n    answer: \"To describe an exception that a method can throw\",\r\n    explanation:\r\n      \"A @throws tag is used in a Javadoc comment to describe an exception that a method can throw. It is followed by the name of the exception and a description of when and why it may be thrown.\",\r\n    img: \"\"\r\n  },\r\n  {\r\n    question: \"What is the @param tag used for in JavaDocs?\",\r\n    answer:\r\n      \"A tag used to document a method's parameter and its purpose.\",\r\n    explanation:\r\n      \"JavaDocs is a documentation generation tool used to generate documentation from source code comments. The @param tag is used to document a method's parameter and its purpose. This helps developers understand what each parameter does and how to use it correctly.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the @author tag used for in JavaDocs?\",\r\n    answer: \"The @author tag is used to document the author of a class.\",\r\n    explanation:\r\n      \"JavaDocs is a documentation generation tool used to generate documentation from source code comments. The @author tag is used to document the author of a class.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the @see tag used for in JavaDocs?\",\r\n    answer: \"The @see tag is used to create a link to another class or method.\",\r\n    explanation:\r\n      \"JavaDocs is a documentation generation tool used to generate documentation from source code comments. The @see tag is used to create a link to another class or method. This helps developers quickly navigate to related documentation.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the @version tag used for in JavaDocs?\",\r\n    answer:\r\n      \"A tag used to document the version number of a class or method.\",\r\n    explanation:\r\n      \"JavaDocs is a documentation generation tool used to generate documentation from source code comments. The @version tag is used to document the version number of a class or method. This helps developers keep track of changes and ensure that the correct version of a class or method is being used.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the @return tag used for in JavaDocs?\",\r\n    answer: \"A tag used to document the return value of a method.\",\r\n    explanation:\r\n      \"JavaDocs is a documentation generation tool used to generate documentation from source code comments. The @return tag is used to document the return value of a method. This helps developers understand what the method returns and how to use the returned value.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the @deprecated tag used for in JavaDocs?\",\r\n    answer:\r\n      \"A tag used to document that a method or class is no longer recommended for use.\",\r\n    explanation:\r\n      \"JavaDocs is a documentation generation tool used to generate documentation from source code comments. The @deprecated tag is used to document that a method or class is no longer recommended for use. This helps developers understand that the method or class may be removed in future versions and that they should use an alternative.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the @inheritDoc tag used for in JavaDocs?\",\r\n    answer:\r\n      \"A tag used to inherit documentation from a superclass or interface.\",\r\n    explanation:\r\n      \"JavaDocs is a documentation generation tool used to generate documentation from source code comments. The @inheritDoc tag is used to inherit documentation from a superclass or interface. This helps developers avoid duplicating documentation and keeps the documentation up-to-date with changes to the superclass or interface.\",\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default dotEqualsAndComments;\r\n","const stricklyTyped = [\r\n  {\r\n    question: \"What is a strictly typed programming language?\",\r\n    answer:\r\n      \"A programming language in which variables must be declared with their data type before they can be assigned a value.\",\r\n    explanation:\r\n      \"In a strictly typed programming language, the data type of a variable must be specified before it can be used. This helps to catch errors at compile-time, before the program is executed.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What are some examples of strictly typed programming languages?\",\r\n    answer: \"Java, C++, C#, Swift\",\r\n    explanation:\r\n      \"Strictly typed programming languages include Java, C++, C#, Swift, and others. In these languages, variables must be declared with their data type before they can be used, which helps to prevent errors at compile-time.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the advantage of using a strictly typed programming language?\",\r\n    answer: \"Early detection of errors and easier maintenance of code\",\r\n    explanation:\r\n      \"By catching errors at compile-time, strict typing helps to ensure that code is error-free and runs smoothly. This makes it easier to maintain and modify code over time.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the disadvantage of using a strictly typed programming language?\",\r\n    answer: \"Less flexibility and more verbose code\",\r\n    explanation:\r\n      \"Strict typing can make code more verbose and less flexible, which can be a disadvantage in certain situations. For example, dynamically typed languages like Python allow for more flexible and concise code.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you change the data type of a variable in a strictly typed programming language?\",\r\n    answer:\r\n      \"No, the data type of a variable must be declared and cannot be changed later.\",\r\n    explanation:\r\n      \"In a strictly typed programming language, the data type of a variable must be declared before it can be used, and cannot be changed later. This helps to prevent errors and ensures that the code is well-defined.\",\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default stricklyTyped;\r\n","const instantiatingAclass = [\r\n  {\r\n    question: \"What does it mean to instantiate a class in Java?\",\r\n    answer:\r\n      \"To create an object of that class using the 'new' keyword and allocating memory for it.\",\r\n    explanation:\r\n      \"Instantiating a class means creating a new instance of that class in memory, which can then be accessed and manipulated in the program.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What does the 'new' operator do in Java?\",\r\n    answer:\r\n      \"The 'new' operator in Java allocates memory for a new object of a class and returns a reference to that object.\",\r\n    explanation:\r\n      \"The 'new' operator is used to create a new object of a class and allocate memory for it on the heap. The operator returns a reference to the new object, which can be used to manipulate it in the program.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the difference between a class and an object in Java?\",\r\n    answer:\r\n      \"A class is a blueprint for creating objects, while an object is an instance of a class.\",\r\n    explanation:\r\n      \"In Java, a class defines the properties and behavior of a group of objects, while an object is a single instance of that class created using the 'new' operator.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is an object constructor in Java?\",\r\n    answer:\r\n      \"An object constructor in Java is a special method that is called when a new object of a class is created using the 'new' keyword.\",\r\n    explanation:\r\n      \"An object constructor initializes the object's state and sets any initial values for its properties. It can also perform any necessary setup operations for the object.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between a parameterized constructor and a default constructor in Java?\",\r\n    answer:\r\n      \"A parameterized constructor in Java takes one or more parameters to initialize an object's properties, while a default constructor has no parameters and initializes the object's properties to default values.\",\r\n    explanation:\r\n      \"A parameterized constructor is useful when an object needs to be initialized with specific values at the time it is created, while a default constructor can be used when the values can be set later or when no special initialization is needed.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is a constructor overloading in Java?\",\r\n    answer:\r\n      \"Constructor overloading in Java is the practice of defining multiple constructors for a class, each with a different set of parameters.\",\r\n    explanation:\r\n      \"Constructor overloading allows objects of a class to be created with different initial values or using different parameter types, depending on the constructor that is called.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of the 'this' keyword in Java?\",\r\n    answer:\r\n      \"The 'this' keyword in Java refers to the current object instance and is used to distinguish between class variables and instance variables with the same name.\",\r\n    explanation:\r\n      \"The 'this' keyword can be used to reference the current object instance from within a class method or constructor, and can be used to differentiate between local variables and instance variables with the same name.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of the 'new' operator in Java?\",\r\n    answer:\r\n      \"To create a new instance of a class, allocating memory for the object and returning a reference to that memory.\",\r\n    explanation:\r\n      \"In Java, the 'new' operator is used to create a new instance of a class. It allocates memory for the object and initializes its properties to default values. The operator returns a reference to the memory location of the newly created object, which can be used to access the object's properties and methods.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can a class be instantiated without the 'new' keyword in Java?\",\r\n    answer:\r\n      \"No, a class cannot be instantiated without the 'new' keyword in Java.\",\r\n    explanation:\r\n      \"The 'new' keyword is necessary to allocate memory for a new object of a class and to invoke its constructor. Without the 'new' keyword, there is no way to create a new object of a class in Java.\",\r\n      img: \"\",\r\n  },\r\n  {\r\n    question: \"What happens when a class is instantiated in Java?\",\r\n    answer:\r\n      \"Memory is allocated for a new object of the class and the constructor of the class is invoked to initialize the object.\",\r\n    explanation:\r\n      \"The constructor of the class is responsible for initializing the object's instance variables and performing any other necessary setup. Once the constructor has completed, a reference to the new object is returned.\",\r\n      img: \"\",\r\n  },\r\n  {\r\n    question: \"Can a class have multiple constructors in Java?\",\r\n    answer: \"Yes, a class can have multiple constructors in Java.\",\r\n    explanation:\r\n      \"Multiple constructors can be defined for a class with different parameter lists. This allows for more flexibility when creating objects of the class, as different constructors can be used depending on the situation.\",\r\n      img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the default constructor in Java?\",\r\n    answer:\r\n      \"A no-argument constructor that is automatically generated by the compiler if no constructor is explicitly defined in a class.\",\r\n    explanation:\r\n      \"The default constructor initializes all instance variables to their default values and is used if no other constructor is called when an object is instantiated.\",\r\n      img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the syntax for calling a constructor in Java?\",\r\n    answer:\r\n      \"To call a constructor in Java, use the keyword 'new' followed by the name of the class and a set of parentheses containing any arguments required by the constructor. For example: MyClass obj = new MyClass(arg1, arg2);\",\r\n    explanation:\r\n      \"This syntax creates a new object of the class 'MyClass' and passes the arguments 'arg1' and 'arg2' to its constructor.\",\r\n      img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of the constructor method in a class?\",\r\n    answer:\r\n      \"To initialize the object's properties and provide any necessary setup for the object.\",\r\n    explanation:\r\n      \"The constructor method is a special method in a class that is used to initialize the object's properties and perform any necessary setup for the object. It is called automatically when an object is created using the 'new' operator, and it typically takes arguments that are used to set the initial values of the object's properties.\",\r\n      img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the syntax for creating a new object in Java?\",\r\n    answer: \"ClassName objectName = new ClassName();\",\r\n    explanation:\r\n      \"To create a new object in Java, you must use the 'new' operator along with the class name and parentheses. The resulting object reference is then assigned to a variable of the appropriate class type. The variable name can be any valid identifier name that follows the rules for variable names in Java.\",\r\n      img: \"\",\r\n  },\r\n  {\r\n    question: \"Can you create multiple objects from the same class?\",\r\n    answer:\r\n      \"Yes, you can create as many objects as you need from the same class.\",\r\n    explanation:\r\n      \"When you create a class in Java, you are creating a blueprint for an object. You can then create as many instances of that object as you need, each with its own set of property values. Each object is a separate entity in memory, with its own set of instance variables and methods that can be used to manipulate those variables.\",\r\n      img: \"\",\r\n  },\r\n  {\r\n    question: \"What is a reference variable?\",\r\n    answer:\r\n      \"A variable that stores the memory address of an object rather than the object itself.\",\r\n    explanation:\r\n      \"In Java, a reference variable is a variable that stores the memory address of an object rather than the object itself. This means that the variable contains a reference to the memory location where the object is stored, rather than the object's actual data. Reference variables are used extensively in Java to work with objects, since they allow you to pass objects as arguments to methods and return objects from methods.\",\r\n      img: \"\",\r\n  },\r\n];\r\n\r\nexport default instantiatingAclass;\r\n","const primitiveAndNonPrimitive = [\r\n  {\r\n    question:\r\n      \"What is the difference between primitive and non-primitive data types in Java?\",\r\n    answer:\r\n      \"Primitive data types in Java are the most basic data types that are not objects and do not have any methods, while non-primitive data types are object references that are created from primitive data types and have methods that can be called on them.\",\r\n    explanation:\r\n      \"The main difference between primitive and non-primitive data types in Java is that primitive data types are stored in the stack memory area of the JVM, which is faster and more memory-efficient than the heap memory area where objects are stored, while non-primitive data types are stored in the heap memory area. Primitive data types are also passed by value, while non-primitive data types are passed by reference.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is autoboxing in Java?\",\r\n    answer:\r\n      \"The automatic conversion of primitive data types into their corresponding wrapper classes, such as int to Integer, boolean to Boolean, etc.\",\r\n    explanation:\r\n      \"Autoboxing in Java is the automatic conversion of primitive data types into their corresponding wrapper classes, such as int to Integer, boolean to Boolean, etc. This is useful when working with collections that require objects instead of primitive types, as it allows for seamless conversion between the two.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is unboxing in Java?\",\r\n    answer:\r\n      \"The automatic conversion of wrapper class objects to their corresponding primitive data types, such as Integer to int, Boolean to boolean, etc.\",\r\n    explanation:\r\n      \"Unboxing in Java is the automatic conversion of wrapper class objects to their corresponding primitive data types, such as Integer to int, Boolean to boolean, etc. This is useful when working with collections that require primitive types instead of objects, as it allows for seamless conversion between the two.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between a char array and a String in Java?\",\r\n    answer:\r\n      \"A char array is a collection of separate char type entities, while a String is designed to hold a sequence of characters in a single variable.\",\r\n    explanation:\r\n      \"While both char arrays and Strings can hold sequences of characters, they differ in their design and use. Char arrays are collections of separate char type entities, while Strings are objects designed to hold a sequence of characters in a single variable.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What are some examples of primitive data types in Java?\",\r\n    answer:\r\n      \"int, double, boolean, char, and byte.\",\r\n    explanation:\r\n      \"Primitive data types in Java are the basic data types that are built-in to the language. These include int (integer), double (floating point number), boolean (true/false), char (character), and byte (8-bit integer).\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What are some examples of non-primitive (object) data types in Java?\",\r\n    answer:\r\n      \"arrays, strings, classes, and interfaces.\",\r\n    explanation:\r\n      \"Non-primitive or object data types are created by the programmer and can be of any size. Examples of non-primitive data types in Java include arrays, which are used to store a collection of values of the same type, strings, which are used to represent a sequence of characters, classes, which are used to define a blueprint for creating objects, and interfaces, which are used to define a set of methods that a class must implement.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the size difference between primitive and non-primitive (object) data types in Java?\",\r\n    answer:\r\n      \"Primitive data types have a fixed size, while non-primitive data types can be of any size.\",\r\n    explanation:\r\n      \"In Java, primitive data types have a fixed size that is determined by the language, while non-primitive or object data types can be of any size and are created by the programmer. This means that the size of a variable that is declared using a primitive data type is known at compile time, while the size of a variable that is declared using a non-primitive or object data type is determined at runtime.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between pass by value and pass by reference?\",\r\n    answer:\r\n      \"pass by value means that a copy of the value of a variable is passed to a method or function, while pass by reference means that a reference to the variable is passed.\",\r\n    explanation:\r\n      \"In Java, pass by value means that a copy of the value of a variable is passed to a method or function, while pass by reference means that a reference to the variable is passed. Primitive data types are passed by value because they are immutable and cannot be changed, while non-primitive or object data types are passed by reference because they can be changed.\",\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default primitiveAndNonPrimitive;\r\n","const operators = [\r\n  {\r\n    question: \"What is the purpose of the == operator in Java?\",\r\n    answer: \"To compare the equality of two operands.\",\r\n    explanation:\r\n      \"In Java, the == operator is used to compare the equality of two operands, whether they are primitive types or object references. If the operands are primitive types, the == operator compares their values, while if the operands are object references, the == operator compares their memory addresses to determine if they refer to the same object instance.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of the != operator in Java?\",\r\n    answer:\r\n      \"To compare the inequality of two operands.\",\r\n    explanation:\r\n      \"In Java, the != operator is used to compare the inequality of two operands, whether they are primitive types or object references. If the operands are primitive types, the != operator compares their values, while if the operands are object references, the != operator compares their memory addresses to determine if they refer to different object instances.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of the > operator in Java?\",\r\n    answer:\r\n      \"To determine if the left operand is greater than the right operand.\",\r\n    explanation:\r\n      \"In Java, the > operator is used to compare two operands to determine if the left operand is greater than the right operand. This operator can be used with numeric primitive types such as int, double, or float, as well as with character primitive types.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of the >= operator in Java?\",\r\n    answer:\r\n      \"To determine if the left operand is greater than or equal to the right operand.\",\r\n    explanation:\r\n      \"In Java, the >= operator is used to compare two operands to determine if the left operand is greater than or equal to the right operand. This operator can be used with numeric primitive types such as int, double, or float, as well as with character primitive types.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of the < operator in Java?\",\r\n    answer:\r\n      \"The < operator is used to determine if the left operand is less than the right operand.\",\r\n    explanation:\r\n      \"In Java, the < operator is used to compare two operands to determine if the left operand is less than the right operand. This operator can be used with numeric primitive types such as int, double, or float, as well as with character primitive types.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of the <= operator in Java?\",\r\n    answer:\r\n      \"The <= operator is used to determine if the left operand is less than or equal to the right operand.\",\r\n    explanation:\r\n      \"In Java, the <= operator is used to compare two operands to determine if the left operand is less than or equal to the right operand. This operator can be used with numeric primitive types such as int, double, or float, as well as with character primitive types.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can the comparison operators be used with non-numeric types in Java?\",\r\n    answer:\r\n      \"Yes, the comparison operators can be used with non-numeric types such as characters and object references in Java.\",\r\n    explanation:\r\n      \"Although the comparison operators are typically used with numeric types, they can also be used with non-numeric types such as characters and object references in Java. When used with characters, they compare the Unicode values of the characters. When used with object references, they compare the memory addresses of the objects to determine if they refer to the same or different instances.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the difference between == and equals() in Java?\",\r\n    answer:\r\n      \"== is used to compare the references of two objects, while equals() is used to compare the content or values of two objects.\",\r\n    explanation:\r\n      \"In Java, == is used to compare the references of two objects, meaning it checks whether two variables point to the same memory location. On the other hand, equals() is used to compare the content or values of two objects, meaning it checks whether the values of the two objects are equal or not. While == is a relational operator, equals() is a method that must be implemented by classes that want to provide content comparison functionality.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the difference between > and >= in Java?\",\r\n    answer:\r\n      \"> checks if the left operand is greater than the right operand, while >= checks if the left operand is greater than or equal to the right operand.\",\r\n    explanation:\r\n      \"> and >= are both comparison operators used in Java. The > operator checks if the left operand is greater than the right operand, while the >= operator checks if the left operand is greater than or equal to the right operand. For example, 5 > 3 evaluates to true, while 5 >= 5 also evaluates to true. Both operators return a boolean value, either true or false, based on the comparison result.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the difference between < and <= in Java?\",\r\n    answer:\r\n      \"< checks if the left operand is less than the right operand, while <= checks if the left operand is less than or equal to the right operand.\",\r\n    explanation:\r\n      \"< and <= are both comparison operators used in Java. The < operator checks if the left operand is less than the right operand, while the <= operator checks if the left operand is less than or equal to the right operand. For example, 3 < 5 evaluates to true, while 5 <= 5 also evaluates to true. Both operators return a boolean value, either true or false, based on the comparison result.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the difference between == and === in Java?\",\r\n    answer: \"=== is not a valid operator in Java.\",\r\n    explanation:\r\n      \"In Java, === is not a valid operator. It is used in some other programming languages, such as JavaScript, to compare the values and types of two operands. In Java, the == operator is used to compare the references of two objects, while equals() is used to compare the content or values of two objects. It is important to note that === is not a synonym for == in other programming languages, and its behavior may vary depending on the language.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the difference between != and <> in Java?\",\r\n    answer:\r\n      \"<> is not a valid operator in Java, while != is used to check if two operands are not equal.\",\r\n    explanation:\r\n      \"In Java, <> is not a valid operator. The != operator is used to check if two operands are not equal. It returns a boolean value, true if the operands are not equal, and false if they are equal. For example, 3 != 5 evaluates to true, while 5 != 5 evaluates to false.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the arithmetic operator used for addition in Java?\",\r\n    answer: \"+\",\r\n    explanation:\r\n      \"The '+' operator is used for addition in Java. It can be used to add two numbers, or to concatenate two strings.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the arithmetic operator used for subtraction in Java?\",\r\n    answer: \"-\",\r\n    explanation:\r\n      \"The '-' operator is used for subtraction in Java. It can be used to subtract one number from another.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the arithmetic operator used for multiplication in Java?\",\r\n    answer: \"*\",\r\n    explanation:\r\n      \"The '*' operator is used for multiplication in Java. It can be used to multiply two numbers.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the arithmetic operator used for division in Java?\",\r\n    answer: \"/\",\r\n    explanation:\r\n      \"The '/' operator is used for division in Java. It can be used to divide one number by another.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the arithmetic operator used for modulus in Java?\",\r\n    answer: \"%\",\r\n    explanation:\r\n      \"The '%' operator is used for modulus in Java. It can be used to find the remainder when one number is divided by another.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the result of using the modulus operator on two integers in Java?\",\r\n    answer:\r\n      \"The modulus operator returns the remainder of the division of the first integer by the second integer.\",\r\n    explanation:\r\n      \"For example, the expression 7 % 3 would evaluate to 1, because 7 divided by 3 leaves a remainder of 1.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can the modulus operator be used with non-integer operands in Java?\",\r\n    answer:\r\n      \"No, the modulus operator can only be used with integer operands in Java.\",\r\n    explanation:\r\n      \"If you try to use the modulus operator with non-integer operands, you will get a compiler error.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the order of precedence for arithmetic operators in Java?\",\r\n    answer:\r\n      \"The order of precedence for arithmetic operators in Java is as follows: multiplication and division (performed left to right), followed by addition and subtraction (performed left to right).\",\r\n    explanation:\r\n      \"You can use parentheses to group expressions and control the order of operations within them.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use parentheses to control the order of operations with arithmetic operators in Java?\",\r\n    answer:\r\n      \"To group expressions and control the order of operations within them.\",\r\n    explanation:\r\n      \"Expressions within parentheses are evaluated before those outside of parentheses.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What happens when you divide by zero using the division operator in Java?\",\r\n    answer: \"You will get an ArithmeticException.\",\r\n    explanation:\r\n      \"Dividing any number by zero is undefined and will result in an arithmetic error, known as an ArithmeticException, in Java.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you use the addition operator to concatenate strings in Java?\",\r\n    answer:\r\n      \"Yes, the addition operator can be used to concatenate strings in Java.\",\r\n    explanation:\r\n      \"In Java, the addition operator (+) can be used to concatenate two or more strings together. This is a common way to combine multiple strings into a single string.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you use the multiplication operator to repeat a string in Java?\",\r\n    answer:\r\n      \"No, the multiplication operator cannot be used to repeat a string in Java.\",\r\n    explanation:\r\n      \"Unlike some other programming languages, such as Python, the multiplication operator (*) cannot be used to repeat a string in Java. Instead, you can use a loop or a built-in method such as StringBuilder.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the result of adding an integer and a double in Java?\",\r\n    answer: \"The result will be a double.\",\r\n    explanation:\r\n      \"When adding an integer and a double in Java, the integer will be automatically promoted to a double and the result will be a double value.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the result of subtracting an integer from a double in Java?\",\r\n    answer: \"The result will be a double.\",\r\n    explanation:\r\n      \"When subtracting an integer from a double in Java, the integer will be automatically promoted to a double and the result will be a double value.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the result of multiplying an integer and a double in Java?\",\r\n    answer: \"The result is a double.\",\r\n    explanation:\r\n      \"In Java, when you multiply an integer and a double, the result is automatically promoted to a double. This is because doubles have a higher precision than integers, and so the result may not fit within the range of an integer.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the result of dividing a double by an integer in Java?\",\r\n    answer: \"The result is a double.\",\r\n    explanation:\r\n      \"In Java, when you divide a double by an integer, the result is automatically promoted to a double. This is because doubles have a higher precision than integers, and so the result may not fit within the range of an integer. Additionally, division by zero with a double will result in infinity or negative infinity, depending on the signs of the operands.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is an assignment operator in Java?\",\r\n    answer:\r\n      \"An assignment operator in Java is a type of operator that is used to assign a value to a variable.\",\r\n    explanation:\r\n      'An assignment operator is used to set the value of a variable to a certain value or expression. The most common assignment operator in Java is the \"=\" operator, which is used to assign a value to a variable.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: 'What is the purpose of the \"=\" assignment operator in Java?',\r\n    answer:\r\n      'To assign a value to a variable.',\r\n    explanation:\r\n      'The \"=\" operator is used to set the value of a variable to a certain value or expression. For example, the statement \"x = 5\" sets the value of the variable \"x\" to 5. The \"=\" operator can also be used to assign the value of one variable to another variable, such as \"y = x\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: 'What is the \"+=\" assignment operator in Java?',\r\n    answer:\r\n      'Used to add a value to a variable.',\r\n    explanation:\r\n      'The \"+=\" operator is used to add a value or expression to the current value of a variable. For example, the statement \"x += 5\" adds 5 to the current value of the variable \"x\". The \"+=\" operator can also be used with other arithmetic operators, such as \"-=\" for subtraction, \"=\" for multiplication, \"/=\" for division, and \"%=\" for modulus.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      'How do you use the \"+=\" assignment operator to add a value to a variable in Java?',\r\n    answer:\r\n      'You write the name of the variable, followed by the \"+=\" operator, followed by the value or expression that you want to add to the variable.',\r\n    explanation:\r\n      'For example, to add 5 to the current value of a variable named \"x\", you would write \"x += 5;\". This would add 5 to the current value of the variable \"x\". The \"+=\" operator can be used with any type of variable, including primitive types like integers and doubles, as well as object types like Strings and arrays.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: 'What is the \"-=\" assignment operator in Java?',\r\n    answer:\r\n      'Used to subtract a value from a variable.',\r\n    explanation:\r\n      'The \"-=\" operator is used to subtract a value or expression from the current value of a variable. For example, the statement \"x -= 5\" subtracts 5 from the current value of the variable \"x\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the '-=' assignment operator in Java?\",\r\n    answer:\r\n      \"Subtracts a value from a variable and assigns the result to the same variable.\",\r\n    explanation:\r\n      \"The '-=' operator is a shorthand way to subtract a value from a variable and then assign the result back to the same variable. For example, the expression 'x -= 5' is equivalent to 'x = x - 5'. This can be useful for making code shorter and more readable.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the '/=' assignment operator in Java?\",\r\n    answer:\r\n      \"Used to divide the value of a variable by another value and then assign the result back to the same variable.\",\r\n    explanation:\r\n      \"The '/=' operator is a compound assignment operator, which means that it combines the division operation with the assignment operation. It is equivalent to writing 'x = x / y', where 'x' is the variable being assigned and 'y' is the value being divided by. For example, the statement 'x /= 5' would divide the current value of 'x' by 5 and then assign the result back to 'x'.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the '%=' assignment operator in Java?\",\r\n    answer:\r\n      \"Used to get the remainder of dividing the value of a variable by another value and then assign the result back to the same variable.\",\r\n    explanation:\r\n      \"The '%=' operator is also a compound assignment operator, and it combines the modulus operation with the assignment operation. It is equivalent to writing 'x = x % y', where 'x' is the variable being assigned and 'y' is the value being used as the divisor. For example, the statement 'x %= 3' would get the remainder of dividing the current value of 'x' by 3 and then assign the result back to 'x'.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the difference between '=' and '/=' in Java?\",\r\n    answer:\r\n      \"The '=' operator is used to assign a value to a variable, while the '/=' operator is used to divide a variable by a value and then assign the result to the variable.\",\r\n    explanation:\r\n      \"The '=' operator is the standard assignment operator in Java, used to assign a value to a variable. On the other hand, the '/=' operator is a compound assignment operator that first divides the variable by the given value, and then assigns the result to the variable. For example, 'x /= 2' is equivalent to 'x = x / 2'.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use multiple assignment operators in one statement in Java?\",\r\n    answer:\r\n      \"Multiple assignment operators can be used in one statement by chaining them together.\",\r\n    explanation:\r\n      \"In Java, multiple assignment operators can be used in one statement by chaining them together. For example, 'x += 2 *= 3' is equivalent to 'x += (2 * 3)'. It's important to note that the order of operations is still respected when using multiple assignment operators, so it's a good practice to use parentheses to ensure the desired order of operations.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What happens when you try to assign a value to a final variable in Java?\",\r\n    answer:\r\n      \"It results in a compilation error because a final variable cannot be reassigned.\",\r\n    explanation:\r\n      \"In Java, a final variable is a variable that can only be assigned a value once, and then its value cannot be changed. Attempting to assign a value to a final variable after it has already been assigned will result in a compilation error, as the final variable cannot be reassigned.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What happens when you try to assign a value of one data type to a variable of a different data type in Java?\",\r\n    answer:\r\n      \"It may result in a compilation error or a runtime error, depending on the data types involved and the values being assigned.\",\r\n    explanation:\r\n      \"In Java, data types are used to specify the kind of data that can be stored in a variable. Attempting to assign a value of one data type to a variable of a different data type may result in a compilation error or a runtime error, depending on the data types involved and the values being assigned. For example, attempting to assign a double value to an integer variable may result in a loss of precision or a runtime error if the double value is too large to be represented as an integer.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: 'What is the \"-=\" assignment operator in Java?',\r\n    answer:\r\n      'Subtracts a value from a variable and assigns the result back to the variable.',\r\n    explanation:\r\n      'The \"-=\" assignment operator is a compound assignment operator in Java that subtracts the value on the right-hand side of the operator from the variable on the left-hand side, and then assigns the result back to the variable on the left-hand side. For example, the expression \"x -= 5;\" is equivalent to \"x = x - 5;\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      'How do you use the \"=\" assignment operator to multiply a variable by a value in Java?',\r\n    answer:\r\n      'You use the \"=\" operator by placing it between the variable name and the value to be multiplied, and then placing a semicolon at the end of the statement. x *= 5',\r\n    explanation:\r\n      'To multiply a variable by a value in Java using the \"=\" assignment operator, you first write the name of the variable, followed by the \"=\" operator, and then the value to be multiplied. For example, if you want to multiply the variable x by the value 5, you would write \"x *= 5;\". This statement multiplies the value of x by 5 and assigns the result back to x.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the result of using the decrement operator on an integer in Java?\",\r\n    answer: \"The value of the integer is decremented by 1.\",\r\n    explanation:\r\n      \"The decrement operator (--), when used with an integer in Java, decreases the value of the integer by 1. For example, if x is an integer with a value of 5, using the decrement operator on x like this: 'x--' would result in x having a value of 4.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can the increment and decrement operators be used with floating-point numbers in Java?\",\r\n    answer:\r\n      \"Yes, the increment and decrement operators can be used with floating-point numbers in Java.\",\r\n    explanation:\r\n      \"The increment and decrement operators (++, --) can be used with floating-point numbers in Java, such as float and double data types. When used with floating-point numbers, the value is incremented or decremented by 1.0.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between the prefix and postfix forms of the increment operator in Java?\",\r\n    answer:\r\n      \"The prefix form increments the value before it is used in the expression, while the postfix form increments the value after it is used in the expression.\",\r\n    explanation:\r\n      \"The prefix form of the increment operator (++x) increments the value of x before it is used in the expression, while the postfix form (x++) increments the value of x after it is used in the expression. For example, if x is an integer with a value of 5, using the prefix increment operator like this: '++x' would result in x having a value of 6, while using the postfix increment operator like this: 'x++' would also result in x having a value of 6, but only after the value of x was used in the expression.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between the prefix and postfix forms of the decrement operator in Java?\",\r\n    answer:\r\n      \"The prefix form decrements the value before it is used in the expression, while the postfix form decrements the value after it is used in the expression.\",\r\n    explanation:\r\n      \"The prefix form of the decrement operator (--x) decrements the value of x before it is used in the expression, while the postfix form (x--) decrements the value of x after it is used in the expression. For example, if x is an integer with a value of 5, using the prefix decrement operator like this: '--x' would result in x having a value of 4, while using the postfix decrement operator like this: 'x--' would also result in x having a value of 4, but only after the value of x was used in the expression.\",\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default operators;\r\n","const attributesAndInstanceVar = [\r\n  {\r\n    question: \"What is an attribute in Java?\",\r\n    answer:\r\n      \"An attribute is a variable that is associated with an instance of a class and represents the state or behavior of that instance.\",\r\n    explanation:\r\n      \"Attributes are also known as instance variables in Java, and they can have different access modifiers, such as public, private, protected, or default (package-private).\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is another name for an instance variable in Java?\",\r\n    answer: \"fields or member variables in Java.\",\r\n    explanation:\r\n      \"These variables represent the state or behavior of an object and can be accessed and modified by methods within the same class or by external classes using getters and setters.\",\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question: \"Where are instance variables declared in Java?\",\r\n    answer: \"inside a class, but outside of any method or constructor.\",\r\n    explanation:\r\n      \"This means that they are associated with instances of the class and can be accessed and modified by methods within the same class or by external classes using objects of that class.\",\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question: \"What do attributes represent in Java?\",\r\n    answer: \"the state or behavior of an instance of a class.\",\r\n    explanation:\r\n      \"Attributes are variables that are associated with an object and can have different access modifiers and values depending on the specific instance they belong to.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of an attribute in Java?\",\r\n    answer: \"to represent the state or behavior of an instance of a class.\",\r\n    explanation:\r\n      \"Attributes, also known as instance variables or fields, store values that can be accessed and modified by methods within the same class or by external classes using objects of that class.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you define an instance variable in Java?\",\r\n    answer:\r\n      \"declare it inside a class, but outside of any method or constructor.\",\r\n    explanation:\r\n      \"Instance variables can have different access modifiers, such as public, private, protected, or default (package-private), and they can also have an initial value or be initialized later using constructors or methods.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the scope of an instance variable in Java?\",\r\n    answer:\r\n      \"within the class it is defined in, but it can be accessed by methods within that class and by external classes using objects of that class.\",\r\n    explanation:\r\n      \"Instance variables are associated with instances of a class, which means that each object has its own copy of the instance variables and can modify them independently of other objects of the same class.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can an instance variable be accessed from outside of its class in Java?\",\r\n    answer: \"Yes but only if it has a public or protected access modifier.\",\r\n    explanation:\r\n      \"If an instance variable has a private or default (package-private) access modifier, it can only be accessed by methods within the same class. However, external classes can still access the instance variable using getters and setters provided by the class.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between an attribute and a method in Java?\",\r\n    answer:\r\n      \"Attributes are variables that store data, while methods are functions that perform operations on that data.\",\r\n    explanation:\r\n      \"An attribute (also known as a property or field) is used to store the state of an object, whereas a method is a function that belongs to an object and performs operations or manipulates the object's state.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you initialize an instance variable in Java?\",\r\n    answer:\r\n      \"By assigning a value to it within a constructor or an instance initializer block.\",\r\n    explanation:\r\n      \"Instance variables can be initialized within a constructor using the assignment operator (=). Alternatively, an instance initializer block (a block of code enclosed in braces) can be used to initialize instance variables when an object is created.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the default value of an instance variable in Java?\",\r\n    answer: \"0, 0.0, false, or null, depending on the variable type.\",\r\n    explanation:\r\n      \"In Java, instance variables are assigned default values if not explicitly initialized. Numeric types default to 0 or 0.0, boolean types default to false, and reference types default to null.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you declare an instance variable without initializing it in Java?\",\r\n    answer: \"Yes.\",\r\n    explanation:\r\n      \"It is possible to declare an instance variable without initializing it. In this case, the variable will be automatically assigned a default value based on its type when an object is created.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is an object in Java?\",\r\n    answer:\r\n      \"A specific instance of a class, representing an entity with state and behavior.\",\r\n    explanation:\r\n      'In Java, an object is an instance of a class that has its own state (represented by attributes) and behavior (represented by methods). Objects are created using the \"new\" keyword, and they interact with each other through method calls.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the relationship between an object and its class in Java?\",\r\n    answer:\r\n      \"A class is a blueprint, and an object is an instance of that class.\",\r\n    explanation:\r\n      \"In Java, a class defines a blueprint or template for creating objects. It specifies the attributes and methods that an object of that class will have. An object is a specific instance of a class, and it has its own state and behavior based on the class definition.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How is an object created in Java?\",\r\n    answer: 'Using the \"new\" keyword followed by a constructor.',\r\n    explanation:\r\n      'In Java, an object is created by using the \"new\" keyword followed by a constructor call. The constructor is a special method in a class that is used to initialize an object\\'s state when it is created. This process allocates memory for the object and returns a reference to that object.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the difference between a class and an object in Java?\",\r\n    answer:\r\n      \"A class is a blueprint, while an object is an instance of that blueprint.\",\r\n    explanation:\r\n      \"In Java, a class is a template that defines the structure, attributes, and methods for objects. An object, on the other hand, is a specific instance of a class that has its own state (attributes) and behavior (methods). Multiple objects can be created from a single class, and each object has its own state and can independently call its methods.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between a static variable and an instance variable in Java?\",\r\n    answer:\r\n      \"Static variables belong to the class, while instance variables belong to objects of the class.\",\r\n    explanation:\r\n      \"A static variable is shared among all instances of a class and is associated with the class itself, rather than with individual objects. In contrast, an instance variable is specific to each object of the class and maintains its own state within that object.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of a static variable in Java?\",\r\n    answer: \"To share common data among all instances of a class.\",\r\n    explanation:\r\n      \"Static variables are used in Java when you want to share a single piece of data among all instances of a class. They are useful for maintaining shared state or constants that do not change during the lifetime of the class.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you declare a static variable in Java?\",\r\n    answer: 'Using the \"static\" keyword before the variable type and name.',\r\n    explanation:\r\n      'In Java, a static variable is declared by using the \"static\" keyword before the variable type and name. For example: \"static int counter;\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can a static variable be accessed from outside of its class in Java?\",\r\n    answer: \"Yes, if its access modifier allows it.\",\r\n    explanation:\r\n      \"A static variable can be accessed from outside its class if its access modifier (public, private, protected, or default) allows it. For example, a public static variable can be accessed from any class, while a private static variable can only be accessed within the class it is declared in.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of the final keyword in Java?\",\r\n    answer: \"To prevent modification, inheritance, or overriding.\",\r\n    explanation:\r\n      \"In Java, the final keyword serves different purposes depending on its usage. When applied to a variable, it prevents the variable from being modified after initialization. When applied to a method, it prevents the method from being overridden in subclasses. When applied to a class, it prevents the class from being subclassed (inherited).\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you declare a final instance variable in Java?\",\r\n    answer: 'Using the \"final\" keyword before the variable type and name.',\r\n    explanation:\r\n      'In Java, a final instance variable is declared by using the \"final\" keyword before the variable type and name. For example: \"final int maxSpeed;\". Final instance variables must be initialized either at the time of declaration, within a constructor, or within an instance initializer block.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can a final instance variable be modified after it is initialized in Java?\",\r\n    answer: \"No.\",\r\n    explanation:\r\n      'In Java, a final instance variable cannot be modified after it has been initialized. The purpose of the \"final\" keyword is to create a constant value that remains unchanged throughout the lifetime of the object.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the default value of a static variable in Java?\",\r\n    answer: \"0, 0.0, false, or null, depending on the variable type.\",\r\n    explanation:\r\n      \"In Java, static variables are assigned default values if not explicitly initialized. Numeric types default to 0 or 0.0, boolean types default to false, and reference types default to null.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of the final keyword in Java?\",\r\n    answer: \"To prevent modification, inheritance, or overriding.\",\r\n    explanation:\r\n      \"In Java, the final keyword serves different purposes depending on its usage. When applied to a variable, it prevents the variable from being modified after initialization. When applied to a method, it prevents the method from being overridden in subclasses. When applied to a class, it prevents the class from being subclassed (inherited).\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you declare a final instance variable in Java?\",\r\n    answer: 'Using the \"final\" keyword before the variable type and name.',\r\n    explanation:\r\n      'In Java, a final instance variable is declared by using the \"final\" keyword before the variable type and name. For example: \"final int maxSpeed;\". Final instance variables must be initialized either at the time of declaration, within a constructor, or within an instance initializer block.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can a final instance variable be modified after it is initialized in Java?\",\r\n    answer: \"No.\",\r\n    explanation:\r\n      'In Java, a final instance variable cannot be modified after it has been initialized. The purpose of the \"final\" keyword is to create a constant value that remains unchanged throughout the lifetime of the object.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is a constant in Java?\",\r\n    answer: \"A value that does not change during program execution.\",\r\n    explanation:\r\n      \"A constant in Java is a value that remains unchanged throughout the execution of a program. Constants are typically declared as final variables, which cannot be modified after initialization. They are often used to represent fixed values that do not change, such as mathematical constants or configuration settings.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you declare a constant in Java?\",\r\n    answer:\r\n      'Using the \"final\" keyword along with \"static\", the variable type, and name.',\r\n    explanation:\r\n      'In Java, a constant is typically declared using the \"final\" keyword along with the \"static\" keyword, the variable type, and the variable name. For example: \"public static final int MAX_SPEED = 120;\". The naming convention for constants is to use all uppercase letters with underscores between words.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between a constant and a final variable in Java?\",\r\n    answer:\r\n      \"A constant is a static final variable, while a final variable may be either static or non-static.\",\r\n    explanation:\r\n      \"In Java, a constant is a static final variable, which means it belongs to the class and cannot be changed after initialization. A final variable, on the other hand, can be either static or non-static (instance variable). A non-static final variable is specific to each object and cannot be changed after initialization, while a constant is shared among all instances of the class.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of a getter method in Java?\",\r\n    answer: \"To provide read-only access to an object's attributes.\",\r\n    explanation:\r\n      \"A getter method (also known as an accessor method) in Java is used to provide read-only access to an object's attributes. It allows external code to retrieve the value of an attribute without directly accessing the attribute itself, which helps to maintain encapsulation and provides better control over how the attribute is accessed.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you define a getter method for an instance variable in Java?\",\r\n    answer:\r\n      \"By creating a public method that returns the value of the instance variable.\",\r\n    explanation:\r\n      'In Java, a getter method is defined by creating a public method with a return type that matches the instance variable\\'s type. The method should return the value of the instance variable. The naming convention for getter methods is to use \"get\" followed by the capitalized name of the instance variable, for example: \"public int getAge() { return age; }\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of a setter method in Java?\",\r\n    answer:\r\n      \"To provide a way to modify an object's attributes while maintaining encapsulation.\",\r\n    explanation:\r\n      \"A setter method (also known as a mutator method) in Java is used to provide a way to modify an object's attributes while maintaining encapsulation. It allows external code to set the value of an attribute without directly accessing the attribute itself, which helps to control how the attribute is modified and ensures that any necessary validation or processing occurs before the attribute is changed.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you define a setter method for an instance variable in Java?\",\r\n    answer:\r\n      \"By creating a public method that takes a parameter and assigns it to the instance variable.\",\r\n    explanation:\r\n      'In Java, a setter method is defined by creating a public method with a return type of void and a single parameter that matches the instance variable\\'s type. The method should assign the value of the parameter to the instance variable. The naming convention for setter methods is to use \"set\" followed by the capitalized name of the instance variable, for example: \"public void setAge(int age) { this.age = age; }\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is encapsulation in Java?\",\r\n    answer:\r\n      \"The practice of bundling data and methods within a class to hide implementation details.\",\r\n    explanation:\r\n      \"Encapsulation in Java is a fundamental object-oriented programming principle that involves bundling data (attributes) and methods (functions) within a class, while hiding the implementation details from other parts of the code. This is achieved by using access modifiers (public, private, protected, and default) to control access to the class members. Encapsulation promotes modularity, maintainability, and reusability by allowing a class to be changed without affecting other parts of the code that interact with it.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How does encapsulation relate to instance variables in Java?\",\r\n    answer:\r\n      \"Encapsulation hides instance variables by using access modifiers to restrict direct access.\",\r\n    explanation:\r\n      \"Encapsulation in Java involves using access modifiers (public, private, protected, and default) to control access to instance variables, preventing direct access to them from outside the class. Instead, access to these variables is provided through getter and setter methods, which allows for better control and validation when reading or modifying the variable values. This practice helps maintain the integrity of the object's state and promotes modularity and maintainability.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Why is encapsulation important in Java?\",\r\n    answer: \"It promotes modularity, maintainability, and reusability.\",\r\n    explanation:\r\n      \"Encapsulation is important in Java because it promotes modularity, maintainability, and reusability by hiding the implementation details of a class and exposing only what is necessary through a well-defined interface. By encapsulating data and methods within a class, you can change the internal workings of the class without affecting the code that interacts with it. This makes it easier to update, fix, or extend the class without introducing bugs or breaking existing functionality.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the access modifier for a public instance variable in Java?\",\r\n    answer: \"public\",\r\n    explanation:\r\n      'In Java, the access modifier for a public instance variable is \"public\". This means that the instance variable can be accessed directly from any class, including classes in other packages. However, using public instance variables is generally discouraged, as it can lead to tight coupling and make it harder to maintain or update the code. Instead, it is recommended to use private or protected instance variables and provide access through getter and setter methods.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the access modifier for a private instance variable in Java?\",\r\n    answer: \"private\",\r\n    explanation:\r\n      'In Java, the access modifier for a private instance variable is \"private\". This means that the instance variable can only be accessed directly within the class it is declared in. To provide access to private instance variables from other classes, you should use getter and setter methods. Using private instance variables promotes encapsulation, modularity, and maintainability.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between a private instance variable and a public instance variable in Java?\",\r\n    answer:\r\n      \"Private instance variables are accessible only within the class, while public instance variables can be accessed from any class.\",\r\n    explanation:\r\n      \"In Java, private instance variables can only be accessed directly within the class they are declared in, whereas public instance variables can be accessed directly from any class, including those in other packages. To maintain encapsulation, it is generally recommended to use private instance variables and provide access through getter and setter methods, rather than using public instance variables.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you access a protected instance variable from outside of its class in Java?\",\r\n    answer: \"By using inheritance or from a class within the same package.\",\r\n    explanation:\r\n      \"In Java, protected instance variables can be accessed directly from subclasses (through inheritance) or from any class within the same package. If you want to access a protected instance variable from outside of its class and package, you need to create a subclass that inherits from the class containing the protected instance variable, and then use the subclass to access the variable.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between a protected instance variable and a private instance variable in Java?\",\r\n    answer:\r\n      \"Protected instance variables can be accessed by subclasses and classes within the same package, while private instance variables can only be accessed within the class.\",\r\n    explanation:\r\n      \"In Java, protected instance variables can be accessed directly by subclasses (through inheritance) or by any class within the same package, whereas private instance variables can only be accessed directly within the class they are declared in. Private instance variables promote stronger encapsulation, while protected instance variables allow for more flexibility in class hierarchies and package organization.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you access a public instance variable from outside of its class in Java?\",\r\n    answer:\r\n      \"By using the object reference followed by the dot operator and the variable name.\",\r\n    explanation:\r\n      'In Java, you can access a public instance variable from outside of its class by using an object reference followed by the dot operator and the variable name. For example, if you have a class \"Car\" with a public instance variable \"color\", you can access the \"color\" variable for an object \"myCar\" like this: \"myCar.color\". However, using public instance variables is generally discouraged, as it can lead to tight coupling and make it harder to maintain or update the code. Instead, it is recommended to use private or protected instance variables and provide access through getter and setter methods.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between a public instance variable and a private instance variable in Java?\",\r\n    answer:\r\n      \"Public instance variables can be accessed from any class, while private instance variables can only be accessed within the class.\",\r\n    explanation:\r\n      \"In Java, public instance variables can be accessed directly from any class, including those in other packages, whereas private instance variables can only be accessed directly within the class they are declared in. To maintain encapsulation, it is generally recommended to use private instance variables and provide access through getter and setter methods, rather than using public instance variables.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you declare a constant instance variable in Java?\",\r\n    answer: 'By using the \"final\" keyword before the variable type and name.',\r\n    explanation:\r\n      'In Java, a constant instance variable is declared by using the \"final\" keyword before the variable type and name. For example: \"final int MAX_SPEED;\". However, a constant instance variable is not common, as constants are typically declared as static final variables to ensure a single shared value for all instances of the class. If you want to declare a constant that is shared among all instances of the class, you should use the \"static\" keyword along with \"final\", for example: \"public static final int MAX_SPEED = 120;\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between a constant instance variable and a final instance variable in Java?\",\r\n    answer:\r\n      \"A constant instance variable is an uncommon combination, while a final instance variable can have different values for different instances but cannot be modified after initialization.\",\r\n    explanation:\r\n      'In Java, a constant instance variable is an uncommon combination of \"final\" and \"instance variable\" and suggests that each instance of the class has its own unmodifiable value for the variable. A final instance variable, on the other hand, can have different values for different instances of the class but cannot be modified after initialization. Constants are typically declared as static final variables to ensure a single shared value for all instances of the class, for example: \"public static final int MAX_SPEED = 120;\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you define a class variable in Java?\",\r\n    answer: 'By using the \"static\" keyword before the variable type and name.',\r\n    explanation:\r\n      'In Java, a class variable (also known as a static variable) is defined by using the \"static\" keyword before the variable type and name. A class variable is shared among all instances of the class and belongs to the class itself, not to any specific instance. For example, to define a class variable named \"counter\" in a class \"MyClass\", you would use the following syntax: \"public static int counter;\".',\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default attributesAndInstanceVar;\r\n","const classesAndReferenceDataTypes = [\r\n  {\r\n    question: \"What is a class in Java?\",\r\n    answer:\r\n      \"A blueprint for creating objects, defining their properties and methods.\",\r\n    explanation:\r\n      \"A class is a template or blueprint that defines the properties (attributes) and methods (behaviors) of objects that are created from it. Classes are the basic building blocks of object-oriented programming in Java.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you declare a class in Java?\",\r\n    answer:\r\n      \"Using the class keyword, followed by the class name and a pair of curly braces.\",\r\n    explanation:\r\n      \"To declare a class in Java, you start with the class keyword, followed by the name of the class (which should be in PascalCase), and then a pair of curly braces {}. The class definition goes inside the curly braces.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What are the main components of a class in Java?\",\r\n    answer: \"Instance variables, constructors, and methods.\",\r\n    explanation:\r\n      \"The main components of a class in Java are instance variables (which define the state of an object), constructors (which are used to create and initialize objects), and methods (which define the behaviors of the objects).\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is a constructor in Java?\",\r\n    answer: \"A special method used to create and initialize objects.\",\r\n    explanation:\r\n      \"A constructor in Java is a special method that is used to create and initialize objects of a class. It is called when a new object is created using the new keyword. Constructors have the same name as the class and do not have a return type.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is a wrapper class in Java?\",\r\n    answer: \"A class that encapsulates a primitive data type as an object.\",\r\n    explanation:\r\n      \"A wrapper class in Java is a class that wraps or encapsulates a primitive data type (such as int, char, or float) as an object. Each primitive data type has a corresponding wrapper class, such as Integer for int, Character for char, and Float for float. Wrapper classes allow primitive values to be used in contexts that require objects.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Why are wrapper classes important in Java?\",\r\n    answer:\r\n      \"They allow primitive values to be used as objects, providing methods for conversion, comparison, and other operations.\",\r\n    explanation:\r\n      \"Wrapper classes are important in Java because they enable primitive values to be used in contexts that require objects, such as collections, and provide utility methods for converting between primitive types and strings, comparing values, and performing other operations on primitive data.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is inheritance in Java?\",\r\n    answer:\r\n      \"A mechanism for one class to derive properties and methods from another class.\",\r\n    explanation:\r\n      \"Inheritance is a fundamental concept in object-oriented programming that allows one class (the subclass) to inherit properties (instance variables) and methods from another class (the superclass). This promotes code reusability and allows for organizing related classes in a hierarchy.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you declare inheritance in Java?\",\r\n    answer: \"Using the extends keyword followed by the superclass name.\",\r\n    explanation:\r\n      \"To declare inheritance in Java, you use the extends keyword followed by the name of the superclass. This indicates that the class being defined is a subclass of the specified superclass, and it will inherit the properties and methods of that superclass.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you declare a constructor in Java?\",\r\n    answer:\r\n      \"By defining a method with the same name as the class and no return type.\",\r\n    explanation:\r\n      \"A constructor in Java is declared by defining a method with the same name as the class and no return type. The constructor method is typically used to initialize the instance variables of a new object and perform any necessary setup.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can a class have multiple constructors in Java? If so, how?\",\r\n    answer:\r\n      \"Yes, through constructor overloading with different parameter lists.\",\r\n    explanation:\r\n      \"A class in Java can have multiple constructors, achieved through constructor overloading. Constructor overloading allows defining multiple constructors with different parameter lists. The appropriate constructor is called based on the number and types of arguments passed during object creation.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is a default constructor in Java?\",\r\n    answer:\r\n      \"A constructor without parameters that is automatically generated if no constructors are explicitly defined.\",\r\n    explanation:\r\n      \"A default constructor in Java is a constructor without parameters that the Java compiler automatically generates for a class if no constructors are explicitly defined. The default constructor initializes instance variables with their default values (e.g., 0 for int, false for boolean, and null for reference types).\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is a method in Java?\",\r\n    answer:\r\n      \"A set of instructions grouped together to perform a specific operation.\",\r\n    explanation:\r\n      \"A method in Java is a set of instructions grouped together to perform a specific operation or function. Methods are defined within classes and can be called by other methods or objects. They may have input parameters, a return type, and can be associated with access modifiers to control visibility.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you declare a method in Java?\",\r\n    answer:\r\n      \"By specifying an access modifier, return type, method name, and parameter list within a class.\",\r\n    explanation:\r\n      \"To declare a method in Java, you define it within a class, starting with an access modifier (e.g., public, private, protected) followed by the return type (e.g., int, String, or void for no return value), the method name, and a parameter list enclosed in parentheses. The method body is enclosed in curly braces and contains the code to execute when the method is called.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is a parameter in Java?\",\r\n    answer: \"A value passed to a method when it is called.\",\r\n    explanation:\r\n      \"A parameter in Java is a value that is passed to a method when it is called. Parameters act as placeholders for the actual values (arguments) that will be provided during the method call. When defining a method, you specify the parameter list with data type and variable name pairs separated by commas. The method can then use these parameters within its body to perform operations.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you pass parameters to a method in Java?\",\r\n    answer:\r\n      \"By providing arguments in the method call, matching the order and types of the method parameters.\",\r\n    explanation:\r\n      \"To pass parameters to a method in Java, you provide arguments in the method call, which should match the order and types of the parameters specified in the method definition. When calling the method, you pass the actual values (arguments) that will replace the parameters in the method body during execution.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is a return type in Java?\",\r\n    answer: \"The data type of the value a method returns to the calling code.\",\r\n    explanation:\r\n      \"A return type in Java is the data type of the value that a method returns to the calling code after it finishes execution. The return type is specified in the method declaration before the method name. If a method does not return any value, the return type is specified as void.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you specify the return type of a method in Java?\",\r\n    answer: \"By declaring it before the method name in the method definition.\",\r\n    explanation:\r\n      \"When defining a method in Java, you specify the return type before the method name. The return type can be a primitive data type (e.g., int, double), a reference data type (e.g., String, an array, or a custom class), or void if the method does not return any value.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you create an object in Java?\",\r\n    answer: \"Using the new keyword followed by the constructor call.\",\r\n    explanation:\r\n      \"To create an object in Java, you use the new keyword followed by a call to the class constructor. This allocates memory for the object and initializes its instance variables. The result is a reference to the newly created object, which can be assigned to a variable of the appropriate type.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: 'What is the purpose of the \"new\" keyword in Java?',\r\n    answer: \"To create a new instance of a class.\",\r\n    explanation:\r\n      'The \"new\" keyword in Java is used to create a new instance of a class, allocating memory for the object and calling its constructor to initialize its instance variables. It is followed by the constructor call, which can include arguments if needed. The new keyword returns a reference to the newly created object.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the difference between a class and an object in Java?\",\r\n    answer:\r\n      \"A class is a blueprint, while an object is an instance of a class.\",\r\n    explanation:\r\n      \"In Java, a class is a blueprint or template that defines the structure and behavior of objects of that class. It includes instance variables (data) and methods (behavior). An object, on the other hand, is an instance of a class created in memory. Objects have their own state (values of their instance variables) and can perform actions using their methods. Multiple objects can be created from a single class, each with its own state.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of the 'this' keyword in Java?\",\r\n    answer: \"To refer to the current instance of the class.\",\r\n    explanation:\r\n      \"'this' is a keyword in Java that refers to the current instance of a class. It can be used to access the instance variables and methods of the current object, and is often used to distinguish between instance variables and method parameters with the same name. 'this' can also be used to call other constructors within the same class.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is a static variable in Java?\",\r\n    answer:\r\n      \"A variable that belongs to the class and not any specific instance of the class.\",\r\n    explanation:\r\n      \"A static variable in Java is a class-level variable that belongs to the class itself rather than any specific instance of the class. It is shared among all instances of the class and is initialized when the class is first loaded. Static variables are often used to store information that should be shared across all instances, such as constants or counters.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you declare a static variable in Java?\",\r\n    answer: \"Using the static keyword in the variable declaration.\",\r\n    explanation:\r\n      'To declare a static variable in Java, you use the static keyword before the data type and variable name in the variable declaration. This informs the Java compiler that the variable is static and belongs to the class itself rather than to individual instances. For example, to declare a static integer variable named \"count\", you would write: static int count;',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between a static variable and an instance variable in Java?\",\r\n    answer:\r\n      \"Static variables belong to the class, while instance variables belong to individual instances of the class.\",\r\n    explanation:\r\n      \"The main difference between static variables and instance variables in Java is that static variables belong to the class itself and are shared among all instances of the class, whereas instance variables belong to individual instances of the class and have separate values for each instance. Static variables are declared using the static keyword, and they are initialized when the class is first loaded. Instance variables are initialized when a new instance of the class is created.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is a static method in Java?\",\r\n    answer:\r\n      \"A method that belongs to the class and not any specific instance of the class.\",\r\n    explanation:\r\n      \"A static method in Java is a method that belongs to the class itself rather than any specific instance of the class. It can be called without creating an instance of the class, and it cannot access instance variables or instance methods directly. Static methods are often used for utility functions or operations that do not depend on the state of an object.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you declare a static method in Java?\",\r\n    answer: \"Using the static keyword in the method declaration.\",\r\n    explanation:\r\n      'To declare a static method in Java, you use the static keyword before the return type and method name in the method declaration. This informs the Java compiler that the method is static and belongs to the class itself rather than to individual instances. For example, to declare a static method named \"printHello\" that returns void, you would write: static void printHello() { /* method implementation */ }',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between a static method and an instance method in Java?\",\r\n    answer:\r\n      \"Static methods belong to the class, while instance methods belong to individual instances of the class.\",\r\n    explanation:\r\n      \"The main difference between static methods and instance methods in Java is that static methods belong to the class itself and can be called without creating an instance of the class, whereas instance methods belong to individual instances of the class and can only be called on an instance of the class. Static methods cannot access instance variables or instance methods directly, while instance methods can access both instance variables and other instance methods.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is an instance variable in Java?\",\r\n    answer: \"A variable that belongs to an individual instance of a class.\",\r\n    explanation:\r\n      \"An instance variable in Java is a variable that belongs to an individual instance of a class, and has a separate value for each instance. Instance variables store the state of an object, and their values can be accessed and modified by the instance methods of the class. Instance variables are declared within the class, outside of any methods, and are typically marked as private to enforce encapsulation.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you declare an instance variable in Java?\",\r\n    answer:\r\n      \"Declare it within the class, outside of any methods, typically with an access modifier.\",\r\n    explanation:\r\n      'To declare an instance variable in Java, you define it within the class, outside of any methods. Instance variables are typically marked with an access modifier (e.g., private, protected, or public) to indicate their visibility. For example, to declare an instance variable named \"count\" of type int with private access, you would write: private int count;',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between a local variable and an instance variable in Java?\",\r\n    answer:\r\n      \"Local variables are declared within a method, while instance variables are declared within a class but outside any methods.\",\r\n    explanation:\r\n      \"The main difference between local variables and instance variables in Java is their scope and lifetime. Local variables are declared within a method and exist only for the duration of the method call. They are not accessible outside the method. Instance variables are declared within a class, outside of any methods, and are accessible to all instance methods of the class. They exist for the lifetime of the object and store the state of an object.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is a reference data type in Java?\",\r\n    answer:\r\n      \"A data type that holds a reference to an object rather than the actual value.\",\r\n    explanation:\r\n      \"A reference data type in Java is a data type that holds a reference (memory address) to an object rather than the actual value of the object itself. Reference data types include classes, interfaces, and arrays. When you create an object of a reference data type, you're creating a reference to the object in memory, and any operations performed on the reference are actually performed on the object it points to.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between a primitive data type and a reference data type in Java?\",\r\n    answer:\r\n      \"Primitive data types store actual values, while reference data types store references to objects.\",\r\n    explanation:\r\n      \"The main difference between primitive data types and reference data types in Java is how they store data. Primitive data types (e.g., int, float, boolean, char) store the actual values directly, while reference data types (e.g., classes, interfaces, arrays) store references (memory addresses) to objects. Primitive data types have a fixed memory size and perform faster operations, while reference data types can have varying sizes and require more memory and processing overhead.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: 'What is the purpose of the \"extends\" keyword in Java?',\r\n    answer: \"It indicates that a class inherits from another class.\",\r\n    explanation:\r\n      'The \"extends\" keyword in Java is used to indicate that a class inherits from another class, also known as a superclass or parent class. By using inheritance, a class (subclass or child class) can inherit fields and methods from the superclass, allowing for code reuse and more efficient organization of related classes.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is an abstract class in Java?\",\r\n    answer:\r\n      \"A class that cannot be instantiated and is meant to be subclassed.\",\r\n    explanation:\r\n      \"An abstract class in Java is a class that cannot be instantiated directly. It is meant to be subclassed by other classes. Abstract classes can define abstract methods, which have no implementation in the abstract class itself, and must be implemented by any non-abstract subclasses. Abstract classes can also contain non-abstract methods with their own implementations, which can be inherited by subclasses.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you declare an abstract class in Java?\",\r\n    answer: 'Use the \"abstract\" keyword before the class declaration.',\r\n    explanation:\r\n      'To declare an abstract class in Java, you use the \"abstract\" keyword before the class declaration. For example, to create an abstract class named \"Animal,\" you would write: abstract class Animal { /* class body */ }',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: 'What is the purpose of the \"abstract\" keyword in Java?',\r\n    answer: \"It is used to define abstract classes and methods.\",\r\n    explanation:\r\n      'The \"abstract\" keyword in Java serves two purposes: 1) It is used to define an abstract class, which cannot be instantiated directly and is meant to be subclassed by other classes. 2) It is used to declare abstract methods within an abstract class. Abstract methods have no implementation in the abstract class and must be implemented by any non-abstract subclasses.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is an interface in Java?\",\r\n    answer:\r\n      \"A blueprint for a group of related methods without implementations.\",\r\n    explanation:\r\n      \"An interface in Java is a blueprint for a group of related methods without any method implementations. It defines the methods that a class implementing the interface must implement. Interfaces are used to define contracts that classes must adhere to, enabling polymorphism and allowing different classes to be used interchangeably based on their common interface.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you declare an interface in Java?\",\r\n    answer: 'Use the \"interface\" keyword followed by the interface name.',\r\n    explanation:\r\n      'To declare an interface in Java, use the \"interface\" keyword followed by the interface name. For example, to create an interface named \"Drawable,\" you would write: interface Drawable { /* method signatures / }',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: 'What is the purpose of the \"implements\" keyword in Java?',\r\n    answer: \"It indicates that a class implements a specific interface.\",\r\n    explanation:\r\n      'The \"implements\" keyword in Java is used to indicate that a class implements a specific interface. This means that the class must provide implementations for all the methods defined in the interface. By implementing an interface, a class can adhere to a specific contract, enabling polymorphism and allowing it to be used interchangeably with other classes that implement the same interface.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you implement an interface in Java?\",\r\n    answer: 'Use the \"implements\" keyword followed by the interface name.',\r\n    explanation:\r\n      'To implement an interface in Java, use the \"implements\" keyword followed by the interface name in the class declaration. Then, provide implementations for all the methods defined in the interface. For example, to implement the \"Drawable\" interface in a class named \"Circle,\" you would write: class Circle implements Drawable { / method implementations */ }',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is polymorphism in Java?\",\r\n    answer: \"The ability of a single interface to represent multiple types.\",\r\n    explanation:\r\n      \"Polymorphism in Java is a concept in which a single interface can represent multiple types, or the ability of different classes to be treated as objects of a common superclass or interface. This allows for more flexible and reusable code, as methods can operate on objects of different classes as long as they share the same interface or superclass.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How does method overriding work in Java?\",\r\n    answer:\r\n      \"A subclass provides a new implementation for a method inherited from its superclass.\",\r\n    explanation:\r\n      'Method overriding in Java occurs when a subclass provides a new implementation for a method that is inherited from its superclass. This new implementation \"overrides\" the original method in the superclass. When an overridden method is called on an object of the subclass, the new implementation in the subclass is executed, rather than the original method in the superclass.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: 'What is the purpose of the \"@Override\" annotation in Java?',\r\n    answer:\r\n      \"To indicate that a method is intended to override a method in the superclass.\",\r\n    explanation:\r\n      'The \"@Override\" annotation in Java is used to indicate that a method is intended to override a method in the superclass. It helps the compiler to detect any errors if the method signature in the subclass does not match the method signature in the superclass, which could result in unintended behavior. The \"@Override\" annotation also improves the readability of the code by making it clear that a method is an overridden method.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between method overloading and method overriding in Java?\",\r\n    answer:\r\n      \"Overloading uses different parameters for methods with the same name, while overriding replaces inherited method implementations.\",\r\n    explanation:\r\n      \"Method overloading and method overriding are two different concepts in Java. Method overloading refers to defining multiple methods with the same name in the same class, but with different parameters. It allows for multiple ways to call a method based on the provided arguments. Method overriding, on the other hand, occurs when a subclass provides a new implementation for a method that is inherited from its superclass. This new implementation replaces the original method in the superclass when called on an object of the subclass.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is a package in Java?\",\r\n    answer: \"A namespace for organizing related classes and interfaces.\",\r\n    explanation:\r\n      \"A package in Java is a namespace that is used to organize related classes and interfaces. It helps to group related code together, avoid naming conflicts between classes, and manage the visibility of classes and their members. Packages can also be used to modularize code, making it easier to maintain, test, and distribute.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you create and use packages in Java?\",\r\n    answer:\r\n      'Use the \"package\" keyword to declare a package and \"import\" to use classes from other packages.',\r\n    explanation:\r\n      'To create a package in Java, you declare it at the beginning of a Java source file using the \"package\" keyword, followed by the package name. The package name is usually written in lowercase and follows the reverse domain naming convention. To use classes or interfaces from other packages, you need to import them using the \"import\" keyword, followed by the fully qualified name of the class or interface. You can also use wildcard imports to import all classes from a package, by using an asterisk (*) after the package name.',\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default classesAndReferenceDataTypes;\r\n","const creatingObjects = [\r\n  {\r\n    question: \"What is instantiation in Java?\",\r\n    answer: \"The process of creating an object from a class.\",\r\n    explanation:\r\n      \"Instantiation is the process of allocating memory for an object and initializing it using a constructor, thus creating an instance of a class.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you create an object in Java?\",\r\n    answer: 'Using the \"new\" keyword followed by a constructor call.',\r\n    explanation:\r\n      'An object is created by using the \"new\" keyword, followed by a call to the class constructor. For example: ClassName objectName = new ClassName();',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of the 'new' keyword in Java?\",\r\n    answer: \"To allocate memory and create an instance of a class.\",\r\n    explanation:\r\n      \"The 'new' keyword is used to allocate memory for a new object and create an instance of a class. It also invokes the class constructor to initialize the object's state.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the role of a constructor during object instantiation in Java?\",\r\n    answer: \"To initialize the object with default or specified values.\",\r\n    explanation:\r\n      \"During object instantiation, a constructor is called to initialize the object with default or specified values. Constructors can be overloaded to provide different initialization options for the object.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you declare a constructor in Java?\",\r\n    answer:\r\n      \"By defining a method with the same name as the class and no return type.\",\r\n    explanation:\r\n      \"A constructor is declared by defining a method with the same name as the class and no return type. The constructor can have parameters, but it must not have a return type, not even void.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can a class have multiple constructors in Java? If so, how?\",\r\n    answer: \"Yes, by using constructor overloading.\",\r\n    explanation:\r\n      \"A class can have multiple constructors in Java through constructor overloading. This is achieved by defining multiple constructors with different parameter lists. The constructors must have a different number or types of parameters to be considered overloaded.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is a default constructor in Java?\",\r\n    answer: \"A constructor with no parameters.\",\r\n    explanation:\r\n      \"A default constructor in Java is a constructor that takes no parameters. If you do not define any constructor in a class, the Java compiler automatically provides a default constructor with no parameters and an empty body.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What happens if you don't define any constructor in a Java class?\",\r\n    answer: \"The compiler automatically provides a default constructor.\",\r\n    explanation:\r\n      \"If you don't define any constructor in a Java class, the compiler automatically provides a default constructor with no parameters and an empty body. This default constructor initializes the object's instance variables with their default values.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What are the different ways to initialize an object in Java?\",\r\n    answer:\r\n      \"Using constructors, initialization blocks, and object reference assignment.\",\r\n    explanation:\r\n      \"In Java, objects can be initialized in different ways: 1) Using constructors to initialize instance variables during object creation. 2) Using instance initialization blocks, which are non-static code blocks within a class that get executed when an object is created. 3) Initializing object reference variables by assigning values directly to their instance variables after the object has been created.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is object initialization in Java?\",\r\n    answer:\r\n      \"the process of creating an instance of a class and setting its initial values or properties.\",\r\n    explanation:\r\n      \"Object initialization in Java refers to the process of setting initial values for an object's instance variables. This is typically done using constructors, which are special methods called during object creation to set up the initial state of the object.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is an anonymous object in Java?\",\r\n    answer: \"An object without a reference variable.\",\r\n    explanation:\r\n      \"An anonymous object in Java is an object that is created without a reference variable. These objects can be used immediately during their creation, but they cannot be accessed later since there is no reference variable to point to them.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the purpose of the 'super' keyword in Java, and how is it used in constructors?\",\r\n    answer:\r\n      \"To call the constructor of the superclass and initialize inherited properties.\",\r\n    explanation:\r\n      \"The 'super' keyword in Java is used to call the constructor of the superclass (parent class) from a subclass (child class) during object creation. This is important to initialize the inherited properties of the object. In a constructor, you can use 'super' followed by a set of parentheses containing the arguments to call the appropriate superclass constructor. This call must be the first statement in the constructor.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between instance initialization block and constructor in Java?\",\r\n    answer:\r\n      \"Initialization blocks run every time an object is created, while constructors are called explicitly.\",\r\n    explanation:\r\n      \"Instance initialization blocks are non-static code blocks within a class that get executed when an object is created, regardless of which constructor is used. Constructors, on the other hand, are special methods that are called explicitly during object creation to set up the initial state of the object. Constructors can have different parameters, allowing for different ways to initialize an object, while initialization blocks have no parameters and run the same code for all object instances.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: 'What is the purpose of the \"instanceof\" keyword in Java?',\r\n    answer:\r\n      \"To check if an object is an instance of a specific class or interface.\",\r\n    explanation:\r\n      'The \"instanceof\" keyword in Java is used to determine if an object is an instance of a specific class or an implementation of a specific interface. The \"instanceof\" operator returns true if the object is an instance of the specified class or interface, and false otherwise. This can be useful for checking the type of an object at runtime, especially when working with polymorphism or inheritance.\"',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between an object reference and an object instance in Java?\",\r\n    answer:\r\n      \"An object reference points to an object instance, while an object instance is the actual object in memory.\",\r\n    explanation:\r\n      \"In Java, an object reference is a variable that stores the memory address of an object instance. It acts as a pointer to the actual object in memory. On the other hand, an object instance is the actual object created in memory, with its associated data and methods. When you create an object using the new keyword, you create an object instance in memory, and the reference variable points to that instance.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is an enum in Java, and how do you create enum objects?\",\r\n    answer:\r\n      \"A special class representing a group of constants. Enums are created using the enum keyword.\",\r\n    explanation:\r\n      \"In Java, an enum is a special class used to represent a group of constants, typically to represent a set of related values. Enums are created using the enum keyword followed by the enum name and a list of constants enclosed in curly braces. Each constant in the enum is an object of the enum type, and you can use them directly by referring to the enum name followed by a dot and the constant name. Enums can have constructors, methods, and instance variables, but constructors must be private.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you create an array of objects in Java?\",\r\n    answer:\r\n      \"Declare an array of the class type, then instantiate each element using the new keyword.\",\r\n    explanation:\r\n      \"To create an array of objects in Java, first declare an array of the desired class type, followed by the array name and square brackets. Next, allocate memory for the array using the new keyword, specifying the class type and the desired array size in square brackets. Finally, create instances of the class for each element in the array using the new keyword and the appropriate constructor. For example:\\n\\nMyClass[] objectArray = new MyClass[5];\\nfor (int i = 0; i < objectArray.length; i++) {\\n objectArray[i] = new MyClass();\\n}\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between an array of objects and an ArrayList in Java?\",\r\n    answer:\r\n      \"Arrays have a fixed size, while ArrayLists are resizable. ArrayLists also offer more built-in methods.\",\r\n    explanation:\r\n      \"In Java, the primary difference between an array of objects and an ArrayList is that arrays have a fixed size, whereas ArrayLists are dynamically resizable. Once an array is created, its size cannot be changed. On the other hand, an ArrayList can grow or shrink in size as elements are added or removed. Additionally, ArrayLists provide built-in methods to easily manipulate elements, such as add(), remove(), and indexOf(), while arrays do not have these methods and require manual manipulation.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      'What is the purpose of the \"final\" keyword in Java, and how does it affect object creation?',\r\n    answer:\r\n      'The \"final\" keyword prevents modification of variables, inheritance of classes, and overriding of methods.',\r\n    explanation:\r\n      'In Java, the \"final\" keyword has several purposes, depending on where it is applied. When applied to a variable, it makes the variable\\'s value unmodifiable, effectively turning it into a constant. When applied to a class, it prevents the class from being inherited by other classes. When applied to a method, it prevents the method from being overridden in subclasses. The \"final\" keyword does not directly impact object creation, except when a class is marked as final, in which case you cannot create objects of subclasses (as inheritance is not allowed).',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is an object's lifecycle in Java?\",\r\n    answer:\r\n      \"creation, use, and garbage collection.\",\r\n    explanation:\r\n      \"In Java, the lifecycle of an object consists of three main stages: creation, use, and garbage collection. During creation, memory is allocated for the object, and the constructor is called to initialize the object. After creation, the object can be used by calling its methods, accessing its instance variables, and passing it as an argument to other methods. Once an object is no longer needed, and there are no references to it, it becomes eligible for garbage collection. The Java garbage collector will automatically reclaim the memory occupied by the object, freeing up resources for other objects.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is garbage collection in Java, and how does it affect object creation?\",\r\n    answer:\r\n      \"The process of reclaiming memory from unused objects. It helps manage memory efficiently.\",\r\n    explanation:\r\n      \"In Java, garbage collection is a mechanism for automatically managing memory by reclaiming memory occupied by objects that are no longer in use. When an object has no references pointing to it, it becomes eligible for garbage collection. The Java garbage collector runs periodically to find and remove such objects, freeing up memory for new objects. Garbage collection helps manage memory efficiently, preventing memory leaks and reducing the need for manual memory management. It does not directly affect object creation, but it helps ensure that there is enough available memory for creating new objects.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you create an immutable object in Java?\",\r\n    answer:\r\n      \"Make the class final, declare all fields final, provide no setters, and use defensive copies for mutable fields.\",\r\n    explanation:\r\n      \"To create an immutable object in Java, you should follow these steps: 1) Declare the class as final to prevent inheritance. 2) Declare all fields as private and final to prevent modification. 3) Provide no setter methods to avoid changing field values. 4) Ensure the constructor initializes all fields. 5) For mutable fields (e.g., collections or arrays), create defensive copies when returning them from getter methods or accepting them in the constructor to prevent external modifications. By following these steps, you ensure that once an object is created, its state cannot be altered.\",\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default creatingObjects;\r\n","const constructors = [\r\n  {\r\n    question: \"What is a constructor in Java?\",\r\n    answer: \"A special method used to initialize objects.\",\r\n    explanation:\r\n      \"A constructor is a special method in a class that is called when an object of that class is created. It initializes the object by setting the initial values of the instance variables and performing any other setup required.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you declare a constructor in Java?\",\r\n    answer:\r\n      \"By using the class name followed by parentheses and a block of code.\",\r\n    explanation:\r\n      \"To declare a constructor in Java, use the class name followed by an opening and closing parenthesis, and then a block of code. The constructor does not have a return type and its access modifier can be public, private, or protected.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What are the different types of constructors in Java?\",\r\n    answer:\r\n      \"Default constructor, no-arg constructor, and parameterized constructor.\",\r\n    explanation:\r\n      \"In Java, there are three types of constructors: default constructor (automatically provided by the compiler if no other constructors are defined), no-arg constructor (a constructor with no parameters, defined by the programmer), and parameterized constructor (a constructor with one or more parameters, defined by the programmer).\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is a default constructor in Java?\",\r\n    answer:\r\n      \"A constructor without parameters automatically provided by the compiler.\",\r\n    explanation:\r\n      \"A default constructor is a constructor without any parameters that is automatically provided by the Java compiler if no other constructors are defined in the class. The default constructor initializes instance variables with their default values (e.g., 0 for integers, null for reference types) and performs no other actions.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is a no-arg constructor in Java?\",\r\n    answer: \"A constructor with no parameters defined by the programmer.\",\r\n    explanation:\r\n      \"A no-arg constructor is a constructor explicitly defined by the programmer without any parameters. It allows for the creation of objects without passing any arguments and can be used to set default values for instance variables or perform other setup tasks.\",\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question: \"What is a parameterized constructor in Java?\",\r\n    answer:\r\n      \"A constructor with one or more parameters defined by the programmer.\",\r\n    explanation:\r\n      \"A parameterized constructor is a constructor explicitly defined by the programmer with one or more parameters. It allows for the creation of objects while passing arguments to set the initial values of instance variables or perform other setup tasks.\",\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question: \"Can a constructor have a return type in Java?\",\r\n    answer: \"No\",\r\n    explanation:\r\n      'In Java, constructors do not have a return type. They are used to initialize objects, and the creation of the object itself is considered the \"return\" of the constructor.',\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question: \"Can a class have multiple constructors in Java?\",\r\n    answer: \"Yes\",\r\n    explanation:\r\n      \"A class in Java can have multiple constructors, each with a different number of parameters or types of parameters. This is known as constructor overloading, and it allows for the creation of objects with different sets of initial values or setup tasks.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is constructor overloading in Java?\",\r\n    answer:\r\n      \"Having multiple constructors with different parameter lists in a class.\",\r\n    explanation:\r\n      \"Constructor overloading in Java is when a class has multiple constructors, each with a different number or types of parameters. It allows for creating objects with different sets of initial values or setup tasks, providing flexibility and ease of use.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What happens if you don't define any constructor in a Java class?\",\r\n    answer: \"A default constructor is automatically provided by the compiler.\",\r\n    explanation:\r\n      \"If you don't define any constructor in a Java class, the compiler automatically provides a default constructor without any parameters (no-arg constructor). This default constructor initializes the instance variables to their default values (zero, false, or null, depending on the variable type).\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can a constructor be final, static, or abstract in Java?\",\r\n    answer: \"No\",\r\n    explanation:\r\n      \"Constructors in Java cannot be declared as final, static, or abstract. Constructors are meant for initializing objects, and these modifiers are not applicable in that context.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between a no-arg constructor and a default constructor in Java?\",\r\n    answer:\r\n      \"No-arg is explicitly defined, default is provided by the compiler if no constructors are defined.\",\r\n    explanation:\r\n      \"A no-arg constructor is a constructor explicitly defined by the programmer without any parameters. A default constructor, on the other hand, is a no-arg constructor automatically provided by the compiler if no constructors are defined in the class. Both allow for creating objects without passing any arguments.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can a constructor throw exceptions in Java?\",\r\n    answer: \"Yes\",\r\n    explanation:\r\n      'A constructor in Java can throw exceptions. If an exception occurs during the object initialization process, you can declare the constructor to throw the exception using the \"throws\" keyword. If a checked exception is thrown, the caller must handle or declare the exception when creating an object.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the execution order of constructors and instance initialization blocks in Java?\",\r\n    answer:\r\n      \"Instance initialization blocks run first, followed by constructors.\",\r\n    explanation:\r\n      \"In Java, the execution order during object instantiation is as follows: instance variable initializers and instance initialization blocks run first, in the order they appear in the class definition. Then, the constructor is executed. If there's inheritance involved, the constructor of the superclass is called before the subclass constructor.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the role of a constructor during object instantiation in Java?\",\r\n    answer:\r\n      \"Initializing the object and setting initial values for instance variables.\",\r\n    explanation:\r\n      \"During object instantiation in Java, the constructor plays the crucial role of initializing the object and setting initial values for instance variables. Constructors ensure that the object is in a valid state before it can be used.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you create a copy constructor in Java?\",\r\n    answer:\r\n      \"By defining a constructor that accepts an object of the same class as a parameter.\",\r\n    explanation:\r\n      \"A copy constructor in Java is a constructor that creates a new object as a copy of an existing object. To create a copy constructor, define a constructor that accepts an object of the same class as a parameter, and initialize the new object with the values of the instance variables of the passed object.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      'Can you use the \"this\" keyword in a static context within a constructor?',\r\n    answer: \"No\",\r\n    explanation:\r\n      'The \"this\" keyword cannot be used in a static context within a constructor. The \"this\" keyword refers to the current instance of the object and is used to access instance variables and methods. Since static methods and variables belong to the class itself and not to any specific instance, \"this\" cannot be used in a static context.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you access instance variables in a constructor before they are initialized?\",\r\n    answer: \"Yes\",\r\n    explanation:\r\n      \"You can access instance variables in a constructor before they are explicitly initialized. When an object is created, instance variables are automatically initialized with default values (e.g., 0 for int, null for reference types). You can access these default values before assigning any other value to the instance variables within the constructor.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is an explicit constructor invocation in Java?\",\r\n    answer:\r\n      'Calling another constructor within the same class using \"this()\" or a superclass constructor using \"super()\"',\r\n    explanation:\r\n      'An explicit constructor invocation in Java is when a constructor of the same class or a superclass is explicitly called from within another constructor. This is done using \"this()\" to call another constructor within the same class or \"super()\" to call a superclass constructor. This allows for better code reuse and simplification of constructor logic.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the order of constructor calls in a class hierarchy in Java?\",\r\n    answer: \"From the top of the hierarchy down to the derived class.\",\r\n    explanation:\r\n      'In a class hierarchy in Java, constructors are called in order from the top of the hierarchy down to the derived class. First, the constructor of the superclass is called. If there are multiple levels of inheritance, the constructor chain continues down the hierarchy until the constructor of the derived class is called. Each constructor is responsible for initializing its own instance variables and calling its superclass constructor (if needed) using the \"super()\" keyword.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you prevent a class from being instantiated in Java?\",\r\n    answer: \"Declare the constructor as private\",\r\n    explanation:\r\n      \"To prevent a class from being instantiated in Java, you can declare the constructor as private. This makes the constructor inaccessible from outside the class, preventing other classes from creating new instances of the class. This is a common technique used in Singleton design pattern and utility classes.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you overload a constructor with a different access modifier in Java?\",\r\n    answer: \"Yes\",\r\n    explanation:\r\n      \"In Java, you can overload a constructor with a different access modifier. Constructor overloading allows multiple constructors to be defined in a class with different numbers or types of arguments, or different access modifiers such as public, private, or protected.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between constructor overloading and method overloading in Java?\",\r\n    answer:\r\n      \"Constructor overloading deals with constructors, method overloading deals with methods\",\r\n    explanation:\r\n      \"Constructor overloading and method overloading are both mechanisms in Java that allow multiple definitions of a constructor or method with different numbers or types of arguments. The main difference is that constructor overloading deals with constructors, which are responsible for initializing objects, while method overloading deals with methods, which are used to perform actions on objects or return values.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What are the best practices for using constructors in Java?\",\r\n    answer:\r\n      \"Keep constructors simple, avoid calling overridable methods, use constructor chaining, avoid excessive parameters\",\r\n    explanation:\r\n      \"Best practices for using constructors in Java include: keeping constructors simple and focused on initializing object state, avoiding calling overridable methods from constructors, using constructor chaining to ensure consistent object initialization, avoiding constructors with excessive parameters by employing the Builder pattern or using factory methods, and following the principle of least astonishment by making constructors do what users expect.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you use a constructor to initialize static variables in Java?\",\r\n    answer: \"Yes, but not recommended\",\r\n    explanation:\r\n      \"Although you can use a constructor to initialize static variables in Java, it is not recommended. Static variables are shared among all instances of a class and should be initialized using static initializers or static blocks, which are executed only once when the class is loaded, rather than in a constructor which is called every time an object is instantiated.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you create a constructor with default parameter values in Java?\",\r\n    answer: \"No\",\r\n    explanation:\r\n      'Java does not support default parameter values for constructors or methods directly. However, you can achieve similar functionality by using constructor oveCan you use a constructor to initialize static variables in Java?rloading, where you provide multiple constructors with different sets of parameters. A constructor with fewer parameters can call another constructor with more parameters, providing default values for the missing arguments using the \"this()\" keyword.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use a constructor to create an immutable object in Java?\",\r\n    answer: \"Initialize all fields in the constructor and make them final\",\r\n    explanation:\r\n      \"To use a constructor to create an immutable object in Java, initialize all the fields of the object in the constructor and declare them as final. Making fields final ensures that their values cannot be changed once the object is constructed. Also, make sure to return defensive copies of any mutable objects stored as fields, and avoid exposing methods that can modify the object's internal state.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What are the advantages and disadvantages of using constructor overloading in Java?\",\r\n    answer:\r\n      \"Advantages: flexibility and code reuse; Disadvantages: code complexity and maintainability issues\",\r\n    explanation:\r\n      'Advantages of constructor overloading in Java include flexibility in object creation and code reuse, as constructors with different parameter sets can call each other using \"this()\" and provide default values. Disadvantages of constructor overloading include increased code complexity and potential maintainability issues, as adding or changing constructors may require modifying multiple constructors to maintain consistency.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you create a constructor that takes an array as a parameter in Java?\",\r\n    answer: \"Define a constructor with an array parameter\",\r\n    explanation:\r\n      'To create a constructor that takes an array as a parameter in Java, simply define a constructor with an array parameter of the desired type. For example, if you want a constructor that accepts an integer array, you can declare it like this: \"public MyClass(int[] inputArray) { ... }\". Inside the constructor, you can initialize the object using the values from the input array as needed.',\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default constructors;\r\n","const strings = [\r\n  {\r\n    question: \"What is a String in Java?\",\r\n    answer: \"A sequence of characters.\",\r\n    explanation:\r\n      \"In Java, a String is an object that represents a sequence of characters. It is a widely used data type that can store and manipulate textual data.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you create a String in Java?\",\r\n    answer: 'Using a String literal or a String object with the \"new\" keyword.',\r\n    explanation:\r\n      'In Java, you can create a String in two ways: by using a String literal enclosed in double quotes (e.g., \"Hello, World!\") or by creating a String object using the \"new\" keyword (e.g., new String(\"Hello, World!\")).',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between a String literal and a String object in Java?\",\r\n    answer:\r\n      \"String literals are stored in the String pool, while String objects are created on the heap.\",\r\n    explanation:\r\n      'In Java, String literals are stored in a special area of memory called the String pool, and multiple references to the same literal share the same memory location. On the other hand, creating a String object with the \"new\" keyword allocates memory on the heap, and each String object has its own separate memory location.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the meaning of String immutability in Java?\",\r\n    answer: \"Once created, a String cannot be changed.\",\r\n    explanation:\r\n      \"In Java, Strings are immutable, which means that once a String object is created, its content cannot be changed. Any operation that appears to modify a String actually creates a new String object with the modified content, leaving the original String unchanged.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you concatenate Strings in Java?\",\r\n    answer: 'Using the \"+\" operator, concat() method, or StringBuilder.',\r\n    explanation:\r\n      'In Java, you can concatenate Strings using the \"+\" operator (e.g., \"Hello\" + \" World\"), the concat() method (e.g., \"Hello\".concat(\" World\")), or the StringBuilder class (e.g., new StringBuilder(\"Hello\").append(\" World\")).',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between using the '+' operator and StringBuilder for String concatenation in Java?\",\r\n    answer:\r\n      'The \"+\" operator creates a new String, while StringBuilder modifies the existing one.',\r\n    explanation:\r\n      'In Java, using the \"+\" operator for String concatenation creates a new String object for each concatenation, which can be inefficient for multiple concatenations. StringBuilder, on the other hand, allows you to modify the existing StringBuilder object, making it more efficient for concatenating multiple Strings.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you compare two Strings for equality in Java?\",\r\n    answer: \"Using the equals() method.\",\r\n    explanation:\r\n      \"In Java, to compare two Strings for equality, you should use the equals() method (e.g., string1.equals(string2)). The equals() method compares the content of the Strings character by character, returning true if they are equal and false if they are not.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between the '==' operator and the equals() method for String comparison in Java?\",\r\n    answer:\r\n      'The \"==\" operator compares references, while equals() compares content.',\r\n    explanation:\r\n      'In Java, the \"==\" operator compares the memory references of two String objects, which may not accurately determine if their content is equal. The equals() method, on the other hand, compares the content of the two Strings character by character, providing an accurate comparison of their content.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you find the length of a String in Java?\",\r\n    answer: \"Using the length() method.\",\r\n    explanation:\r\n      \"In Java, you can find the length of a String by calling the length() method on the String object (e.g., string.length()). The method returns the number of characters in the String.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you convert a String to lowercase or uppercase in Java?\",\r\n    answer: \"Using toLowerCase() or toUpperCase() methods.\",\r\n    explanation:\r\n      \"In Java, you can convert a String to lowercase or uppercase using the toLowerCase() and toUpperCase() methods, respectively (e.g., string.toLowerCase() or string.toUpperCase()). These methods return a new String with all characters converted to the desired case.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you extract a part of a String (substring) in Java?\",\r\n    answer: \"Using the substring() method.\",\r\n    explanation:\r\n      \"In Java, you can extract a part of a String (substring) using the substring() method. The method has two forms: substring(int beginIndex) and substring(int beginIndex, int endIndex). The first form returns a substring starting from the specified index to the end of the String, while the second form returns a substring starting from the specified beginIndex and ending before the endIndex.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you split a String into an array of Strings in Java?\",\r\n    answer: \"Using the split() method.\",\r\n    explanation:\r\n      'In Java, you can split a String into an array of Strings using the split() method. The method takes a regular expression as a parameter (e.g., string.split(\"s\")). The method splits the String at the points where the regular expression matches and returns an array of the resulting substrings.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you replace characters or substrings within a String in Java?\",\r\n    answer: \"Using the replace(), replaceAll(), or replaceFirst() methods.\",\r\n    explanation:\r\n      \"In Java, you can replace characters or substrings within a String using the replace(), replaceAll(), or replaceFirst() methods. The replace() method replaces all occurrences of a character or CharSequence with another character or CharSequence. The replaceAll() and replaceFirst() methods replace substrings that match a given regular expression with a replacement string, either for all matches or the first match, respectively.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you remove whitespace from the beginning and end of a String in Java?\",\r\n    answer: \"Using the trim() method.\",\r\n    explanation:\r\n      \"In Java, you can remove whitespace from the beginning and end of a String using the trim() method (e.g., string.trim()). The method returns a new String with leading and trailing whitespace characters removed.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you convert a String to a char array in Java?\",\r\n    answer: \"Using the toCharArray() method.\",\r\n    explanation:\r\n      \"In Java, you can convert a String to a char array using the toCharArray() method (e.g., string.toCharArray()). The method returns a new char array containing the characters of the String in the same order.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you convert a char array to a String in Java?\",\r\n    answer: \"Using the String constructor.\",\r\n    explanation:\r\n      \"In Java, you can convert a char array to a String by passing the char array to the String constructor (e.g., new String(charArray)). The constructor creates a new String object containing the characters from the char array in the same order.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you find the index of a character or substring within a String in Java?\",\r\n    answer: \"Using the indexOf() or lastIndexOf() methods.\",\r\n    explanation:\r\n      \"In Java, you can find the index of a character or substring within a String using the indexOf() or lastIndexOf() methods. The indexOf() method returns the index of the first occurrence of the specified character or substring, while the lastIndexOf() method returns the index of the last occurrence. If the character or substring is not found, both methods return -1.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you convert a String to an integer or a floating-point number in Java?\",\r\n    answer:\r\n      \"Using parseInt(), parseDouble(), or other parse methods from Integer or Double classes.\",\r\n    explanation:\r\n      \"In Java, you can convert a String to an integer or a floating-point number using the parseInt(), parseDouble(), or other parse methods from the Integer or Double classes. For example, you can use Integer.parseInt(string) to convert a String to an int, and Double.parseDouble(string) to convert a String to a double. These methods throw a NumberFormatException if the String cannot be parsed as a valid number.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you convert an integer or a floating-point number to a String in Java?\",\r\n    answer: \"Using the toString() method or String.valueOf() method.\",\r\n    explanation:\r\n      \"In Java, you can convert an integer or a floating-point number to a String using the toString() method or the String.valueOf() method. The toString() method is available in the Integer, Double, and other wrapper classes (e.g., Integer.toString(int) or Double.toString(double)). The String.valueOf() method accepts various data types, including integers and floating-point numbers (e.g., String.valueOf(int) or String.valueOf(double)). Both methods return a new String object representing the numeric value.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the String.format() method in Java used for\",\r\n    answer:\r\n      \"formatting strings with placeholders.\",\r\n    explanation:\r\n      'In Java, the String.format() method is used to create formatted strings by replacing placeholders with specified values. It takes a format string containing placeholders (e.g., %s for strings, %d for integers, %f for floating-point numbers) and a list of arguments that replace the placeholders. The method returns a new formatted String object. For example, String.format(\"Hello, %s! You have %d messages.\", name, messageCount) creates a string with the name and message count inserted at the specified placeholders.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you join multiple Strings together using a delimiter in Java?\",\r\n    answer: \"Using the String.join() method.\",\r\n    explanation:\r\n      'In Java, you can join multiple Strings together using a delimiter by calling the String.join() method. The method takes a delimiter as the first argument, and an Iterable or varargs of Strings as the second argument. It returns a new String containing the joined strings separated by the specified delimiter. For example, String.join(\",\", \"a\", \"b\", \"c\") will return the string \"a,b,c\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you reverse a String in Java?\",\r\n    answer: \"Using StringBuilder or StringBuffer and the reverse() method.\",\r\n    explanation:\r\n      \"In Java, you can reverse a String by creating a new StringBuilder or StringBuffer object, initializing it with the original String, calling the reverse() method on the object, and then converting the StringBuilder or StringBuffer back to a String using the toString() method. For example, new StringBuilder(string).reverse().toString() returns the reversed version of the input string.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you check if a String contains a particular character or substring in Java?\",\r\n    answer: \"Using the contains() method.\",\r\n    explanation:\r\n      'In Java, you can check if a String contains a particular character or substring by calling the contains() method on the String object. The method takes a CharSequence as an argument and returns a boolean value indicating whether the input character sequence is present in the String. For example, string.contains(\"substring\") returns true if the input string contains the specified substring, and false otherwise.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you count the occurrences of a character or substring within a String in Java?\",\r\n    answer: \"Using a loop and the indexOf() method.\",\r\n    explanation:\r\n      \"In Java, you can count the occurrences of a character or substring within a String by using a loop and the indexOf() method. Start with a count of 0 and a fromIndex of 0, then repeatedly call indexOf() with the target substring and the current fromIndex. If indexOf() returns a valid index, increment the count and update the fromIndex to the returned index plus the length of the target substring. Repeat until indexOf() returns -1, indicating that there are no more occurrences of the target substring.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you compare two Strings lexicographically in Java?\",\r\n    answer: \"Using the compareTo() method.\",\r\n    explanation:\r\n      \"In Java, you can compare two Strings lexicographically by calling the compareTo() method on one of the String objects and passing the other String as an argument. The method returns an integer value: a negative value if the calling String comes before the argument String, a positive value if it comes after, and 0 if they are equal. For example, string1.compareTo(string2) compares string1 and string2 lexicographically.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you sort an array of Strings alphabetically in Java?\",\r\n    answer: \"Using the Arrays.sort() method.\",\r\n    explanation:\r\n      \"In Java, you can sort an array of Strings alphabetically by calling the static sort() method from the Arrays class and passing the array as an argument. The method sorts the array in-place in ascending lexicographic order. For example, Arrays.sort(arrayOfStrings) sorts the arrayOfStrings alphabetically.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you find the longest or shortest String in an array of Strings in Java?\",\r\n    answer:\r\n      \"Using a loop to iterate through the array and compare String lengths.\",\r\n    explanation:\r\n      \"In Java, you can find the longest or shortest String in an array of Strings by using a loop to iterate through the array and compare the lengths of the Strings. Initialize a reference to the first String as the current longest or shortest, then iterate through the remaining Strings. If you find a String with a longer (or shorter) length, update the reference. After iterating through the entire array, the reference will point to the longest or shortest String.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you check if a String is a palindrome in Java?\",\r\n    answer:\r\n      \"Using a loop to compare characters at opposite ends of the String.\",\r\n    explanation:\r\n      \"In Java, you can check if a String is a palindrome by using a loop to compare characters at opposite ends of the String. Initialize two indices, one at the beginning and one at the end of the String. Iterate through the String while comparing the characters at the two indices. If the characters are not equal, the String is not a palindrome. If the indices meet or cross each other, the String is a palindrome.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you count the number of vowels and consonants in a String in Java?\",\r\n    answer:\r\n      \"Using a loop to iterate through the characters and count vowels and consonants.\",\r\n    explanation:\r\n      \"In Java, you can count the number of vowels and consonants in a String by using a loop to iterate through the characters. Initialize vowel and consonant counts to zero. For each character, check if it is a vowel (a, e, i, o, or u, either uppercase or lowercase) and increment the vowel count if it is. If the character is an uppercase or lowercase letter and not a vowel, increment the consonant count. After iterating through the entire String, you will have the counts of vowels and consonants.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you remove duplicate characters from a String in Java?\",\r\n    answer: \"Using a Set and StringBuilder.\",\r\n    explanation:\r\n      \"In Java, you can remove duplicate characters from a String by using a Set to track unique characters and a StringBuilder to build the result. Iterate through the characters of the original String, and for each character, check if it is in the Set. If it is not, add it to the Set and append it to the StringBuilder. Finally, convert the StringBuilder to a String to obtain the result with duplicate characters removed.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you count the number of vowels and consonants in a String in Java?\",\r\n    answer:\r\n      \"Using a loop to iterate through the characters and count vowels and consonants.\",\r\n    explanation:\r\n      \"In Java, you can count the number of vowels and consonants in a String by using a loop to iterate through the characters. Initialize vowel and consonant counts to zero. For each character, check if it is a vowel (a, e, i, o, or u, either uppercase or lowercase) and increment the vowel count if it is. If the character is an uppercase or lowercase letter and not a vowel, increment the consonant count. After iterating through the entire String, you will have the counts of vowels and consonants.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you convert a String to a byte array in Java?\",\r\n    answer: \"Using the getBytes() method.\",\r\n    explanation:\r\n      \"In Java, you can convert a String to a byte array by using the getBytes() method. This method returns a byte array containing the character sequence of the String in the default charset. Optionally, you can specify the charset as a parameter to the getBytes() method if you need to use a specific charset for the conversion.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you perform regular expression matching on a String in Java?\",\r\n    answer: \"Using the matches() method or the Pattern and Matcher classes.\",\r\n    explanation:\r\n      \"In Java, you can perform regular expression matching on a String using the matches() method of the String class or by using the Pattern and Matcher classes. The matches() method takes a regular expression as an argument and returns true if the String matches the given regular expression. Alternatively, you can use the Pattern class to compile a regular expression and the Matcher class to perform matching operations on a String.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you replace substrings matching a regular expression in a String in Java?\",\r\n    answer:\r\n      \"Using the replaceAll() or replaceFirst() method of the String class.\",\r\n    explanation:\r\n      \"In Java, you can replace substrings matching a regular expression in a String using the replaceAll() or replaceFirst() method of the String class. The replaceAll() method takes two arguments: the first is the regular expression to match, and the second is the replacement String. The method returns a new String with all occurrences of the matched substrings replaced by the replacement String. The replaceFirst() method works similarly but replaces only the first occurrence of the matched substring.\",\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default strings;\r\n","const dotNotation = [\r\n  {\r\n    question: \"What is the dot notation in Java?\",\r\n    answer: \"A syntax to access members of a class or object\",\r\n    explanation:\r\n      \"Dot notation is a syntax used in Java to access class or object members such as variables, methods, or inner classes by placing a dot (.) between the object or class name and the member name.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use the dot notation to access an instance variable in Java?\",\r\n    answer: \"objectName.variableName\",\r\n    explanation:\r\n      'To access an instance variable using dot notation in Java, write the object name followed by a dot (.) and the variable name. For example, if you have an object \"person\" and want to access its instance variable \"name\", you would write: person.name.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use the dot notation to call an instance method in Java?\",\r\n    answer: \"objectName.methodName(arguments)\",\r\n    explanation:\r\n      'To call an instance method using dot notation in Java, write the object name followed by a dot (.) and the method name, with any required arguments enclosed in parentheses. For example, if you have an object \"person\" and want to call its instance method \"sayHello()\", you would write: person.sayHello().',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use the dot notation to access a static variable in Java?\",\r\n    answer: \"ClassName.variableName\",\r\n    explanation:\r\n      'To access a static variable using dot notation in Java, write the class name followed by a dot (.) and the variable name. For example, if you have a class \"MathUtils\" and want to access its static variable \"PI\", you would write: MathUtils.PI.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use the dot notation to call a static method in Java?\",\r\n    answer: \"ClassName.methodName(arguments)\",\r\n    explanation:\r\n      'To call a static method using dot notation in Java, write the class name followed by a dot (.) and the method name, with any required arguments enclosed in parentheses. For example, if you have a class \"MathUtils\" and want to call its static method \"add(int a, int b)\", you would write: MathUtils.add(3, 5).',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use the dot notation to access a nested class in Java?\",\r\n    answer: \"OuterClassName.InnerClassName\",\r\n    explanation:\r\n      'To access a nested (inner) class using dot notation in Java, write the outer class name followed by a dot (.) and the inner class name. For example, if you have an outer class \"Outer\" and a nested class \"Inner\", you would write: Outer.Inner.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you use the dot notation to access private members of a class in Java?\",\r\n    answer: \"No\",\r\n    explanation:\r\n      \"You cannot use dot notation to access private members of a class in Java. Private members are accessible only within the same class they are declared, and trying to access them from outside the class using dot notation will result in a compile-time error.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between dot notation and bracket notation in Java arrays?\",\r\n    answer:\r\n      \"Dot notation accesses members, bracket notation accesses array elements\",\r\n    explanation:\r\n      \"Dot notation is used to access class or object members, such as variables, methods, or inner classes, by placing a dot (.) between the object or class name and the member name. Bracket notation, on the other hand, is used to access array elements. In Java, array elements are accessed using brackets ([]) with the index of the element enclosed. For example: intArray[3] refers to the fourth element in the array intArray.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use the dot notation to access members of an object created from an imported package in Java?\",\r\n    answer: \"objectReference.memberName\",\r\n    explanation:\r\n      'To access members of an object created from an imported package in Java, use the dot notation by placing a dot (.) between the object reference and the member name. First, import the package using the \"import\" keyword, then create an instance of the class from the package. After that, you can use the dot notation to access the members of that object. For example: importedPackage.MyClass myObject = new importedPackage.MyClass(); myObject.memberName;',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you use the dot notation to access an element in an ArrayList or other collection in Java?\",\r\n    answer: \"No\",\r\n    explanation:\r\n      \"Dot notation cannot be used to directly access elements in an ArrayList or other collections in Java. Instead, you must use the appropriate methods provided by the collection classes, such as the get() method for ArrayLists: arrayList.get(index);\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use the dot notation to access an enum constant in Java?\",\r\n    answer: \"EnumName.CONSTANT_NAME\",\r\n    explanation:\r\n      'To access an enum constant using dot notation in Java, write the enum name followed by a dot (.) and the constant name. Enum constants are public, static, and final by default. For example, if you have an enum \"Color\" with a constant \"RED\", you would write: Color.RED;',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use the dot notation to access a constant in an interface in Java?\",\r\n    answer: \"InterfaceName.CONSTANT_NAME\",\r\n    explanation:\r\n      'To access a constant in an interface using dot notation in Java, write the interface name followed by a dot (.) and the constant name. Constants in interfaces are public, static, and final by default. For example, if you have an interface \"Constants\" with a constant \"PI\", you would write: Constants.PI;',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How does the dot notation work with inheritance and method overriding in Java?\",\r\n    answer: \"Uses the overridden method\",\r\n    explanation:\r\n      \"In Java, when you use dot notation to call a method on an object, the JVM determines which method to execute based on the object's actual type, not its reference type. If a subclass overrides a method from its superclass, the overridden method in the subclass will be called, even if the object reference is of the superclass type. This is known as dynamic method dispatch or runtime polymorphism.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is method chaining, and how is it related to the dot notation in Java?\",\r\n    answer: \"Calling multiple methods on an object sequentially\",\r\n    explanation:\r\n      \"Method chaining is a technique in Java where you call multiple methods on an object sequentially using the dot notation. Each method returns an object (often the same object or a new one), allowing you to chain together multiple method calls in a single statement. This can make code more concise and readable. For example: object.method1().method2().method3();\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use the dot notation to access a member of an object returned by a method in Java?\",\r\n    answer: \"methodName().memberName\",\r\n    explanation:\r\n      \"To access a member of an object returned by a method in Java, use the dot notation by placing a dot (.) between the method call and the member name. First, call the method that returns the object, and then access the member using dot notation. For example: objectReturningMethod().memberName;\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use the dot notation to call a method on a newly created object in Java?\",\r\n    answer: \"new ClassName().methodName()\",\r\n    explanation:\r\n      'To use the dot notation to call a method on a newly created object in Java, first create the object using the \"new\" keyword, followed by the class constructor, and then immediately use the dot notation to call the method. For example: new MyClass().myMethod(); This creates a new instance of MyClass and then calls the myMethod() method on that instance.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between dot notation and double colon (::) notation in Java?\",\r\n    answer:\r\n      \"Dot notation is for method calls and member access, double colon notation is for method references\",\r\n    explanation:\r\n      \"In Java, dot notation is used for calling methods and accessing members (variables or constants) of an object or class. The double colon (::) notation, introduced in Java 8, is used for method references, which are a shorthand way to create lambda expressions from existing methods. Method references provide a more concise syntax when the lambda expression simply calls an existing method.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you use the dot notation to call a method on a null object in Java? What happens if you try to do so?\",\r\n    answer: \"No, it causes a NullPointerException\",\r\n    explanation:\r\n      \"In Java, you cannot use the dot notation to call a method on a null object. If you attempt to do so, a NullPointerException will be thrown at runtime. To avoid this, always check if the object is null before calling a method on it. For example: if (myObject != null) { myObject.myMethod(); }\",\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default dotNotation;\r\n","const encapsulation = [\r\n  {\r\n    question: \"What is encapsulation in Java?\",\r\n    answer:\r\n      \"Encapsulation is the process of bundling data and methods operating on that data within a single unit, and restricting access to the data.\",\r\n    explanation:\r\n      \"In Java, encapsulation is achieved by using access modifiers such as private, protected, and public, and by providing getter and setter methods to control access to the data within a class.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Why is encapsulation important in object-oriented programming?\",\r\n    answer:\r\n      \"Encapsulation is important because it helps maintain code modularity, hide internal implementation details, and promote code reusability and maintainability.\",\r\n    explanation:\r\n      \"By encapsulating data and methods, you create a clear separation between an object's interface and its implementation, which makes it easier to understand, debug, and modify the code.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How does encapsulation promote data hiding in Java?\",\r\n    answer:\r\n      \"Encapsulation promotes data hiding by restricting access to an object's internal data using access modifiers.\",\r\n    explanation:\r\n      \"By making the data members of a class private or protected, you can control how the data is accessed and modified, which prevents unauthorized access and potential misuse.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you achieve encapsulation in Java?\",\r\n    answer:\r\n      \"by using access modifiers, such as private, protected, and public, and by implementing getter and setter methods to control access to an object's data.\",\r\n    explanation:\r\n      \"By making the data members of a class private or protected, you restrict direct access to the data. Getter and setter methods allow controlled access and modification of the data, enabling you to maintain the integrity of the object's state.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the role of access modifiers in encapsulation?\",\r\n    answer:\r\n      \"By controlling the visibility and accessibility of class members.\",\r\n    explanation:\r\n      \"By using access modifiers, you can restrict access to an object's data members and methods, preventing unauthorized access and ensuring that only specified methods can manipulate the data.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What are the different access modifiers in Java?\",\r\n    answer:\r\n      \"There are four access modifiers in Java: private, protected, public, and package-private (default).\",\r\n    explanation:\r\n      \"These access modifiers determine the visibility and accessibility of class members: private is the most restrictive, accessible only within the class; protected is accessible within the same package and by subclasses; public is accessible from any class; and package-private (no modifier) is accessible within the same package.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use the 'private' access modifier to implement encapsulation in Java?\",\r\n    answer:\r\n      \"You can use the private access modifier on data members and methods to make them accessible only within the class.\",\r\n    explanation:\r\n      \"This ensures that the internal data of an object can only be accessed and modified through methods provided by the class, maintaining the integrity of the object's state and protecting it from external interference.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use the 'protected' access modifier to implement encapsulation in Java?\",\r\n    answer:\r\n      \"You can use the protected access modifier on data members and methods to make them accessible within the same package and by subclasses.\",\r\n    explanation:\r\n      \"This allows for controlled access to the data while still providing flexibility for inheritance and code reusability. It maintains a level of encapsulation by preventing direct access from unrelated classes.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use the 'public' access modifier to implement encapsulation in Java?\",\r\n    answer:\r\n      \"You use the public access modifier on methods that provide controlled access to an object's data members.\",\r\n    explanation:\r\n      \"While the data members themselves should be private, you can create public methods (e.g., getters and setters) that allow external code to access or modify the data in a controlled manner, ensuring that the object maintains a consistent state and adhering to the principles of encapsulation.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between 'private', 'protected', and 'public' access modifiers in Java?\",\r\n    answer:\r\n      \"Private is the most restrictive, accessible only within the class; protected is accessible within the same package and by subclasses; public is accessible from any class.\",\r\n    explanation:\r\n      \"Private access restricts access to the class itself, while protected allows access to the same package and subclasses. Public access makes the member accessible from any location, without restrictions.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the role of getter and setter methods in encapsulation?\",\r\n    answer:\r\n      \"Getter and setter methods provide controlled access to an object's private data members, maintaining encapsulation.\",\r\n    explanation:\r\n      \"Getters are used to read the value of a data member, and setters are used to modify it. By using these methods, you can apply validation, maintain consistency, and ensure that the object's state is always valid, while still keeping the data members private.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you create a getter method in Java?\",\r\n    answer:\r\n      \"use the \\\"public\\\" keyword, followed by the data type of the data member, and a method name that typically starts with \\\"get\\\" and is followed by the capitalized name of the data member.\",\r\n    explanation:\r\n      'To create a getter method, use the \"public\" keyword, followed by the data type of the data member, and a method name that typically starts with \"get\" and is followed by the capitalized name of the data member. Inside the method, return the value of the data member.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you create a setter method in Java?\",\r\n    answer:\r\n      \"se the \\\"public\\\" keyword, followed by the \\\"void\\\" return type, and a method name that typically starts with \\\"set\\\" and is followed by the capitalized name of the data member.\",\r\n    explanation:\r\n      'To create a setter method, use the \"public\" keyword, followed by the \"void\" return type, and a method name that typically starts with \"set\" and is followed by the capitalized name of the data member. The method should take a parameter with the same data type as the data member. Inside the method, assign the parameter value to the data member.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What are the naming conventions for getter and setter methods in Java?\",\r\n    answer:\r\n      'Getter methods typically start with \"get\" (or \"is\" for boolean values), and setter methods start with \"set\", followed by the capitalized name of the data member.',\r\n    explanation:\r\n      'These naming conventions make it easy to identify the purpose of a method and the data member it accesses. For example, if a data member is called \"name\", the getter would be \"getName()\" and the setter would be \"setName(String name)\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do getter and setter methods help enforce data validation?\",\r\n    answer:\r\n      \"Getter and setter methods can contain logic to ensure that only valid values are assigned to the data members.\",\r\n    explanation:\r\n      \"By using setter methods to modify private data members, you can include validation checks or transformations before assigning the value. This ensures that the object maintains a consistent and valid state, and any potential issues are caught and addressed before they cause problems.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can a getter method have parameters in Java?\",\r\n    answer: \"Typically, a getter method does not have parameters.\",\r\n    explanation:\r\n      \"A getter method is designed to simply return the value of a data member without requiring any additional information. However, in some cases, you might need a getter method with parameters if you need to provide additional information to retrieve the value, such as accessing an element in a collection based on an index.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can a setter method return a value in Java?\",\r\n    answer: \"Typically, setter methods have a void return type.\",\r\n    explanation:\r\n      \"Setter methods are designed to set the value of a data member and usually do not return any value. However, in some specific cases, a setter method might return a value, such as a reference to the object itself for method chaining or an indication of success or failure.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you create a read-only class in Java using encapsulation?\",\r\n    answer:\r\n      \"Create a class with only private data members and provide getter methods without any setter methods.\",\r\n    explanation:\r\n      \"By providing only getter methods and not exposing any setter methods, you prevent the modification of the object's internal state, making the class read-only.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you create a write-only class in Java using encapsulation?\",\r\n    answer:\r\n      \"Create a class with only private data members and provide setter methods without any getter methods.\",\r\n    explanation:\r\n      \"By providing only setter methods and not exposing any getter methods, you allow the modification of the object's internal state but prevent the direct access to its values, making the class write-only.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How does encapsulation help in maintaining code and reducing coupling?\",\r\n    answer:\r\n      \"Encapsulation hides the internal details of an object and exposes a well-defined interface.\",\r\n    explanation:\r\n      \"By encapsulating the object's internal state and exposing only necessary methods, you can easily change the internal implementation without affecting other parts of the code. This reduces the coupling between different components of the system, making it easier to maintain and modify.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the role of constructors in encapsulation?\",\r\n    answer:\r\n      \"Constructors help in initializing and setting the state of an object.\",\r\n    explanation:\r\n      \"Constructors ensure that an object is created with a valid state by setting the initial values of private fields, which enforces encapsulation by keeping the object's internal state protected.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use constructors to initialize private fields in Java?\",\r\n    answer: \"Use constructor parameters to set the values of private fields.\",\r\n    explanation:\r\n      \"In the constructor, assign the parameter values to the private fields of the class, ensuring that the object's state is properly initialized when an instance is created.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can you use constructors for data validation in Java?\",\r\n    answer: \"Yes, constructors can be used for data validation.\",\r\n    explanation:\r\n      \"You can add data validation logic within the constructor to ensure that the object is created with a valid state. If the provided data does not meet the validation criteria, you can throw an exception to prevent the creation of an invalid object.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use constructors with default values for encapsulation in Java?\",\r\n    answer:\r\n      \"Create a constructor without parameters and assign default values to the private fields.\",\r\n    explanation:\r\n      \"A no-arg constructor can be used to set default values for private fields, ensuring that the object has a valid initial state even if no explicit values are provided during instantiation. This enforces encapsulation by keeping the internal state of the object protected.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between encapsulation and abstraction in Java?\",\r\n    answer:\r\n      \"Encapsulation hides data and provides access through public methods, while abstraction exposes essential features and hides complexities.\",\r\n    explanation:\r\n      \"Encapsulation is a way to achieve data hiding and prevent direct access to an object's internal state by wrapping it in a protected capsule. It is achieved by using private fields and public methods, such as getters and setters. Abstraction, on the other hand, aims to provide a simpler representation of complex systems by exposing only the essential features and hiding the internal details. This is typically achieved through interfaces and abstract classes in Java.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How does encapsulation relate to inheritance in Java?\",\r\n    answer:\r\n      \"It defines clear boundaries and contracts for inherited classes, ensuring proper data protection and method implementation.\",\r\n    explanation:\r\n      \"Inheritance allows classes to inherit properties and methods from a parent class, promoting code reusability and modularity. Encapsulation helps to ensure that the inherited classes follow the contracts established by the parent class, by providing access to the parent class' properties and methods through public or protected interfaces. This relationship helps to maintain data integrity and allows for better control over the behavior of inherited classes.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How does encapsulation relate to polymorphism in Java?\",\r\n    answer:\r\n      \"It supports polymorphism by providing a consistent interface for objects, enabling interchangeable use while hiding internal implementations.\",\r\n    explanation:\r\n      \"Polymorphism is a key concept in object-oriented programming that allows objects of different classes to be treated as objects of a common superclass. Encapsulation plays a crucial role in this process by providing a consistent interface for interacting with these objects, regardless of their actual class. By hiding the internal implementations of methods and properties, encapsulation enables the code to be more flexible and adaptable, allowing polymorphic behavior to occur without impacting the overall system stability.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How does encapsulation help in improving code reusability in Java?\",\r\n    answer:\r\n      \"It hides internal details, promotes modularity, and allows easy integration of components without affecting other parts of the system.\",\r\n    explanation:\r\n      \"By encapsulating an object's state and providing access through public interfaces, the internal details of the object become hidden, making it easier to reuse the code in different parts of a project or across multiple projects. Encapsulation promotes modularity by enforcing clear boundaries between components, which allows developers to replace or modify individual components without affecting the rest of the system. This separation of concerns leads to better maintainability and reusability of code.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use encapsulation with static methods and fields in Java?\",\r\n    answer:\r\n      \"By using private static fields and public static methods, encapsulation can be applied to static components.\",\r\n    explanation:\r\n      \"To apply encapsulation to static methods and fields, you can declare the static fields as private and provide public static methods (getters and setters) to access and modify them. This ensures that the static fields are not directly accessible from outside the class, maintaining data integrity and promoting the proper use of the static components.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the role of the 'final' keyword in encapsulation?\",\r\n    answer:\r\n      \"It prevents modification or inheritance, ensuring data and method immutability.\",\r\n    explanation:\r\n      \"The 'final' keyword, when used in the context of encapsulation, can serve two purposes. When applied to a field, it ensures that the field value cannot be modified once initialized, effectively making it a constant. This guarantees the immutability of the field and prevents unintended changes. When used with a method, it prevents the method from being overridden in a subclass, ensuring that the behavior of the method remains consistent and cannot be altered through inheritance.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the role of the 'package-private' access modifier in encapsulation?\",\r\n    answer:\r\n      \"It restricts access to members within the same package, providing an intermediate level of encapsulation.\",\r\n    explanation:\r\n      \"The package-private access modifier, which is the default when no modifier is specified, allows access to class members only within the same package. This provides an intermediate level of encapsulation between public (accessible from anywhere) and private (accessible only within the class). Package-private can be useful when you want to allow access to class members for classes within the same package but prevent access from outside the package. It helps to maintain a balance between encapsulation and usability, promoting better organization and modularity.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you use encapsulation with inner classes in Java?\",\r\n    answer:\r\n      \"By making inner classes private or package-private and exposing necessary functionality through outer class methods.\",\r\n    explanation:\r\n      \"Encapsulation can be applied to inner classes by making them private or package-private, ensuring that they are not directly accessible from outside the outer class or the package. This hides the implementation details of the inner class and promotes separation of concerns. The outer class can expose the necessary functionality of the inner class through its public methods, allowing controlled access to the inner class and maintaining encapsulation.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you use encapsulation with anonymous classes in Java?\",\r\n    answer:\r\n      \"By implementing interfaces or extending classes and overriding methods, while keeping the implementation hidden.\",\r\n    explanation:\r\n      \"Anonymous classes in Java are a way to create one-time-use classes that implement an interface or extend an existing class. Encapsulation is inherent in anonymous classes because they don't have a name, and thus their implementation details are hidden. When you create an anonymous class, you directly implement the necessary interface methods or override the superclass methods, keeping the implementation specific to the context in which the anonymous class is used. This promotes separation of concerns and allows for a clean, readable interface.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you use encapsulation with exception handling in Java?\",\r\n    answer:\r\n      \"By creating custom exceptions with private fields and providing public methods to access relevant information.\",\r\n    explanation:\r\n      \"Encapsulation can be applied to exception handling by creating custom exception classes that extend the built-in Java exception classes. These custom exceptions can have private fields to store information relevant to the error condition, and public methods (such as getters) can be provided to access this information. This approach ensures that the internal state of the exception is protected, and the necessary information is exposed through a controlled interface, maintaining encapsulation and promoting a clean, consistent API for error handling.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use encapsulation with Java collections and data structures?\",\r\n    answer:\r\n      \"By using private fields for collections, providing public methods for access and modification, and returning immutable or defensive copies when necessary.\",\r\n    explanation:\r\n      \"When using collections and data structures in Java, encapsulation can be achieved by declaring the collection as a private field within the class. Public methods, such as getters, setters, and other utility methods, should be provided for accessing and modifying the collection's contents. To further enhance encapsulation and protect the internal state of the collection, consider returning immutable views or defensive copies of the collection when exposing its contents through getters. This prevents external modification of the collection and ensures data integrity.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What are some best practices for implementing encapsulation in Java?\",\r\n    answer:\r\n      \"Use private fields, public accessors, immutability, defensive copying, and appropriate access modifiers for class members.\",\r\n    explanation:\r\n      \"Some best practices for implementing encapsulation in Java include:\\n\\n1. Declare fields as private to restrict direct access from outside the class.\\n2. Provide public getter and setter methods (accessors) for controlled access to the fields.\\n3. Make fields final when possible to promote immutability and prevent unintended modifications.\\n4. Return immutable views or defensive copies of mutable objects when exposing them through getters to ensure data integrity.\\n5. Choose appropriate access modifiers for class members, such as package-private or protected, to maintain a balance between encapsulation and usability.\\n\\nBy following these best practices, you can effectively maintain encapsulation, promote separation of concerns, and improve code maintainability and reusability.\",\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default encapsulation;\r\n","const accessModifiers = [\r\n  {\r\n    question: \"What are access modifiers in Java?\",\r\n    answer:\r\n      \"Access modifiers in Java are keywords such as private, protected, and public that control access to class members.\",\r\n    explanation:\r\n      \"Access modifiers in Java allow you to specify the level of access that other classes or methods have to the fields, methods, and constructors of a class. They help to enforce encapsulation and ensure that only the appropriate parts of a class can be accessed or modified by other parts of the program.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How many access modifiers are there in Java?\",\r\n    answer:\r\n      \"four\",\r\n    explanation:\r\n      \"Java has four access modifiers that control access to class members: private, protected, public, and default. Each of these access modifiers has different levels of accessibility and is used to ensure that only the appropriate parts of a class can be accessed or modified by other parts of the program.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the default access modifier in Java?\",\r\n    answer: \"The default access modifier in Java is package-private.\",\r\n    explanation:\r\n      \"If no access modifier is specified for a class member in Java, then the default access modifier is used. This means that the member can be accessed by any other class in the same package, but not by classes outside of the package.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of access modifiers in Java?\",\r\n    answer:\r\n      \"To control access to class members and enforce encapsulation.\",\r\n    explanation:\r\n      \"Access modifiers in Java help to enforce encapsulation by allowing you to specify the level of access that other classes or methods have to the fields, methods, and constructors of a class. This helps to ensure that only the appropriate parts of a class can be accessed or modified by other parts of the program, and helps to prevent accidental modification or misuse of class members.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do access modifiers control access to class members?\",\r\n    answer:\r\n      \"By specifying which classes or methods are allowed to access the member. Private members can only be accessed within the same class, protected members can be accessed within the same package or by subclasses, public members can be accessed by any class, and default members can be accessed within the same package.\",\r\n    explanation:\r\n      \"In Java, access modifiers allow you to control the accessibility of class members such as fields, methods, and constructors. By specifying an access modifier for a member, you can determine which classes or methods are allowed to access the member. This helps to enforce encapsulation and ensure that only the appropriate parts of a class can be accessed or modified by other parts of the program.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between private and public access modifiers?\",\r\n    answer:\r\n      \"The main difference between private and public access modifiers is that private members can only be accessed within the same class, while public members can be accessed by any class.\",\r\n    explanation:\r\n      \"Private members are only accessible within the same class, while public members can be accessed by any class in the program. This means that private members are more restrictive in terms of accessibility, while public members are more permissive. It's generally a good practice to use the most restrictive access modifier possible to ensure that your code is secure and maintainable.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can private members be accessed from outside the class?\",\r\n    answer:\r\n      \"No\",\r\n    explanation:\r\n      \"Private members are only accessible within the same class in which they are declared. They cannot be accessed from outside the class, even by subclasses. This helps to ensure that private members are not accidentally modified or misused by other parts of the program.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can public members be accessed from outside the class?\",\r\n    answer:\r\n      \"Yes\",\r\n    explanation:\r\n      \"Public members are the most permissive in terms of accessibility. They can be accessed by any class in the program, regardless of where they are declared. This means that public members can be used to expose an interface to other parts of the program and make it easy to integrate different classes or modules together.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the scope of private members?\",\r\n    answer:\r\n      \"Limited to the class in which they are declared.\",\r\n    explanation:\r\n      \"Private members are only accessible within the same class in which they are declared. This means that they cannot be accessed by other classes or methods in the same package or by subclasses. Private members help to enforce encapsulation and ensure that only the appropriate parts of a class can be accessed or modified by other parts of the program.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the scope of public members?\",\r\n    answer:\r\n      \"The entire program. They can be accessed by any class or method in the program.\",\r\n    explanation:\r\n      \"Public members are the most permissive in terms of accessibility. They can be accessed by any class or method in the program, regardless of where they are declared. This means that public members can be used to expose an interface to other parts of the program and make it easy to integrate different classes or modules together.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the protected access modifier used for?\",\r\n    answer:\r\n      \"Used to allow subclasses and other classes in the same package to access the member.\",\r\n    explanation:\r\n      \"Protected members can be accessed by subclasses and other classes in the same package. This allows for more flexibility in terms of accessibility than private members, but is still more restrictive than public members. Protected members can be useful for creating a hierarchy of classes that share certain properties or behaviors.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the default access modifier used for?\",\r\n    answer:\r\n      \"package-private (used to allow classes in the same package to access the member.)\",\r\n    explanation:\r\n      \"If no access modifier is specified for a class member in Java, then the default access modifier is used. This means that the member can be accessed by any other class in the same package, but not by classes outside of the package. The default access modifier can be useful for creating packages of related classes that work together to achieve a common goal.\",\r\n    img: \"\",\r\n  },\r\n\r\n  {\r\n    question: \"Can protected members be accessed from outside the class?\",\r\n    answer:\r\n      \"yes by subclasses and other classes in the same package, but not by classes outside of the package.\",\r\n    explanation:\r\n      \"Protected members have a wider scope than private members, but a more limited scope than public members. Protected members can be accessed by subclasses and other classes in the same package, which allows for more flexibility in terms of accessibility than private members. However, they cannot be accessed by classes outside of the package, which provides some level of protection against accidental modification or misuse of class members.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can default members be accessed from outside the class?\",\r\n    answer:\r\n      \"yes by other classes in the same package, but not by classes outside of the package.\",\r\n    explanation:\r\n      \"Default members (also known as package-private members) have a more limited scope than protected members. They can be accessed by other classes in the same package, but not by classes outside of the package. This provides some level of encapsulation and helps to ensure that only the appropriate parts of a class can be accessed or modified by other parts of the program.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between protected and default access modifiers?\",\r\n    answer:\r\n      \"The difference between protected and default access modifiers is that protected members can be accessed by subclasses and other classes in the same package, while default members can only be accessed by other classes in the same package.\",\r\n    explanation:\r\n      \"Protected members have a wider scope than default members. They can be accessed by subclasses and other classes in the same package, which allows for more flexibility in terms of accessibility. Default members can only be accessed by other classes in the same package, which provides some level of encapsulation and helps to ensure that only the appropriate parts of a class can be accessed or modified by other parts of the program.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between private and protected access modifiers?\",\r\n    answer:\r\n      \"The main difference between private and protected access modifiers is that private members can only be accessed within the same class, while protected members can be accessed by subclasses and other classes in the same package.\",\r\n    explanation:\r\n      \"Private members are only accessible within the same class in which they are declared. Protected members can be accessed by subclasses and other classes in the same package, which allows for more flexibility in terms of accessibility. It's generally a good practice to use the most restrictive access modifier possible to ensure that your code is secure and maintainable.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between private and default access modifiers?\",\r\n    answer:\r\n      \"The difference between private and default access modifiers is that private members can only be accessed within the same class, while default members can be accessed by other classes in the same package.\",\r\n    explanation:\r\n      \"Private members are only accessible within the same class in which they are declared. Default members (also known as package-private members) can be accessed by other classes in the same package, but not by classes outside of the package. This provides some level of encapsulation and helps to ensure that only the appropriate parts of a class can be accessed or modified by other parts of the program.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between public and protected access modifiers?\",\r\n    answer:\r\n      \"The main difference between public and protected access modifiers is that protected members can be accessed by subclasses and other classes in the same package, while public members can be accessed by any class in the program.\",\r\n    explanation:\r\n      \"Protected members have a more limited scope than public members. They can be accessed by subclasses and other classes in the same package, which allows for more flexibility in terms of accessibility. Public members can be accessed by any class in the program, regardless of where they are declared. This means that public members are more permissive in terms of accessibility.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between public and default access modifiers?\",\r\n    answer:\r\n      \"The main difference between public and default access modifiers is that public members can be accessed by any class in the program, while default members can be accessed by other classes in the same package.\",\r\n    explanation:\r\n      \"Public members have a wider scope than default members. They can be accessed by any class in the program, regardless of where they are declared. Default members can only be accessed by other classes in the same package, which provides some level of encapsulation and helps to ensure that only the appropriate parts of a class can be accessed or modified by other parts of the program.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you declare a private member in a class?\",\r\n    answer:\r\n      \"By using the private access modifier before the member declaration.\",\r\n    explanation:\r\n      'To declare a private member in a class, you simply need to use the private access modifier before the member declaration. For example, to declare a private field named \"name\" in a class, you would use the following code: \"private String name;\". Private members are only accessible within the same class in which they are declared, which helps to ensure encapsulation and prevent accidental modification or misuse of class members.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you declare a public member in a class?\",\r\n    answer:\r\n      \"By using the public access modifier before the member declaration.\",\r\n    explanation:\r\n      'To declare a public member in a class, you simply need to use the public access modifier before the member declaration. For example, to declare a public method named \"getName\" in a class, you would use the following code: \"public String getName() { ... }\". Public members are the most permissive in terms of accessibility, and can be accessed by any class in the program.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you declare a protected member in a class?\",\r\n    answer:\r\n      \"By using the protected access modifier before the member declaration.\",\r\n    explanation:\r\n      'To declare a protected member in a class, you simply need to use the protected access modifier before the member declaration. For example, to declare a protected field named \"age\" in a class, you would use the following code: \"protected int age;\". Protected members can be accessed by subclasses and other classes in the same package, which allows for more flexibility in terms of accessibility than private members.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you declare a default member in a class?\",\r\n    answer:\r\n      \"By not specifying an access modifier before the member declaration.\",\r\n    explanation:\r\n      'To declare a default member in a class, you simply need to not specify an access modifier before the member declaration. For example, to declare a default method named \"print\" in a class, you would use the following code: \"void print() { ... }\". Default members (also known as package-private members) can be accessed by other classes in the same package, but not by classes outside of the package.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the syntax for declaring a private member in a class?\",\r\n    answer:\r\n      \"To use the private access modifier before the member declaration.\",\r\n    explanation:\r\n      'To declare a private member in a class, you simply need to use the private access modifier before the member declaration. For example, to declare a private field named \"id\" in a class, you would use the following code: \"private int id;\". Private members are only accessible within the same class in which they are declared, which helps to ensure encapsulation and prevent accidental modification or misuse of class members.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the syntax for declaring a public member in a class?\",\r\n    answer:\r\n      \"To use the public access modifier before the member declaration.\",\r\n    explanation:\r\n      'To declare a public member in a class, you simply need to use the public access modifier before the member declaration. For example, to declare a public method named \"getAge\" in a class, you would use the following code: \"public int getAge() { ... }\". Public members are the most permissive in terms of accessibility, and can be accessed by any class in the program.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the syntax for declaring a protected member in a class?\",\r\n    answer:\r\n      \"Use the protected access modifier before the member declaration.\",\r\n    explanation:\r\n      'To declare a protected member in a class, you simply need to use the protected access modifier before the member declaration. For example, to declare a protected field named \"balance\" in a class, you would use the following code: \"protected double balance;\". Protected members can be accessed by subclasses and other classes in the same package, which allows for more flexibility in terms of accessibility than private members.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the syntax for declaring a default member in a class?\",\r\n    answer:\r\n      \"To not specify an access modifier before the member declaration.\",\r\n    explanation:\r\n      'To declare a default member in a class, you simply need to not specify an access modifier before the member declaration. For example, to declare a default method named \"print\" in a class, you would use the following code: \"void print() { ... }\". Default members (also known as package-private members) can be accessed by other classes in the same package, but not by classes outside of the package.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between private and static access modifiers?\",\r\n    answer:\r\n      \"The main difference between private and static access modifiers is that private members are tied to a specific instance of a class, while static members are shared across all instances of the class.\",\r\n    explanation:\r\n      \"Private members can only be accessed within the same class in which they are declared, and are tied to a specific instance of the class. This means that each instance of the class has its own copy of the private member. Static members, on the other hand, are shared across all instances of the class. This means that there is only one copy of the static member, regardless of how many instances of the class are created. Static members are often used to represent properties or behaviors that are common to all instances of a class, such as a counter or a utility method.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between protected and static access modifiers?\",\r\n    answer:\r\n      \"The main difference between protected and static access modifiers is that protected members are tied to a specific instance of a class, while static members are shared across all instances of the class.\",\r\n    explanation:\r\n      \"Protected members can be accessed by subclasses and other classes in the same package, and are tied to a specific instance of the class. This means that each instance of the class has its own copy of the protected member. Static members, on the other hand, are shared across all instances of the class. This means that there is only one copy of the static member, regardless of how many instances of the class are created. Static members are often used to represent properties or behaviors that are common to all instances of a class, such as a counter or a utility method.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between public and static access modifiers?\",\r\n    answer:\r\n      \"The main difference between public and static access modifiers is that public members can be accessed by any class in the program, while static members are shared across all instances of the class.\",\r\n    explanation:\r\n      \"Public members have a wider scope than static members. They can be accessed by any class in the program, regardless of where they are declared. Static members, on the other hand, are shared across all instances of the class. This means that there is only one copy of the static member, regardless of how many instances of the class are created. Static members are often used to represent properties or behaviors that are common to all instances of a class, such as a counter or a utility method.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between default and static access modifiers?\",\r\n    answer:\r\n      \"The main difference between default and static access modifiers is that default members can be accessed by other classes in the same package, while static members are shared across all instances of the class.\",\r\n    explanation:\r\n      \"Default members have a more limited scope than static members. They can only be accessed by other classes in the same package, which provides some level of encapsulation and helps to ensure that only the appropriate parts of a class can be accessed or modified by other parts of the program. Static members, on the other hand, are shared across all instances of the class. This means that there is only one copy of the static member, regardless of how many instances of the class are created. Static members are often used to represent properties or behaviors that are common to all instances of a class, such as a counter or a utility method.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can a private member be accessed by another class in the same package?\",\r\n    answer:\r\n      \"No,it cannot be accessed by another class in the same package.\",\r\n    explanation:\r\n      \"Private members can only be accessed within the same class in which they are declared. They cannot be accessed by any other classes, even if those classes are in the same package as the declaring class. This provides a high level of encapsulation and helps to ensure that private members are only accessed or modified by the appropriate parts of the program.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can a protected member be accessed by another class in the same package?\",\r\n    answer:\r\n      \"Yes, By another class in the same package, as well as by any subclasses of the class in any package.\",\r\n    explanation:\r\n      \"Protected members have a more limited scope than public members, but a wider scope than private members. They can be accessed by other classes in the same package, as well as by any subclasses of the class in any package. This allows for more flexibility in terms of accessibility, and is often used when a member needs to be accessible to a limited number of classes or subclasses.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can a public member be accessed by another class in the same package?\",\r\n    answer:\r\n      \"Yes, by another class in the same package, as well as by any class in any package.\",\r\n    explanation:\r\n      \"Public members have the widest scope of all access modifiers. They can be accessed by any class in any package, as well as by other classes in the same package. This provides the most permissive level of accessibility, and is often used when a member needs to be accessible to a large number of classes or parts of the program.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can a default member be accessed by another class in the same package?\",\r\n    answer:\r\n      \"Yes, it can be accessed by another class in the same package.\",\r\n    explanation:\r\n      \"Default members (also known as package-private members) can be accessed by other classes in the same package, but not by classes outside of the package. This provides some level of encapsulation and helps to ensure that only the appropriate parts of a class can be accessed or modified by other parts of the program.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can a private member be inherited by a subclass?\",\r\n    answer: \"No, it cannot be inherited by a subclass.\",\r\n    explanation:\r\n      \"Private members can only be accessed within the same class in which they are declared. They cannot be accessed by any other classes, including subclasses of the declaring class. This provides a high level of encapsulation and helps to ensure that private members are only accessed or modified by the appropriate parts of the program.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between private and final access modifiers?\",\r\n    answer:\r\n      \"The main difference between private and final access modifiers is that private members cannot be accessed from outside the class, while final members cannot be modified once they have been initialized.\",\r\n    explanation:\r\n      \"Private members can only be accessed within the same class in which they are declared, and cannot be accessed from outside the class. Final members, on the other hand, can be accessed from outside the class, but cannot be modified once they have been initialized. This means that their value cannot be changed after they are created, which can be useful for creating constants or other values that should not be modified during program execution.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between protected and final access modifiers?\",\r\n    answer:\r\n      \"The main difference between protected and final access modifiers is that protected members can be accessed by subclasses and other classes in the same package, while final members cannot be modified once they have been initialized.\",\r\n    explanation:\r\n      \"Protected members can be accessed by subclasses and other classes in the same package, which allows for more flexibility in terms of accessibility. Final members, on the other hand, can be accessed from outside the class, but cannot be modified once they have been initialized. This means that their value cannot be changed after they are created, which can be useful for creating constants or other values that should not be modified during program execution.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between public and final access modifiers?\",\r\n    answer:\r\n      \"The main difference between public and final access modifiers is that public members can be accessed by any class in the program, while final members cannot be modified once they have been initialized.\",\r\n    explanation:\r\n      \"Public members have a wider scope than final members. They can be accessed by any class in the program, regardless of where they are declared. Final members, on the other hand, can be accessed from outside the class, but cannot be modified once they have been initialized. This means that their value cannot be changed after they are created, which can be useful for creating constants or other values that should not be modified during program execution.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between default and final access modifiers?\",\r\n    answer:\r\n      \"The main difference between default and final access modifiers is that default members can be accessed by other classes in the same package, while final members cannot be modified once they have been initialized.\",\r\n    explanation:\r\n      \"Default members have a more limited scope than final members. They can only be accessed by other classes in the same package, which provides some level of encapsulation and helps to ensure that only the appropriate parts of a class can be accessed or modified by other parts of the program. Final members, on the other hand, can be accessed from outside the class, but cannot be modified once they have been initialized. This means that their value cannot be changed after they are created, which can be useful for creating constants or other values that should not be modified during program execution.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can a private member be accessed within the same class?\",\r\n    answer:\r\n      \"Yes, it can be accessed within the same class in which it is declared.\",\r\n    explanation:\r\n      \"Private members can only be accessed within the same class in which they are declared. This provides a high level of encapsulation and helps to ensure that private members are only accessed or modified by the appropriate parts of the program.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can a protected member be accessed within the same class?\",\r\n    answer:\r\n      \"Yes, it can be accessed within the same class in which it is declared.\",\r\n    explanation:\r\n      \"Protected members can be accessed within the same class in which they are declared, as well as by any subclasses of the class in any package. This allows for more flexibility in terms of accessibility, and is often used when a member needs to be accessible to a limited number of classes or subclasses.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can a public member be accessed within the same class?\",\r\n    answer:\r\n      \"Yes, it can be accessed within the same class in which it is declared.\",\r\n    explanation:\r\n      \"Public members can be accessed by any class in any package, as well as by other classes in the same package. This provides the most permissive level of accessibility, and is often used when a member needs to be accessible to a large number of classes or parts of the program.\",\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default accessModifiers;\r\n","const interfaceJava = [\r\n  {\r\n    question: \"What is an interface in Java?\",\r\n    answer:\r\n      \"A blueprint for a group of related methods without any implementations.\",\r\n    explanation:\r\n      \"Interfaces in Java define a set of methods that a class must implement without specifying how those methods are implemented. This allows for greater flexibility and abstraction in programming, and can make code easier to maintain and extend over time.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do interfaces differ from classes in Java?\",\r\n    answer:\r\n      \"They cannot be instantiated, they have no constructors, and they cannot define any implementation code for their methods.\",\r\n    explanation:\r\n      \"While classes in Java can be instantiated, interfaces cannot. They simply define a set of method signatures that implementing classes must provide. Additionally, while classes can have constructors and implementation code, interfaces cannot.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can a class implement multiple interfaces in Java?\",\r\n    answer: \"Yes\",\r\n    explanation:\r\n      \"Java allows a class to implement any number of interfaces, which can be useful for implementing multiple behaviors or for adapting to different types of objects or data.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can an interface extend another interface in Java?\",\r\n    answer: \"Yes\",\r\n    explanation:\r\n      \"Java allows an interface to extend any number of other interfaces, which can be useful for creating more complex interfaces that inherit and combine behaviors from multiple sources.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of an interface in Java?\",\r\n    answer:\r\n      \"To define a set of method signatures that a class must implement without specifying how those methods are implemented.\",\r\n    explanation:\r\n      \"By defining a set of method signatures that must be implemented by a class, an interface in Java allows for greater flexibility and abstraction in programming. It enables different classes to provide their own implementations for these methods, while still adhering to the same set of rules and signatures defined in the interface.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do interfaces promote code reusability in Java?\",\r\n    answer:\r\n      \"By allowing multiple classes to share the same set of method signatures and behaviors, without having to duplicate code.\",\r\n    explanation:\r\n      \"By defining a set of method signatures that must be implemented by a class, interfaces in Java enable different classes to provide their own implementations for these methods, while still adhering to the same set of rules and signatures defined in the interface. This promotes code reusability, as multiple classes can implement the same interface and share common behaviors and functionality without duplicating code.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the syntax for defining an interface in Java?\",\r\n    answer:\r\n      \"\\n\\npublic interface InterfaceName {\\n    // method declarations\\n}\",\r\n    explanation:\r\n      'The keyword \"interface\" is used to define an interface in Java, followed by the name of the interface. Inside the interface, the method signatures are declared without any implementation code. Any class that implements this interface must provide its own implementation for these methods.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can an interface have fields in Java?\",\r\n    answer:\r\n      \"Yes, an interface can have fields in Java, but they must be public, static, and final.\",\r\n    explanation:\r\n      \"Fields can be defined inside an interface in Java, but they must be public, static, and final. This means that they are constants and cannot be modified once they are defined. Fields can be accessed by any class that implements the interface.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can an interface have constructors in Java?\",\r\n    answer: \"No\",\r\n    explanation:\r\n      \"Interfaces in Java define a set of method signatures that must be implemented by a class, but they do not have constructors. This is because interfaces do not have any implementation code or state, and are simply used to define a set of behaviors or actions that implementing classes must provide.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the default access modifier for an interface in Java?\",\r\n    answer: \"public\",\r\n    explanation:\r\n      \"If no access modifier is specified for an interface in Java, it is considered public by default. This means that any class can implement the interface, regardless of whether it is in the same package or a different package.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can an interface be public in Java?\",\r\n    answer: \"Yes\",\r\n    explanation:\r\n      \"In Java, an interface can be declared public, which means that it can be accessed from any other class or package. This is the most common way to declare an interface, as it allows for maximum flexibility and reusability of the interface.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can an interface be private in Java?\",\r\n    answer: \"No\",\r\n    explanation:\r\n      \"In Java, an interface can be declared with the access modifiers public, protected, or the default (package-private) modifier. However, it cannot be declared as private, since this would make it inaccessible to any other classes or interfaces that may implement it.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can an interface be protected in Java?\",\r\n    answer: \"No\",\r\n    explanation:\r\n      \"In Java, an interface can be declared with the access modifiers public, protected, or the default (package-private) modifier. However, it cannot be declared as protected, since this would make it accessible only to the same package or subclasses, which goes against the concept of interfaces as a means of promoting abstraction and reusability.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can an interface have abstract methods in Java?\",\r\n    answer: \"Yes\",\r\n    explanation:\r\n      \"In Java, an interface is essentially a set of method signatures that must be implemented by any class that implements the interface. Since the methods are not implemented in the interface itself, they are implicitly abstract. As such, it is common for interfaces to have abstract methods that define the behaviors or actions that implementing classes must provide.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can an interface have static methods in Java?\",\r\n    answer: \"Yes\",\r\n    explanation:\r\n      'In Java 8 and later versions, interfaces can have static methods, which are declared using the \"static\" keyword. These methods can be called using the interface name, without the need for an instance of the implementing class.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can an interface have default methods in Java?\",\r\n    answer: \"Yes\",\r\n    explanation:\r\n      'In Java 8 and later versions, interfaces can have default methods, which are declared using the \"default\" keyword. These methods provide a default implementation for the interface method, which can be overridden by implementing classes if needed. This feature was introduced to allow interfaces to evolve over time without breaking existing code that implements the interface.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is an abstract class in Java?\",\r\n    answer:\r\n      \"A class that cannot be instantiated, but can contain both abstract and non-abstract methods and fields.\",\r\n    explanation:\r\n      'An abstract class is similar to an interface in that it cannot be instantiated, but it can contain implementation code for some methods and fields. However, abstract classes are typically used when you want to provide a base class that contains some implementation code, but you want to leave some methods abstract so that they can be implemented by subclasses. Abstract classes are declared using the \"abstract\" keyword.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do abstract classes differ from interfaces in Java?\",\r\n    answer:\r\n      \"Abstract classes in Java can contain both abstract and non-abstract methods, whereas interfaces can only contain abstract method signatures. Additionally, a class can only extend one abstract class, but it can implement multiple interfaces.\",\r\n    explanation:\r\n      \"While both abstract classes and interfaces in Java cannot be instantiated, abstract classes can contain both abstract and non-abstract methods and fields, whereas interfaces can only contain method signatures. Additionally, a class can only extend one abstract class, but it can implement multiple interfaces.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can an abstract class implement an interface in Java?\",\r\n    answer: \"Yes\",\r\n    explanation:\r\n      \"In Java, an abstract class can implement any number of interfaces, similar to how any other class can implement interfaces. This allows for greater flexibility and reusability of the abstract class and its methods.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can an abstract class have non-abstract methods in Java?\",\r\n    answer: \"Yes\",\r\n    explanation:\r\n      \"An abstract class in Java can have both abstract and non-abstract methods, which can contain implementation code. This can be useful when you want to provide some common implementation code for all subclasses of the abstract class, but still leave some methods abstract so that they can be implemented by subclasses.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of the default keyword in Java interfaces?\",\r\n    answer:\r\n      \"To provide a default implementation for an interface method.\",\r\n    explanation:\r\n      \"In Java 8 and later versions, interfaces can have default methods, which provide a default implementation for the method. The default keyword is used to declare these methods, and any class that implements the interface can choose to override the method with its own implementation, or use the default implementation provided by the interface.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can a default method in an interface be overridden in an implementing class in Java?\",\r\n    answer:\r\n      \"Yes\",\r\n    explanation:\r\n      \"In Java 8 and later versions, interfaces can have default methods, which provide a default implementation for the method. Any class that implements the interface can choose to override the method with its own implementation, or use the default implementation provided by the interface. This allows for greater flexibility in implementing interfaces and promoting code reusability.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the purpose of the static keyword in Java interfaces?\",\r\n    answer:\r\n      \"To declare static methods that can be called without an instance of the implementing class.\",\r\n    explanation:\r\n      \"In Java 8 and later versions, interfaces can have static methods, which are declared using the static keyword. These methods can be called using the interface name, without the need for an instance of the implementing class. This can be useful for providing utility methods or common functionality that does not depend on the state of an object.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can an interface have a main method in Java?\",\r\n    answer:\r\n      \"Yes, but it cannot be executed.\",\r\n    explanation:\r\n      \"In Java, an interface can have a main method just like any other class. However, since interfaces cannot be instantiated, the main method in an interface cannot be executed directly. Instead, the main method is typically defined in a class that implements the interface, and is used to launch the application.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can an interface have a main method and be executed in Java?\",\r\n    answer:\r\n      \"No\",\r\n    explanation:\r\n      \"In Java, a main method must be defined in a class, and it is used to launch the application. Since interfaces cannot be instantiated, the main method cannot be defined in an interface and executed from there. Instead, the main method is typically defined in a class that implements the interface.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can an interface be instantiated in Java?\",\r\n    answer: \"No\",\r\n    explanation:\r\n      \"An interface in Java is essentially a set of method signatures that must be implemented by any class that implements the interface. Since interfaces do not have any implementation code or state, they cannot be instantiated directly. Instead, they are used as a blueprint for creating classes that implement the interface.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can an interface have a constructor in Java?\",\r\n    answer: \"No\",\r\n    explanation:\r\n      \"In Java, an interface cannot have a constructor, since interfaces do not have any implementation code or state. Instead, they are used to define a set of behaviors or actions that implementing classes must provide. As such, they cannot be instantiated or initialized like a regular class.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is a marker interface in Java?\",\r\n    answer:\r\n      \"A marker interface in Java is an interface with no methods, used to indicate a special behavior or characteristic of a class that implements the interface.\",\r\n    explanation:\r\n      \"Marker interfaces in Java are used to provide metadata or marker information about a class, without actually providing any methods or functionality. They are typically used to indicate a special behavior or characteristic of a class, such as being serializable, cloneable, or remote. The presence of the marker interface on a class indicates that it has certain capabilities or properties, which can be used by other parts of the application.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do marker interfaces differ from regular interfaces in Java?\",\r\n    answer:\r\n      \"Marker interfaces in Java are interfaces with no methods, used to provide metadata or marker information about a class, whereas regular interfaces define a set of method signatures that must be implemented by any class that implements the interface.\",\r\n    explanation:\r\n      \"Marker interfaces in Java are used to provide metadata or marker information about a class, without actually providing any methods or functionality. They are typically used to indicate a special behavior or characteristic of a class, such as being serializable, cloneable, or remote. Regular interfaces, on the other hand, define a set of method signatures that must be implemented by any class that implements the interface. This allows for greater flexibility in designing and implementing classes with common behavior.\",\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default interfaceJava;\r\n","const getters = [\r\n  {\r\n    question: \"What is the purpose of getter methods in Java?\",\r\n    answer: \"To retrieve the value of private instance variables.\",\r\n    explanation:\r\n      \"Getter methods provide a way to access private instance variables without directly exposing them, ensuring encapsulation and improving code maintainability.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do getter methods contribute to the principle of encapsulation in Java?\",\r\n    answer: \"By controlling access to private instance variables.\",\r\n    explanation:\r\n      \"Encapsulation is the bundling of data (instance variables) and methods (functions) that operate on that data within a single unit (a class). Getter methods help achieve encapsulation by providing controlled access to private instance variables, keeping the internal state of an object hidden from other classes.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between public and private access modifiers in Java?\",\r\n    answer:\r\n      \"Public members are accessible from any class, while private members are accessible only within their own class.\",\r\n    explanation:\r\n      \"Access modifiers determine the visibility and accessibility of class members (variables and methods). Public access modifier allows a member to be accessed from any class, while private access modifier restricts access to the member within its own class, helping to achieve encapsulation and prevent unintended modifications from other classes.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is a simple example of a getter method for a private instance variable in Java?\",\r\n    answer:\r\n      \"public class MyClass { private int myVar; public int getMyVar() { return myVar; } }\",\r\n    explanation:\r\n      'In this example, a class named \"MyClass\" has a private instance variable \"myVar\" of type int. A getter method \"getMyVar()\" is defined to access the value of \"myVar\". The method returns the value of \"myVar\" without exposing it directly to other classes, ensuring encapsulation.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the naming convention for getter methods in Java?\",\r\n    answer: 'Prefix \"get\" followed by the capitalized variable name.',\r\n    explanation:\r\n      'In Java, the naming convention for getter methods is to use the prefix \"get\" followed by the capitalized name of the instance variable for which the getter is defined. For boolean variables, the prefix \"is\" can be used instead of \"get\". This naming convention makes the code more readable and understandable.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Why should getter methods be used instead of directly accessing private instance variables in Java?\",\r\n    answer: \"To ensure encapsulation, maintainability, and flexibility.\",\r\n    explanation:\r\n      \"Using getter methods instead of directly accessing private instance variables enforces encapsulation, which helps to keep the internal state of an object hidden from other classes. This improves code maintainability and flexibility by allowing changes to the internal implementation without affecting external code that relies on the getter methods.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How can you create a read-only property in Java using a getter method without a corresponding setter method?\",\r\n    answer: \"Define a getter method without a setter method.\",\r\n    explanation:\r\n      \"To create a read-only property in Java, you can define a getter method for the private instance variable without providing a corresponding setter method. This ensures that the value of the instance variable can be accessed but not modified from outside the class, making the property read-only.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between accessor methods and getter methods in Java?\",\r\n    answer: \"No difference, they are synonymous.\",\r\n    explanation:\r\n      \"In Java, accessor methods and getter methods refer to the same concept. Both terms are used to describe methods that provide controlled access to private instance variables without directly exposing them, ensuring encapsulation and promoting code maintainability.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is an example of using a getter method to enforce validation on a private instance variable in Java?\",\r\n    answer:\r\n      \"public class MyClass { private int age; public int getAge() { return (age < 0) ? 0 : age; } }\",\r\n    explanation:\r\n      'In this example, a class named \"MyClass\" has a private instance variable \"age\" of type int. A getter method \"getAge()\" is defined to access the value of \"age\". The method checks if the value of \"age\" is less than 0 and returns 0 if true, otherwise, it returns the value of \"age\". This enforces validation, ensuring that a non-negative age value is returned.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do getter methods relate to the concept of separation of concerns in Java?\",\r\n    answer: \"They separate data access from data representation.\",\r\n    explanation:\r\n      \"Separation of concerns is a design principle that advocates for dividing a program into distinct sections, each addressing a specific concern. Getter methods in Java help achieve this principle by separating data access (getting the value of a private instance variable) from data representation (how the instance variable is stored and managed within the class). This improves code maintainability and allows for easier updates to the internal implementation without affecting external code.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you explain the role of the 'this' keyword in Java getter methods?\",\r\n    answer: \"Refers to the current instance of the class.\",\r\n    explanation:\r\n      \"In Java, the 'this' keyword is used to refer to the current instance of the class within the scope of an instance method, like a getter method. It can be used to access the private instance variables of the class, avoiding ambiguity when there are local variables or method parameters with the same name as the instance variables.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the relationship between getter methods and the concept of immutability in Java?\",\r\n    answer: \"Getter methods can help create immutable objects.\",\r\n    explanation:\r\n      \"Immutability is the property of an object that prevents its state from being modified after creation. Getter methods contribute to creating immutable objects in Java by providing read-only access to private instance variables. When combined with the absence of setter methods and appropriate constructors, getter methods help ensure that the state of an object remains constant throughout its lifetime, making it immutable.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How can you use getter methods to implement lazy initialization in Java?\",\r\n    answer:\r\n      \"Initialize the instance variable within the getter method when first accessed.\",\r\n    explanation:\r\n      \"Lazy initialization is a technique where an object is created or a resource is allocated only when it is needed. You can use getter methods to implement lazy initialization in Java by initializing the private instance variable within the getter method when it is first accessed. This can help reduce memory usage and improve performance by deferring the initialization of expensive resources until they are actually needed.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you provide an example of using a getter method to calculate a derived property from private instance variables in Java?\",\r\n    answer:\r\n      \"public class Rectangle { private int length; private int width; public int getArea() { return length * width; } }\",\r\n    explanation:\r\n      'In this example, a class named \"Rectangle\" has two private instance variables, \"length\" and \"width\". A getter method \"getArea()\" is defined to calculate the area of the rectangle using the values of \"length\" and \"width\". The method returns the calculated area, demonstrating how a getter method can be used to calculate a derived property from private instance variables.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How does the use of getter methods improve the maintainability of Java code?\",\r\n    answer:\r\n      \"By enforcing encapsulation and providing a consistent interface for data access.\",\r\n    explanation:\r\n      \"Getter methods improve the maintainability of Java code by enforcing encapsulation, which keeps the internal state of an object hidden from other classes. This allows changes to the internal implementation without affecting external code that relies on the getter methods. Additionally, getter methods provide a consistent interface for data access, making it easier to understand and modify the code.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What are some potential downsides of using getter methods excessively in Java?\",\r\n    answer:\r\n      \"Increased code complexity, potential performance overhead, and violation of encapsulation.\",\r\n    explanation:\r\n      \"Excessive use of getter methods in Java can lead to increased code complexity, as more methods need to be maintained and understood. It may also introduce potential performance overhead, particularly if getter methods perform complex calculations or resource-intensive tasks. Moreover, using getter methods to expose too much of an object's internal state can violate encapsulation, making it more difficult to change the internal implementation without affecting external code.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do getter methods promote the principle of data hiding in Java?\",\r\n    answer: \"By providing controlled access to private instance variables.\",\r\n    explanation:\r\n      \"Data hiding is a programming technique that restricts direct access to an object's internal state, exposing only necessary data through well-defined methods. Getter methods promote data hiding in Java by providing controlled access to private instance variables, keeping their values hidden from external classes. This ensures encapsulation and prevents unintended modifications to the object's internal state.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What are some best practices when implementing getter methods in Java?\",\r\n    answer:\r\n      \"Use appropriate naming conventions, maintain encapsulation, avoid side effects, and ensure thread safety.\",\r\n    explanation:\r\n      'When implementing getter methods in Java, it is important to follow best practices, such as using appropriate naming conventions (e.g., \"get\" or \"is\" prefix), maintaining encapsulation by keeping instance variables private, avoiding side effects (i.e., getter methods should not modify the object\\'s state), and ensuring thread safety when dealing with shared resources in multi-threaded environments.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How can you use Java interfaces to define getter methods?\",\r\n    answer:\r\n      \"Declare getter methods in the interface, and implement them in the implementing classes.\",\r\n    explanation:\r\n      \"Java interfaces can be used to define getter methods by declaring the methods in the interface, without providing an implementation. Classes that implement the interface are then required to provide an implementation for these getter methods, ensuring a consistent contract for data access across multiple classes. This can be particularly useful when working with polymorphism and designing flexible, extensible systems.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do Java getter methods interact with inheritance and method overriding?\",\r\n    answer:\r\n      \"Subclasses can inherit or override getter methods from their parent class.\",\r\n    explanation:\r\n      \"In Java, getter methods interact with inheritance and method overriding like any other instance method. Subclasses can inherit getter methods from their parent class and use them directly, or they can override the getter methods to provide a different implementation specific to the subclass. This allows for greater flexibility and customization of behavior in derived classes while preserving the consistency of the data access interface.\",\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default getters;\r\n","const setters = [\r\n  {\r\n    question: \"What is the purpose of setter methods in Java?\",\r\n    answer: \"To modify the value of an instance variable.\",\r\n    explanation:\r\n      \"Setter methods in Java are used to set or modify the value of an instance variable in a controlled manner. This ensures that the object's internal state can be managed and manipulated without directly exposing the instance variables to external classes, promoting encapsulation and maintainability.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do setter methods contribute to the principle of encapsulation in Java?\",\r\n    answer: \"By controlling access to instance variables.\",\r\n    explanation:\r\n      \"Setter methods contribute to encapsulation in Java by providing controlled access to the instance variables of a class. This allows the class to manage and manipulate its internal state without directly exposing the instance variables to external classes. As a result, encapsulation is maintained, and the internal implementation can be changed without affecting other parts of the code that rely on the setter methods.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How can setter methods help in maintaining data consistency and validation?\",\r\n    answer:\r\n      \"By checking and enforcing constraints before modifying instance variables.\",\r\n    explanation:\r\n      \"Setter methods can help maintain data consistency and validation by incorporating checks and constraints before modifying the instance variables. This allows the class to enforce certain conditions or rules on the values being set, ensuring that the object remains in a consistent and valid state throughout its lifetime.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is a simple example of a setter method for an instance variable in Java?\",\r\n    answer:\r\n      \"public class MyClass { private int value; public void setValue(int value) { this.value = value; } }\",\r\n    explanation:\r\n      'In this example, a class named \"MyClass\" has a private instance variable \"value\" of type int. A setter method \"setValue(int value)\" is defined to set the value of the instance variable. The method uses the \"this\" keyword to refer to the current instance of the class and assigns the provided \"value\" to the instance variable \"value\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the naming convention for setter methods in Java?\",\r\n    answer: 'Use the \"set\" prefix followed by the capitalized variable name.',\r\n    explanation:\r\n      'In Java, the naming convention for setter methods is to use the \"set\" prefix, followed by the capitalized name of the instance variable being modified. For example, if the instance variable is named \"value\", the corresponding setter method should be named \"setValue\". This convention helps improve code readability and consistency across projects.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Why should setter methods be used instead of directly modifying instance variables in Java?\",\r\n    answer:\r\n      \"To maintain encapsulation, enable validation, and improve maintainability.\",\r\n    explanation:\r\n      \"Setter methods should be used instead of directly modifying instance variables in Java for several reasons. Firstly, they maintain encapsulation by hiding the internal state of an object and controlling access to instance variables. Secondly, they enable validation and consistency checks to be performed before modifying the instance variables. Finally, they improve maintainability by allowing changes to the internal implementation without affecting external code that relies on the setter methods.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How can setter methods be used to create write-only properties in Java?\",\r\n    answer:\r\n      \"By providing a setter method without a corresponding getter method.\",\r\n    explanation:\r\n      \"In Java, write-only properties can be created by providing a setter method for an instance variable without a corresponding getter method. This allows the value of the instance variable to be modified using the setter method but prevents external access to the current value. This can be useful for hiding sensitive data or enforcing specific behaviors when modifying an object's state.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do setter methods relate to the concept of separation of concerns in Java?\",\r\n    answer: \"By separating data modification from data representation.\",\r\n    explanation:\r\n      \"Setter methods in Java help achieve separation of concerns by separating data modification (setting the value of an instance variable) from data representation (how the instance variable is stored and managed within the class). This improves code maintainability and allows for easier updates to the internal implementation without affecting external code that relies on the setter methods.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you explain the role of the 'this' keyword in Java setter methods?\",\r\n    answer:\r\n      \"To refer to the current instance of the class and avoid naming conflicts.\",\r\n    explanation:\r\n      'In Java setter methods, the \"this\" keyword is used to refer to the current instance of the class. It helps to differentiate between instance variables and method parameters that share the same name, avoiding naming conflicts. By using \"this\", you can explicitly indicate that you are modifying the instance variable rather than the method parameter.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How can you use setter methods to implement lazy initialization in Java?\",\r\n    answer: \"Setter methods are not typically used for lazy initialization.\",\r\n    explanation:\r\n      \"Setter methods are generally not used to implement lazy initialization in Java. Lazy initialization is a technique where an object is created or a resource is allocated only when it is needed. This is typically achieved using getter methods, which can initialize the instance variable when it is first accessed. Setter methods, on the other hand, are used to modify the value of an instance variable after the object has been initialized.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you provide an example of using a setter method to enforce validation on an instance variable in Java?\",\r\n    answer:\r\n      \"public class MyClass { private int value; public void setValue(int value) { if (value >= 0) { this.value = value; } } }\",\r\n    explanation:\r\n      'In this example, a class named \"MyClass\" has a private instance variable \"value\" of type int. A setter method \"setValue(int value)\" is defined to set the value of the instance variable. The method includes a validation check to ensure that the provided \"value\" is greater than or equal to zero. If the validation check passes, the instance variable \"value\" is assigned the provided \"value\" using the \"this\" keyword.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How does the use of setter methods improve the maintainability of Java code?\",\r\n    answer:\r\n      \"By enforcing encapsulation, enabling validation, and providing a consistent interface for data modification.\",\r\n    explanation:\r\n      \"Setter methods improve the maintainability of Java code by enforcing encapsulation, which keeps the internal state of an object hidden from other classes. This allows changes to the internal implementation without affecting external code that relies on the setter methods. Additionally, setter methods enable validation and consistency checks to be performed before modifying instance variables, ensuring the object remains in a consistent state. Finally, setter methods provide a consistent interface for data modification, making it easier to understand and modify the code.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What are some potential downsides of using setter methods excessively in Java?\",\r\n    answer:\r\n      \"Increased complexity, reduced immutability, and potential for unintended side effects.\",\r\n    explanation:\r\n      \"Excessive use of setter methods in Java can have several downsides, including increased complexity due to the additional methods required to manage an object's state, reduced immutability as more instance variables become modifiable, and potential for unintended side effects if proper validation and checks are not in place. It is important to strike a balance between providing necessary setter methods for controlling access to instance variables and maintaining simplicity and immutability in the code.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do setter methods promote the principle of data hiding in Java?\",\r\n    answer: \"By controlling access and modification of instance variables.\",\r\n    explanation:\r\n      \"Setter methods promote the principle of data hiding in Java by controlling access and modification of instance variables. They ensure that instance variables are not directly exposed to external classes, keeping their values hidden and preventing unintended modifications. By providing a consistent interface for modifying instance variables, setter methods enable better encapsulation and maintainability in the code.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What are some best practices when implementing setter methods in Java?\",\r\n    answer:\r\n      \"Use appropriate naming conventions, maintain encapsulation, perform validation, and avoid side effects.\",\r\n    explanation:\r\n      'When implementing setter methods in Java, it is important to follow best practices, such as using appropriate naming conventions (e.g., \"set\" prefix), maintaining encapsulation by keeping instance variables private, performing validation and consistency checks before modifying instance variables, and avoiding side effects (i.e., setter methods should not cause unintended changes to the object\\'s state or other parts of the system).',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How can you use Java interfaces to define setter methods?\",\r\n    answer:\r\n      \"Declare setter methods in the interface, and implement them in the implementing classes.\",\r\n    explanation:\r\n      \"Java interfaces can be used to define setter methods by declaring the methods in the interface, without providing an implementation. Classes that implement the interface are then required to provide an implementation for these setter methods, ensuring a consistent contract for data modification across multiple classes. This can be particularly useful when working with polymorphism and designing flexible, extensible systems.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do Java setter methods interact with inheritance and method overriding?\",\r\n    answer:\r\n      \"Inherited methods can be overridden, and the super keyword can be used to call the superclass method.\",\r\n    explanation:\r\n      'In Java, setter methods can be inherited from a superclass just like any other methods. When a subclass extends a superclass, it inherits the setter methods defined in the superclass. If needed, the subclass can override these inherited setter methods by providing its own implementation with the same method signature. To call the superclass\\'s implementation of the setter method within the overridden method, the \"super\" keyword can be used.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between accessor methods and setter methods in Java?\",\r\n    answer:\r\n      \"Accessor methods retrieve values, while setter methods modify values.\",\r\n    explanation:\r\n      \"In Java, accessor methods (also known as getter methods) are used to retrieve the value of an instance variable, while setter methods are used to modify the value of an instance variable. Both types of methods contribute to encapsulation by providing controlled access to instance variables, but they serve different purposes: accessor methods provide read access, and setter methods provide write access.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How can you use setter methods to enforce immutability in certain aspects of a Java object?\",\r\n    answer:\r\n      \"By creating a setter method with limited functionality or no implementation.\",\r\n    explanation:\r\n      \"In Java, you can use setter methods to enforce immutability in certain aspects of an object by creating a setter method with limited functionality or no implementation at all. For example, if you want to make a property read-only, you can provide a getter method without a corresponding setter method. Alternatively, you can create a setter method with an empty body or limited functionality to prevent external modification of the instance variable, effectively enforcing immutability for that aspect of the object.\",\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default setters;\r\n","const thisKeyword = [\r\n  {\r\n    question: \"What is the 'this' keyword in Java?\",\r\n    answer: \"A reference to the current instance of the class.\",\r\n    explanation:\r\n      'In Java, the \"this\" keyword is a reference to the current instance of the class. It is used within class methods to refer to instance variables or methods of the current object, helping to differentiate between instance variables and method parameters with the same name and improving code readability.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What are the main uses of the 'this' keyword in Java?\",\r\n    answer:\r\n      \"Referring to instance variables, calling instance methods, and invoking constructors.\",\r\n    explanation:\r\n      'The main uses of the \"this\" keyword in Java are: 1) referring to instance variables in class methods, 2) calling instance methods within another instance method, and 3) invoking other constructors within a constructor of the same class. The \"this\" keyword helps to avoid naming conflicts, improve code readability, and facilitate constructor chaining.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How can the 'this' keyword be used to refer to instance variables in a class method?\",\r\n    answer: 'By using \"this\" followed by a dot and the instance variable name.',\r\n    explanation:\r\n      'In Java, the \"this\" keyword can be used to refer to instance variables in a class method by using \"this\" followed by a dot (.) and the instance variable name. This helps to differentiate between instance variables and local variables or method parameters with the same name, improving code readability and avoiding naming conflicts.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How can the 'this' keyword be used to call an instance method within another instance method?\",\r\n    answer: 'By using \"this\" followed by a dot and the method name.',\r\n    explanation:\r\n      'In Java, the \"this\" keyword can be used to call an instance method within another instance method by using \"this\" followed by a dot (.) and the method name, followed by the appropriate method parameters enclosed in parentheses. This makes it clear that you are calling a method of the current object and improves code readability.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can the 'this' keyword be used in a class that does not extend any other class?\",\r\n    answer: \"Yes.\",\r\n    explanation:\r\n      'The \"this\" keyword can be used in any class, regardless of whether it extends another class or not. The \"this\" keyword is a reference to the current instance of the class and can be used to access instance variables or methods within the class itself.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How does the 'this' keyword interact with method overloading in Java?\",\r\n    answer:\r\n      \"It can be used to call overloaded methods based on the appropriate method signature.\",\r\n    explanation:\r\n      'The \"this\" keyword interacts with method overloading in Java by allowing you to call overloaded methods based on the appropriate method signature. When you use the \"this\" keyword followed by a dot (.) and an overloaded method name with the correct parameters, the Java compiler will automatically select the correct method implementation based on the method signature.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can the 'this' keyword be used to refer to a method's local variables in Java?\",\r\n    answer: \"No.\",\r\n    explanation:\r\n      'In Java, the \"this\" keyword cannot be used to refer to a method\\'s local variables. The \"this\" keyword is used to reference instance variables and methods of the current object, while local variables are specific to the method they are declared in and are not part of the object\\'s instance variables. To refer to a method\\'s local variables, simply use the variable name directly.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Is it possible to assign a new value to the 'this' keyword in Java?\",\r\n    answer: \"No.\",\r\n    explanation:\r\n      'In Java, the \"this\" keyword is a final reference to the current object, and its value cannot be changed. The \"this\" keyword always refers to the instance of the class it is used in, and attempting to assign a new value to \"this\" would result in a compilation error.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How does the 'this' keyword work with inner classes in Java?\",\r\n    answer:\r\n      'It refers to the current instance of the inner class; outer class instance can be accessed using \"OuterClassName.this\".',\r\n    explanation:\r\n      'In Java, when the \"this\" keyword is used inside an inner class, it refers to the current instance of the inner class. To access the instance of the outer class from within the inner class, you can use the \"OuterClassName.this\" notation, where \"OuterClassName\" is the name of the outer class.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How does the 'this' keyword interact with anonymous inner classes in Java?\",\r\n    answer: \"It refers to the current instance of the anonymous inner class.\",\r\n    explanation:\r\n      'In Java, when the \"this\" keyword is used inside an anonymous inner class, it refers to the current instance of the anonymous inner class. To access the instance of the enclosing class from within the anonymous inner class, you can use the \"EnclosingClassName.this\" notation, where \"EnclosingClassName\" is the name of the enclosing class.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is an example of using the 'this' keyword to differentiate between instance variables and method parameters with the same name?\",\r\n    answer: \"class Example { int x; void setX(int x) { this.x = x; } }\",\r\n    explanation:\r\n      'In this example, the \"this\" keyword is used to differentiate between the instance variable \"x\" and the method parameter \"x\" inside the \"setX\" method. By using \"this.x = x;\", we assign the value of the method parameter \"x\" to the instance variable \"x\" of the current object.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Is the 'this' keyword mandatory when referring to an instance variable within a non-static method?\",\r\n    answer: \"No.\",\r\n    explanation:\r\n      'In Java, the \"this\" keyword is not mandatory when referring to an instance variable within a non-static method. However, using \"this\" can help to differentiate between instance variables and local variables or method parameters with the same name, improving code readability and avoiding potential naming conflicts.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How does the 'this' keyword interact with inheritance in Java?\",\r\n    answer:\r\n      \"It refers to the current instance, including inherited instance variables and methods.\",\r\n    explanation:\r\n      'In Java, the \"this\" keyword interacts with inheritance by referring to the current instance of the class, including any inherited instance variables and methods from the parent class. When using \"this\" within a subclass, you can access the instance variables and methods defined in the parent class, as well as those specific to the subclass.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the relationship between the 'this' keyword and the concept of polymorphism in Java?\",\r\n    answer:\r\n      \"It allows calling the correct overridden method implementation based on the current object's class.\",\r\n    explanation:\r\n      'The relationship between the \"this\" keyword and the concept of polymorphism in Java is that the \"this\" keyword allows you to call the correct overridden method implementation based on the current object\\'s class. When a method is overridden in a subclass, using the \"this\" keyword within the subclass to call the method will invoke the overridden version of the method, ensuring that the correct implementation is executed depending on the runtime type of the object.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is an example of using the 'this' keyword to call a constructor with different parameters?\",\r\n    answer:\r\n      \"class Example { int x, y; Example(int x) { this(x, 0); } Example(int x, int y) { this.x = x; this.y = y; } }\",\r\n    explanation:\r\n      'In this example, we have a class \"Example\" with two constructors. The first constructor takes a single parameter \"x\" and calls the second constructor using \"this(x, 0);\", passing \"x\" and a default value of \"0\" for \"y\". The second constructor initializes the instance variables \"x\" and \"y\" with the provided values. This demonstrates using the \"this\" keyword to call a constructor with different parameters.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How can the 'this' keyword be used to chain method calls on the same object?\",\r\n    answer:\r\n      'By returning \"this\" from methods and using it to call other methods.',\r\n    explanation:\r\n      'In Java, the \"this\" keyword can be used to chain method calls on the same object by returning \"this\" from methods and using it to call other methods. This is known as method chaining and is often used in builder or fluent-style APIs. When a method returns \"this\", it allows you to call another method on the same object in a single statement, making the code more concise and readable.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can the 'this' keyword be used with abstract classes in Java?\",\r\n    answer: \"Yes.\",\r\n    explanation:\r\n      'The \"this\" keyword can be used with abstract classes in Java. Even though an abstract class cannot be instantiated directly, it can still contain instance variables and non-abstract methods. The \"this\" keyword can be used within these non-abstract methods to refer to the current instance of the class and access its instance variables and methods.',\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default thisKeyword;\r\n","const wrapperClasses = [\r\n  {\r\n    question: \"What is the purpose of wrapper classes in Java?\",\r\n    answer:\r\n      \"To enable the use of primitive values as objects and provide utility methods for working with them.\",\r\n    explanation:\r\n      \"Wrapper classes in Java serve the purpose of allowing primitive values to be treated as objects. They correspond to each primitive data type and provide utility methods for working with these values. Using wrapper classes makes it possible to use primitive values in situations where objects are required, such as with Java collections and generics.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do wrapper classes relate to the concept of autoboxing in Java?\",\r\n    answer:\r\n      \"Autoboxing is the automatic conversion of primitive values to their corresponding wrapper class instances.\",\r\n    explanation:\r\n      \"Wrapper classes are directly related to the concept of autoboxing in Java. Autoboxing is the process where the Java compiler automatically converts a primitive value to an instance of its corresponding wrapper class when an object is required. This simplifies the process of working with primitive values in situations where objects are needed, making the code more concise and easier to read.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do wrapper classes relate to the concept of unboxing in Java?\",\r\n    answer:\r\n      \"Unboxing is the automatic conversion of wrapper class instances to their corresponding primitive values.\",\r\n    explanation:\r\n      \"Wrapper classes are related to the concept of unboxing in Java, which is the process where the Java compiler automatically converts an instance of a wrapper class to its corresponding primitive value when a primitive value is required. This allows you to seamlessly use wrapper class instances in situations where primitive values are needed, without having to manually convert between the two.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you provide a list of the wrapper classes in Java for each primitive data type?\",\r\n    answer: \"Boolean, Character, Byte, Short, Integer, Long, Float, Double.\",\r\n    explanation:\r\n      \"In Java, there is a wrapper class for each primitive data type. These wrapper classes are: Boolean (for boolean), Character (for char), Byte (for byte), Short (for short), Integer (for int), Long (for long), Float (for float), and Double (for double). Each wrapper class provides methods and functionality specific to its corresponding primitive data type.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do wrapper classes handle null values?\",\r\n    answer: \"They can store and handle null values, unlike primitive types.\",\r\n    explanation:\r\n      \"Wrapper classes in Java can handle null values, as they are objects. This is different from primitive data types, which cannot store null values. When a wrapper class instance is set to null, it means that it does not hold any value. This can be useful in situations where you need to represent the absence of a value, such as when working with collections or optional values.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you provide an example of using a wrapper class to parse a primitive value from a string?\",\r\n    answer: 'Integer.parseInt(\"123\");',\r\n    explanation:\r\n      'Wrapper classes in Java provide utility methods for parsing primitive values from strings. For example, to parse an integer value from a string, you can use the static parseInt method of the Integer wrapper class, like this: Integer.parseInt(\"123\"); This method will convert the string \"123\" to the primitive int value 123.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do wrapper classes handle number formatting and parsing?\",\r\n    answer: \"They provide utility methods for formatting and parsing numbers.\",\r\n    explanation:\r\n      \"Wrapper classes in Java, such as Integer, Long, Float, and Double, provide utility methods for formatting and parsing numbers. These methods allow you to convert between strings and numeric values in various formats, such as parsing integers in different numeric bases or formatting floating-point numbers with a specific number of decimal places. These methods make it easy to work with numeric data in different representations and formats.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you provide an example of using a wrapper class to convert between different numeric bases?\",\r\n    answer: \"Integer.toString(255, 16);\",\r\n    explanation:\r\n      'Wrapper classes in Java provide methods for converting between different numeric bases. For example, to convert an integer value to its hexadecimal representation, you can use the static toString method of the Integer wrapper class, like this: Integer.toString(255, 16); This method will convert the integer value 255 to the hexadecimal string \"FF\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you create an instance of a wrapper class from a primitive value?\",\r\n    answer: \"By using the constructor or valueOf method.\",\r\n    explanation:\r\n      \"To create an instance of a wrapper class from a primitive value, you can use the wrapper class constructor or the static valueOf method. For example, to create an instance of the Integer wrapper class from the primitive int value 42, you can do either: Integer myInt = new Integer(42); or Integer myInt = Integer.valueOf(42); The latter is preferred, as it is more efficient and allows caching of frequently used values.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you convert a wrapper class instance back to a primitive value?\",\r\n    answer: \"By using the corresponding primitive value getter method.\",\r\n    explanation:\r\n      \"To convert a wrapper class instance back to a primitive value, you can use the corresponding primitive value getter method provided by the wrapper class. For example, to convert an instance of the Integer wrapper class to a primitive int value, you can use the intValue method: Integer myInt = Integer.valueOf(42); int myPrimitiveInt = myInt.intValue();\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What are some common utility methods provided by wrapper classes in Java?\",\r\n    answer: \"valueOf, parse methods, toString, and compareTo.\",\r\n    explanation:\r\n      \"Wrapper classes in Java provide several common utility methods for working with primitive values. Some of these methods include: valueOf (for creating wrapper class instances from primitive values), parse methods (e.g., Integer.parseInt, Double.parseDouble) for parsing primitive values from strings, toString (for converting wrapper class instances to strings), and compareTo (for comparing wrapper class instances). Each wrapper class also provides additional utility methods specific to its corresponding primitive data type.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do wrapper classes handle the storage of primitive values internally?\",\r\n    answer: \"By storing the primitive value in a private instance variable.\",\r\n    explanation:\r\n      'Wrapper classes in Java handle the storage of primitive values internally by using a private instance variable that holds the corresponding primitive value. For example, the Integer wrapper class stores an int value in a private instance variable called \"value\". This ensures that the encapsulation principle is maintained and the internal storage of the primitive value is hidden from the users of the wrapper class.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you provide an example of using a wrapper class to perform arithmetic operations on primitive values?\",\r\n    answer:\r\n      \"Integer a = Integer.valueOf(10); Integer b = Integer.valueOf(20); int sum = a.intValue() + b.intValue();\",\r\n    explanation:\r\n      \"Although it is more common to use primitive data types directly for arithmetic operations, wrapper classes can also be used in such cases. For example, to perform addition on two Integer objects, you can do the following: Integer a = Integer.valueOf(10); Integer b = Integer.valueOf(20); int sum = a.intValue() + b.intValue(); This converts the Integer objects back to primitive int values, performs the addition, and stores the result in a primitive int variable.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the performance impact of using wrapper classes compared to using primitive data types directly?\",\r\n    answer:\r\n      \"Wrapper classes have higher memory overhead and slower performance.\",\r\n    explanation:\r\n      \"Using wrapper classes instead of primitive data types can have a performance impact on your Java program. Wrapper classes have a higher memory overhead compared to primitive data types, as they are objects and require additional storage for object metadata. Furthermore, operations on wrapper class instances can be slower than operations on primitive data types, due to the need for boxing and unboxing. Therefore, it is generally recommended to use primitive data types directly when performance is a concern.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do wrapper classes handle equality comparisons between instances?\",\r\n    answer:\r\n      'Using the equals method for value comparison and \"==\" for reference comparison.',\r\n    explanation:\r\n      'When comparing wrapper class instances for equality, it is important to use the appropriate method. The \"==\" operator checks for reference equality, meaning it will only return true if both instances refer to the same object in memory. To compare the actual values of the wrapper class instances, you should use the equals method: Integer a = Integer.valueOf(10); Integer b = Integer.valueOf(10); boolean areEqual = a.equals(b); // true',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the relationship between wrapper classes and the concept of immutability in Java?\",\r\n    answer: \"Wrapper classes are immutable.\",\r\n    explanation:\r\n      \"Wrapper classes in Java are immutable, which means that their internal state cannot be changed after they are created. When you create a wrapper class instance with a specific value, that value cannot be modified. Instead, if you need to perform operations that would result in a new value, you would create a new instance of the wrapper class with the new value. Immutability provides benefits such as improved security, consistency, and ease of reasoning about the behavior of the code.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do wrapper classes interact with inheritance and polymorphism in Java?\",\r\n    answer:\r\n      \"Wrapper classes are final and inherit from the Number and Character classes.\",\r\n    explanation:\r\n      \"In Java, all wrapper classes (except for the Character class) inherit from the abstract Number class, which provides a common set of methods for numeric conversions. The Character class, on the other hand, has its own hierarchy. Wrapper classes are also declared as final, which means they cannot be extended or subclassed. This design ensures the immutability and consistent behavior of wrapper classes. However, polymorphism can still be achieved through the use of interfaces or by working with the superclass methods in the case of the Number class.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What are some best practices when working with wrapper classes in Java?\",\r\n    answer:\r\n      \"Use valueOf, prefer primitives for performance, use equals for value comparison, and use appropriate utility methods.\",\r\n    explanation:\r\n      'When working with wrapper classes in Java, consider the following best practices: 1. Use the valueOf method to create wrapper class instances, as it is more efficient and can cache frequently used values. 2. Prefer using primitive data types directly when performance is a concern, as they have lower memory overhead and faster operation times. 3. Use the equals method for value comparisons between wrapper class instances, as the \"==\" operator checks for reference equality. 4. Utilize the appropriate utility methods provided by wrapper classes, such as parsing, formatting, and numeric conversions.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Are there any potential pitfalls or limitations when using wrapper classes in Java?\",\r\n    answer:\r\n      \"Performance overhead, null pointer exceptions, and reference equality confusion.\",\r\n    explanation:\r\n      'There are some potential pitfalls and limitations when using wrapper classes in Java: 1. Performance overhead: Wrapper classes have higher memory overhead and slower operation times compared to primitive data types. 2. Null pointer exceptions: Wrapper classes can hold null values, unlike primitive data types. Care must be taken to avoid null pointer exceptions when using wrapper classes. 3. Reference equality confusion: Using the \"==\" operator for wrapper class instances checks for reference equality, not value equality. This can lead to unexpected results if not properly understood. It is important to use the equals method for value comparisons.',\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default wrapperClasses;\r\n","const Strings2 = [\r\n  {\r\n    question: \"What is string concatenation in Java?\",\r\n    answer: \"The process of joining two or more strings together.\",\r\n    explanation:\r\n      \"In Java, string concatenation refers to the process of joining two or more strings together to form a single, combined string. This can be achieved using the + operator, the concat method, or by using classes such as StringBuilder or StringBuffer.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How is the + operator used for string concatenation in Java?\",\r\n    answer: \"By placing the + operator between two strings.\",\r\n    explanation:\r\n      \"In Java, the + operator can be used for string concatenation by placing it between two strings or a string and another data type. When the + operator is used with strings, Java automatically converts any non-string data type to a string representation and concatenates the resulting strings.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you provide a simple example of string concatenation in Java?\",\r\n    answer: 'String greeting = \"Hello, \" + \"World!\";',\r\n    explanation:\r\n      'Here is a simple example of string concatenation using the + operator in Java: String greeting = \"Hello, \" + \"World!\"; This will concatenate the two string literals \"Hello, \" and \"World!\" to create the combined string \"Hello, World!\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What happens when you concatenate a string with a primitive data type in Java?\",\r\n    answer: \"The primitive data type is automatically converted to a string.\",\r\n    explanation:\r\n      'When concatenating a string with a primitive data type in Java, the primitive data type is automatically converted to its string representation. The resulting strings are then concatenated together. For example, if you have the following code: int num = 42; String result = \"The answer is \" + num; The integer value 42 will be converted to the string \"42\", and the resulting concatenated string will be \"The answer is 42\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between using the + operator and the concat method for string concatenation in Java?\",\r\n    answer:\r\n      \"The + operator is more versatile, while the concat method only works with strings.\",\r\n    explanation:\r\n      \"The main difference between using the + operator and the concat method for string concatenation in Java is that the + operator is more versatile and can be used with a mix of strings and other data types, while the concat method can only be used with strings. When using the concat method, both the calling and the argument strings must be non-null, and the resulting concatenated string is a new string object. The + operator, on the other hand, can handle null values and automatically converts non-string data types to their string representation before concatenating.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can you concatenate string literals at compile time in Java?\",\r\n    answer:\r\n      \"Yes, the Java compiler optimizes and concatenates string literals at compile time.\",\r\n    explanation:\r\n      \"Yes, in Java, string literals can be concatenated at compile time. The Java compiler optimizes the concatenation of string literals by evaluating and concatenating them during the compilation process. As a result, the concatenated string is treated as a single string literal in the generated bytecode, which can improve performance and reduce the number of string objects created at runtime.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What are the performance implications of using the + operator for string concatenation in Java?\",\r\n    answer:\r\n      \"It can be inefficient, especially in loops, due to the creation of new string objects.\",\r\n    explanation:\r\n      \"Using the + operator for string concatenation in Java can have performance implications, especially in loops or when concatenating a large number of strings. Since strings are immutable in Java, each concatenation operation with the + operator creates a new string object, which can lead to increased memory usage and slower performance. In cases where performance is a concern, it is generally recommended to use classes like StringBuilder or StringBuffer, which allow for more efficient string manipulation without creating multiple new string objects.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How does string concatenation with the + operator affect the immutability of strings in Java?\",\r\n    answer:\r\n      \"It creates new string objects, maintaining the immutability of the original strings.\",\r\n    explanation:\r\n      \"The immutability of strings in Java means that once a string object is created, its content cannot be changed. When you use the + operator for string concatenation, a new string object is created with the combined content of the original strings, leaving the original strings unchanged. This behavior preserves the immutability of the original strings while still allowing you to create a new combined string.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the StringBuilder class in Java and how is it used for string concatenation?\",\r\n    answer:\r\n      \"A mutable class for building strings, using methods like append and insert.\",\r\n    explanation:\r\n      \"The StringBuilder class in Java is a mutable class designed for efficiently building and manipulating strings. Unlike using the + operator for string concatenation, which creates new string objects, StringBuilder allows you to modify the content of the string without creating new objects. It provides methods like append, insert, and delete to modify the content of the StringBuilder, making it a more efficient option for concatenating or manipulating strings, especially in performance-critical situations.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is an example of using StringBuilder for string concatenation in Java?\",\r\n    answer:\r\n      'StringBuilder sb = new StringBuilder(\"Hello, \"); sb.append(\"World!\");',\r\n    explanation:\r\n      'Here is an example of using StringBuilder for string concatenation in Java: StringBuilder sb = new StringBuilder(\"Hello, \"); sb.append(\"World!\"); This code creates a new StringBuilder object with the initial content \"Hello, \" and then appends the string \"World!\" to it. The resulting StringBuilder object contains the concatenated string \"Hello, World!\". To obtain the final string, you can call the toString() method on the StringBuilder object: String result = sb.toString();',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the StringBuffer class in Java and how is it used for string concatenation?\",\r\n    answer:\r\n      \"Similar to StringBuilder, but thread-safe, using methods like append and insert.\",\r\n    explanation:\r\n      \"The StringBuffer class in Java is similar to StringBuilder, as it is a mutable class designed for efficiently building and manipulating strings. The primary difference between StringBuffer and StringBuilder is that StringBuffer is thread-safe, meaning it can be safely used in multi-threaded environments. Like StringBuilder, StringBuffer provides methods like append, insert, and delete to modify the content of the StringBuffer, making it a more efficient option for concatenating or manipulating strings. However, the thread-safety of StringBuffer can come at a slight performance cost compared to StringBuilder, so it is generally recommended to use StringBuilder in single-threaded scenarios and only use StringBuffer when thread-safety is required.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do StringBuilder and StringBuffer differ in terms of thread safety and performance?\",\r\n    answer:\r\n      \"StringBuilder is not thread-safe but faster, while StringBuffer is thread-safe but slower.\",\r\n    explanation:\r\n      \"StringBuilder and StringBuffer are both mutable classes used for efficiently building and manipulating strings. The main difference between them is their thread safety and performance. StringBuilder is not thread-safe, which means it is not suitable for use in multi-threaded environments without external synchronization. However, this lack of thread safety makes it faster than StringBuffer. On the other hand, StringBuffer is thread-safe, which allows it to be safely used in multi-threaded environments. This thread safety comes at a slight performance cost, making StringBuffer slower than StringBuilder.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"When should you use StringBuilder over StringBuffer for string concatenation in Java?\",\r\n    answer:\r\n      \"Use StringBuilder in single-threaded scenarios and StringBuffer when thread safety is required.\",\r\n    explanation:\r\n      \"You should use StringBuilder for string concatenation in Java when you are working in a single-threaded environment or when thread safety is not a concern. StringBuilder offers better performance than StringBuffer because it does not have the overhead of thread safety. However, if you need to ensure that your string manipulation operations are thread-safe in a multi-threaded environment, you should use StringBuffer instead. Keep in mind that the performance difference between StringBuilder and StringBuffer is generally minimal, so it is more important to choose the appropriate class based on your specific needs regarding thread safety.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you provide an example of using the + operator with multiple string concatenation operations?\",\r\n    answer: 'String result = \"Hello, \" + \"World\" + \"!\";',\r\n    explanation:\r\n      'Here is an example of using the + operator with multiple string concatenation operations in Java: String result = \"Hello, \" + \"World\" + \"!\"; In this example, three string literals are concatenated together using the + operator. The result of this expression is a new string object containing the concatenated string \"Hello, World!\". The + operator is used twice in this example, first to concatenate \"Hello, \" and \"World\", and then to concatenate the result of that operation with \"!\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How does the Java compiler optimize string concatenation with the + operator?\",\r\n    answer:\r\n      \"It combines string literals at compile time and transforms multiple concatenations into a single StringBuilder.\",\r\n    explanation:\r\n      \"The Java compiler optimizes string concatenation with the + operator in two main ways. First, if the concatenation involves only string literals, the compiler will combine them into a single string literal at compile time. This means that the resulting string object will already be created at runtime, avoiding the need for additional concatenation operations. Second, when concatenating multiple strings or non-string values, the compiler will automatically transform the concatenation operation into a single StringBuilder operation. This helps to reduce the number of new string objects created during runtime and improves the performance of the string concatenation operation.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do escape sequences work in string concatenation in Java?\",\r\n    answer:\r\n      \"Escape sequences are processed before concatenation and result in the corresponding special characters.\",\r\n    explanation:\r\n      \"In Java, escape sequences are used to represent special characters within string literals. They start with a backslash () followed by one or more characters that represent the special character. When performing string concatenation with escape sequences, the escape sequences are processed and replaced with their corresponding special characters before the concatenation takes place. For example, when concatenating two strings with an escape sequence for a newline character (\\n), the resulting string will have a newline character between the concatenated parts.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What are some best practices for string concatenation in Java?\",\r\n    answer:\r\n      \"Use StringBuilder or StringBuffer for multiple concatenations, avoid + in loops, and consider compile-time concatenation for literals.\",\r\n    explanation:\r\n      \"Here are some best practices for string concatenation in Java: 1. Use StringBuilder or StringBuffer for multiple concatenations or when concatenating inside loops. This helps to improve performance by reducing the number of new string objects created. 2. Avoid using the + operator for string concatenation in loops, as this can lead to poor performance due to the creation of many temporary string objects. Instead, use StringBuilder or StringBuffer. 3. When concatenating string literals, consider using compile-time concatenation by placing the literals next to each other, as the compiler will combine them into a single string literal at compile time. This can help to reduce runtime overhead.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you use the + operator for string concatenation with null values in Java?\",\r\n    answer:\r\n      'Yes, the null value is converted to the string \"null\" during concatenation.',\r\n    explanation:\r\n      'In Java, you can use the + operator for string concatenation with null values. When a null value is concatenated with a string using the + operator, the null value is automatically converted to the string \"null\" before the concatenation takes place. For example, if you have a string variable with a null value and you concatenate it with another string, the result will be a new string containing the text \"null\" followed by the other string.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you concatenate strings with a specific delimiter in Java?\",\r\n    answer:\r\n      \"Use String.join(delimiter, elements) or a loop with StringBuilder and the delimiter.\",\r\n    explanation:\r\n      'In Java, you can concatenate strings with a specific delimiter using the static method String.join(delimiter, elements). This method takes a delimiter string and a sequence of elements (strings, arrays, or collections) as arguments and concatenates the elements using the delimiter. For example, you can concatenate a list of strings with a comma delimiter like this: String.join(\",\", listOfStrings); Alternatively, you can use a loop with a StringBuilder or StringBuffer, appending the delimiter between each element manually.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you provide an example of using the String.join method for string concatenation in Java?\",\r\n    answer: 'String result = String.join(\"-\", \"Java\", \"is\", \"fun\");',\r\n    explanation:\r\n      'The String.join method is a convenient way to concatenate a sequence of strings using a specific delimiter. Here is an example of using the String.join method to concatenate three strings with a hyphen (-) as a delimiter: String result = String.join(\"-\", \"Java\", \"is\", \"fun\"); The resulting string will be \"Java-is-fun\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you concatenate a collection of strings in Java?\",\r\n    answer:\r\n      \"Use String.join(delimiter, collection) or a loop with StringBuilder and the delimiter.\",\r\n    explanation:\r\n      'In Java, you can concatenate a collection of strings using the String.join(delimiter, collection) method or by using a loop with a StringBuilder or StringBuffer. The String.join method takes a delimiter string and a collection of strings as arguments and concatenates the strings using the delimiter. For example, you can concatenate a List of strings with a comma delimiter like this: String.join(\",\", listOfStrings); Alternatively, you can use a loop with a StringBuilder or StringBuffer, appending the delimiter between each element manually.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the performance difference between using the + operator and StringBuilder for string concatenation in a loop?\",\r\n    answer:\r\n      \"StringBuilder is more efficient because it avoids creating many temporary string objects.\",\r\n    explanation:\r\n      \"Using the + operator for string concatenation in a loop can lead to poor performance because it creates a new string object for each concatenation operation. In contrast, using a StringBuilder or StringBuffer for string concatenation in a loop is more efficient because it modifies the same StringBuilder or StringBuffer object instead of creating many temporary string objects. This results in better performance and reduced memory overhead, especially when concatenating a large number of strings.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can you concatenate strings with non-string objects in Java?\",\r\n    answer:\r\n      \"Yes, the non-string objects are automatically converted to strings using their toString() method.\",\r\n    explanation:\r\n      \"In Java, you can concatenate strings with non-string objects using the + operator. When a non-string object is concatenated with a string, the object is automatically converted to a string representation using its toString() method before the concatenation takes place. For example, if you have an integer variable and you concatenate it with a string, the result will be a new string containing the string representation of the integer followed by the other string.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you concatenate multiple strings using a single expression with the + operator in Java?\",\r\n    answer: \"Use the + operator between each pair of strings.\",\r\n    explanation:\r\n      'In Java, you can concatenate multiple strings using a single expression with the + operator by placing the operator between each pair of strings. For example, to concatenate three strings \"Java\", \"is\", and \"fun\", you can use the following expression: String result = \"Java\" + \"is\" + \"fun\"; The resulting string will be \"Javaisfun\". If you want to add spaces or other delimiters between the strings, you can include them as string literals within the expression, like this: String result = \"Java\" + \" \" + \"is\" + \" \" + \"fun\"; The resulting string will be \"Java is fun\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the String.format() method in Java?\",\r\n    answer:\r\n      \"A method for creating formatted strings using format specifiers and arguments.\",\r\n    explanation:\r\n      \"The String.format() method is a static method in the String class that allows you to create a formatted string using a format string containing format specifiers and a variable number of arguments. The method replaces the format specifiers with the corresponding arguments and returns the resulting formatted string.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is a basic example of using the String.format() method in Java?\",\r\n    answer: 'String formattedString = String.format(\"Hello, %s!\", \"John\");',\r\n    explanation:\r\n      'In this example, the format string contains a format specifier \"%s\" which is a placeholder for a string value. The second argument, \"John\", is the value that will replace the format specifier. The resulting formatted string is \"Hello, John!\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What are format specifiers in the context of the String.format() method?\",\r\n    answer:\r\n      \"Placeholders in a format string that define the data type and formatting options for the corresponding arguments.\",\r\n    explanation:\r\n      \"Format specifiers are special sequences in the format string that start with a percentage sign (%) and are followed by optional flags, field width, precision, and a conversion character. The conversion character indicates the type of data expected for the corresponding argument (e.g., 's' for strings, 'd' for integers, 'f' for floating-point numbers). The optional flags, field width, and precision can be used to control the formatting of the output.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use format specifiers to represent different data types in a formatted string?\",\r\n    answer:\r\n      \"By using appropriate conversion characters in the format specifier, such as 's' for strings, 'd' for integers, and 'f' for floating-point numbers.\",\r\n    explanation:\r\n      \"To represent different data types in a formatted string using format specifiers, you need to use the appropriate conversion character for each data type. For example, to represent a string, use '%s'; for an integer, use '%d'; and for a floating-point number, use '%f'. The String.format() method will then replace each format specifier with the corresponding argument value, properly formatted based on the conversion character.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you specify the width of a field using format specifiers in the String.format() method?\",\r\n    answer:\r\n      \"By including an integer value after the percentage sign (%) in the format specifier.\",\r\n    explanation:\r\n      \"To specify the width of a field using format specifiers in the String.format() method, include an integer value after the percentage sign (%) in the format specifier. This integer value represents the minimum width of the field. For example, '%5d' specifies an integer field with a minimum width of 5 characters.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you format a number with a specific number of decimal places using the String.format() method?\",\r\n    answer:\r\n      \"By using the 'f' conversion character and specifying the precision after a period (.) in the format specifier.\",\r\n    explanation:\r\n      \"To format a number with a specific number of decimal places using the String.format() method, use the 'f' conversion character in the format specifier and specify the precision (number of decimal places) after a period (.) in the format specifier. For example, '%.2f' will format a floating-point number with two decimal places.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you provide an example of formatting a date using the String.format() method in Java?\",\r\n    answer:\r\n      'String formattedDate = String.format(\"%1$tY-%1$tm-%1$td\", new Date());',\r\n    explanation:\r\n      \"In this example, the format string contains three format specifiers for formatting the year, month, and day of a date object. The 't' character in the format specifier indicates that it's a date/time conversion, and the 'Y', 'm', and 'd' characters represent the year, month, and day, respectively. The '1$' part of the format specifier refers to the first argument (the date object) being used for all three format specifiers. The resulting formatted string will be in the format 'YYYY-MM-DD'.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you format a string with left-justified or right-justified alignment using the String.format() method?\",\r\n    answer:\r\n      \"By using the '-' flag for left-justified alignment and specifying the field width in the format specifier.\",\r\n    explanation:\r\n      \"To format a string with left-justified alignment using the String.format() method, include the '-' flag immediately after the percentage sign (%) in the format specifier, followed by the field width. For example, '%-10s' will left-justify the string within a 10-character-wide field. By default, without the '-' flag, the field will be right-justified.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you format a string with zero-padding using the String.format() method in Java?\",\r\n    answer:\r\n      \"By using the '0' flag and specifying the field width in the format specifier.\",\r\n    explanation:\r\n      \"To format a string with zero-padding using the String.format() method, include the '0' flag immediately after the percentage sign (%) in the format specifier, followed by the field width. For example, '%05d' will format an integer with zero-padding to a width of 5 characters.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you provide an example of using the String.format() method with multiple format specifiers?\",\r\n    answer:\r\n      'String formatted = String.format(\"Name: %s, Age: %d, Height: %.2f\", name, age, height);',\r\n    explanation:\r\n      \"In this example, the format string contains three format specifiers for a name, age, and height. The '%s' specifier is for the name (a string), the '%d' specifier is for the age (an integer), and the '%.2f' specifier is for the height (a floating-point number with two decimal places). The resulting formatted string will be in the format 'Name: {name}, Age: {age}, Height: {height}'.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you escape a percentage sign (%) in a formatted string created with the String.format() method?\",\r\n    answer: \"By using two consecutive percentage signs (%%).\",\r\n    explanation:\r\n      \"To escape a percentage sign (%) in a formatted string created with the String.format() method, use two consecutive percentage signs (%%). For example, 'String formatted = String.format(\\\"Percentage: %d%%\\\", value);' will include a literal percentage sign in the resulting formatted string.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you format a number as a currency using the String.format() method in Java?\",\r\n    answer:\r\n      \"By using the 'f' conversion character and specifying the locale and currency symbols.\",\r\n    explanation:\r\n      \"To format a number as a currency using the String.format() method, use the 'f' conversion character in the format specifier, and specify the locale and currency symbols. For example, 'String formatted = String.format(Locale.US, \\\"$%.2f\\\", value);' will format the number as a US dollar currency value with two decimal places.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you provide an example of formatting a hexadecimal number using the String.format() method?\",\r\n    answer: 'String formatted = String.format(\"Hex: %x\", number);',\r\n    explanation:\r\n      \"In this example, the format string contains the '%x' format specifier, which represents a hexadecimal number. The 'number' variable is an integer that will be formatted as a hexadecimal number in the resulting string.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the relationship between the String.format() method and the java.util.Formatter class in Java?\",\r\n    answer:\r\n      \"The String.format() method is a convenience method that internally uses a java.util.Formatter instance.\",\r\n    explanation:\r\n      \"The java.util.Formatter class provides more control and options for formatting strings, while the String.format() method is a convenient shortcut for common formatting tasks. When using the String.format() method, a Formatter instance is created and used internally to format the string according to the provided format string and arguments.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you format a string with a specific locale using the String.format() method in Java?\",\r\n    answer: \"Yes, by providing a Locale object as the first argument.\",\r\n    explanation:\r\n      \"To format a string with a specific locale using the String.format() method, pass a java.util.Locale object as the first argument, followed by the format string and other arguments. For example, 'String formatted = String.format(Locale.FRANCE, \\\"%.2f\\\", number);' will format the floating-point number using the French locale.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you format a floating-point number in scientific notation using the String.format() method?\",\r\n    answer:\r\n      \"By using the 'e' or 'E' conversion character in the format specifier.\",\r\n    explanation:\r\n      \"To format a floating-point number in scientific notation using the String.format() method, use the 'e' (for lowercase output) or 'E' (for uppercase output) conversion character in the format specifier. For example, 'String formatted = String.format(\\\"%.2e\\\", number);' will format the floating-point number in scientific notation with two decimal places and a lowercase exponent.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you provide an example of formatting a string using the String.format() method with a combination of flags?\",\r\n    answer: 'String formatted = String.format(\"%+-10.2f\", number);',\r\n    explanation:\r\n      \"In this example, the format string contains the '%+-10.2f' format specifier, which represents a floating-point number with the following flags: '+' to include a sign (+ or -) for both positive and negative numbers, '-' for left-justification, and '10' to set a field width of 10 characters. The format specifier also includes '.2' to format the number with two decimal places.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you handle exceptions that may occur when using the String.format() method in Java?\",\r\n    answer: \"Use try-catch to handle exceptions like IllegalFormatException.\",\r\n    explanation:\r\n      \"When using the String.format() method, it's possible to encounter exceptions like java.util.IllegalFormatException if the format string is invalid or the arguments do not match the format specifiers. To handle these exceptions, use a try-catch block to catch the exception, and then handle it accordingly, such as logging the error or providing a default value.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What are some best practices when using the String.format() method for string formatting in Java?\",\r\n    answer:\r\n      \"Use clear format strings, handle exceptions, and consider performance implications.\",\r\n    explanation:\r\n      \"When using the String.format() method, it's important to create clear and understandable format strings, properly handle exceptions, and consider the performance implications of string formatting, especially in loops or performance-critical code. Additionally, be mindful of locale-specific formatting when working with internationalized applications.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Are there any potential limitations or pitfalls when using the String.format() method in Java?\",\r\n    answer:\r\n      \"Performance impact, exception handling, and locale-specific formatting.\",\r\n    explanation:\r\n      \"Some potential limitations and pitfalls when using the String.format() method in Java include the performance impact of string formatting, especially in performance-critical code, the need to properly handle exceptions like IllegalFormatException, and the need to be aware of locale-specific formatting when working with internationalized applications.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is a format specifier in Java?\",\r\n    answer:\r\n      \"A placeholder in a format string that defines the type of data to be inserted.\",\r\n    explanation:\r\n      \"Format specifiers are used in format strings with methods like String.format() to determine how the data should be formatted and inserted into the final output. They often start with a percentage sign (%) followed by a character that indicates the data type.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use format specifiers in the String.format() method in Java?\",\r\n    answer:\r\n      \"Include format specifiers in the format string and pass the corresponding arguments.\",\r\n    explanation:\r\n      \"In the format string, use format specifiers as placeholders for the data you want to insert. Then, pass the corresponding arguments to the String.format() method in the order they appear in the format string.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the format specifier for a string in Java?\",\r\n    answer: \"%s\",\r\n    explanation:\r\n      \"The %s format specifier is used to represent a string in a format string. When the format string is processed, the %s placeholder will be replaced with the corresponding string argument.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the format specifier for an integer in Java?\",\r\n    answer: \"%d\",\r\n    explanation:\r\n      \"The %d format specifier is used to represent an integer in a format string. When the format string is processed, the %d placeholder will be replaced with the corresponding integer argument.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use format specifiers to format floating-point numbers in Java?\",\r\n    answer:\r\n      \"Use %f for simple floating-point numbers, or use flags and width/precision specifiers for customization.\",\r\n    explanation:\r\n      \"The %f format specifier is used for representing floating-point numbers in a format string. You can customize the format by adding flags, width, or precision specifiers. For example, use %.2f to format a number with two decimal places.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the format specifier for a newline character in Java?\",\r\n    answer: \"%n\",\r\n    explanation:\r\n      \"The %n format specifier is used to represent a newline character in a format string. When the format string is processed, the %n placeholder will be replaced with the appropriate newline character(s) for the system.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you use format specifiers to format characters in Java?\",\r\n    answer: \"Use %c as the format specifier for characters.\",\r\n    explanation:\r\n      \"The %c format specifier is used to represent a character in a format string. When the format string is processed, the %c placeholder will be replaced with the corresponding character argument.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you provide an example of a format string with multiple format specifiers in Java?\",\r\n    answer:\r\n      'String.format(\"Name: %s, Age: %d, Height: %.2f\", name, age, height);',\r\n    explanation:\r\n      \"In this example, the format string contains three format specifiers: %s for a string (name), %d for an integer (age), and %.2f for a floating-point number with two decimal places (height). The corresponding arguments (name, age, height) are passed to the String.format() method.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you specify the field width of a formatted output using format specifiers in Java?\",\r\n    answer:\r\n      \"Add the field width as an integer between the % symbol and the type specifier.\",\r\n    explanation:\r\n      \"To specify the field width in a format string, add an integer between the % symbol and the type specifier. For example, use %5d to format an integer with a field width of 5 characters.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the format specifier for formatting a date or time in Java?\",\r\n    answer:\r\n      \"Use the java.time.format.DateTimeFormatter with a custom format string.\",\r\n    explanation:\r\n      \"Java does not have a specific format specifier for dates and times in String.format(). Instead, use the java.time.format.DateTimeFormatter class with a custom format string to format dates and times. You can then include the formatted date or time string in your output.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use format specifiers to format hexadecimal numbers in Java?\",\r\n    answer:\r\n      \"Use %x for lowercase hexadecimal and %X for uppercase hexadecimal.\",\r\n    explanation:\r\n      \"The %x and %X format specifiers are used to represent hexadecimal numbers in a format string. %x formats the number using lowercase letters (a-f), while %X formats the number using uppercase letters (A-F). For example, use %X to format an integer as an uppercase hexadecimal string.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the format specifier for formatting a boolean value in Java?\",\r\n    answer: \"Use %b or %B for boolean values.\",\r\n    explanation:\r\n      'The %b or %B format specifier is used to represent boolean values in a format string. When the format string is processed, the %b or %B placeholder will be replaced with the corresponding boolean argument, formatted as \"true\" or \"false\". The case of the output depends on whether %b (lowercase) or %B (uppercase) is used.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you escape the percentage sign (%) when using format specifiers in Java?\",\r\n    answer: \"Use two consecutive percentage signs (%%).\",\r\n    explanation:\r\n      \"To include a literal percentage sign in a format string, use two consecutive percentage signs (%%). When the format string is processed, the double percentage signs will be replaced with a single percentage sign.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the format specifier for formatting numbers in scientific notation in Java?\",\r\n    answer: \"Use %e or %E.\",\r\n    explanation:\r\n      \"The %e (for lowercase) and %E (for uppercase) format specifiers are used to represent numbers in scientific notation. When the format string is processed, the %e or %E placeholder will be replaced with the corresponding floating-point argument, formatted in scientific notation.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use format specifiers to format a number as currency in Java?\",\r\n    answer: \"Use the java.text.NumberFormat class.\",\r\n    explanation:\r\n      \"Java does not have a specific format specifier for currency in String.format(). Instead, use the java.text.NumberFormat class with the getCurrencyInstance() method to format numbers as currency. You can then include the formatted currency string in your output.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the relationship between format specifiers and the java.util.Formatter class in Java?\",\r\n    answer: \"java.util.Formatter uses format specifiers to format strings.\",\r\n    explanation:\r\n      \"The java.util.Formatter class in Java is responsible for parsing format strings and creating formatted output based on the provided arguments. Format specifiers are part of the format strings used by the java.util.Formatter class. When you use String.format(), you are indirectly using an instance of java.util.Formatter to process the format string and arguments.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use format specifiers to format a number with a specific number of decimal places in Java?\",\r\n    answer: \"Use %.[number]f or %.[number]F.\",\r\n    explanation:\r\n      'To format a number with a specific number of decimal places, use the %.[number]f (for lowercase) or %.[number]F (for uppercase) format specifier, where [number] is the desired number of decimal places. For example, to format a floating-point number with 2 decimal places, use \"%.2f\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What are some common flags used with format specifiers in Java, and how do they affect the output?\",\r\n    answer: 'Common flags include: \"-\", \"+\", \" \", \"0\", and \",\".',\r\n    explanation:\r\n      'In Java, flags are used to modify the output of format specifiers. Some common flags are:\\n\\n1. \"-\" - Left-justifies the output within the field width.\\n2. \"+\" - Includes a sign (+ or -) with the output for numeric values.\\n3. \" \" (space) - Prefixes positive numbers with a space and negative numbers with a minus sign.\\n4. \"0\" - Pads the output with zeros to fill the field width.\\n5. \",\" - Adds grouping separators for large numbers.\\n\\nThese flags can be combined and placed between the % character and the format specifier to modify the output.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is an example of using a combination of flags with format specifiers in Java?\",\r\n    answer: 'String.format(\"%+08.2f\", 123.456);',\r\n    explanation:\r\n      'In this example, we use the following flags with a floating-point format specifier:\\n\\n1. \"+\" - Includes a sign (+ or -) with the output.\\n2. \"0\" - Pads the output with zeros to fill the field width.\\n3. \"8\" - Sets the field width to 8 characters.\\n4. \".2\" - Formats the number with 2 decimal places.\\n\\nThe resulting formatted string will be \"+123.46\", with zeros added to fill the field width.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the StringBuilder class in Java?\",\r\n    answer:\r\n      \"A mutable sequence of characters used for efficient string manipulation and modification.\",\r\n    explanation:\r\n      \"StringBuilder is a class in Java that provides a mutable alternative to the String class, allowing for more efficient manipulation of string data. It is especially useful when concatenating or modifying strings in a performance-critical context.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How does StringBuilder differ from String in terms of mutability?\",\r\n    answer: \"StringBuilder is mutable, whereas String is immutable.\",\r\n    explanation:\r\n      \"While String objects are immutable, meaning their content cannot be changed after they are created, StringBuilder objects are mutable and can be modified. This allows for more efficient string manipulation, as changes can be made directly to the StringBuilder instance without creating new String objects.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you provide a basic example of creating a StringBuilder object in Java?\",\r\n    answer: \"StringBuilder sb = new StringBuilder();\",\r\n    explanation:\r\n      \"To create a new StringBuilder object in Java, you can use the following code: StringBuilder sb = new StringBuilder();. This creates an empty StringBuilder instance with the default initial capacity.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you append content to a StringBuilder object in Java?\",\r\n    answer: \"Use the append() method.\",\r\n    explanation:\r\n      \"To append content to a StringBuilder object in Java, you can use the append() method. For example: StringBuilder sb = new StringBuilder(); sb.append(\\\"Hello\\\"); sb.append(\\\" World\\\"); This code appends the strings 'Hello' and ' World' to the StringBuilder object.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you insert content at a specific position in a StringBuilder object?\",\r\n    answer: \"Use the insert() method.\",\r\n    explanation:\r\n      'To insert content at a specific position in a StringBuilder object, you can use the insert() method. For example: StringBuilder sb = new StringBuilder(\"Hello World\"); sb.insert(5, \",\"); This code inserts a comma at the 5th position in the StringBuilder object.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you delete characters from a StringBuilder object in Java?\",\r\n    answer: \"Use the delete() method.\",\r\n    explanation:\r\n      'To delete characters from a StringBuilder object in Java, you can use the delete() method. For example: StringBuilder sb = new StringBuilder(\"Hello World\"); sb.delete(5, 6); This code removes the character at the 5th position in the StringBuilder object.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you provide an example of using StringBuilder for string concatenation in a loop?\",\r\n    answer:\r\n      'StringBuilder sb = new StringBuilder(); for (int i = 0; i < 5; i++) { sb.append(i).append(\", \"); }',\r\n    explanation:\r\n      'To use StringBuilder for string concatenation in a loop, you can create a new StringBuilder instance and append content within the loop. For example:\\n\\n\\nStringBuilder sb = new StringBuilder();\\nfor (int i = 0; i < 5; i++) {\\n sb.append(i).append(\", \");\\n}\\n\\n\\nThis code appends the numbers 0 to 4 and a comma and space after each number to the StringBuilder object.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the capacity() method in the StringBuilder class, and how does it work?\",\r\n    answer: \"Returns the current capacity of the StringBuilder object.\",\r\n    explanation:\r\n      \"The capacity() method in the StringBuilder class returns the current capacity of the StringBuilder object, which is the number of character spaces the object can hold without needing to reallocate its internal storage. The capacity of a StringBuilder object may change automatically as content is added or removed, but it can also be set manually using the ensureCapacity() or setLength() methods.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you set the length of a StringBuilder object in Java?\",\r\n    answer: \"Use the setLength() method.\",\r\n    explanation:\r\n      \"To set the length of a StringBuilder object in Java, you can use the setLength() method. For example: StringBuilder sb = new StringBuilder(\\\"Hello World\\\"); sb.setLength(5); This code sets the length of the StringBuilder object to 5, truncating the content to 'Hello'.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you retrieve a character at a specific index in a StringBuilder object?\",\r\n    answer: \"Use the charAt() method.\",\r\n    explanation:\r\n      \"To retrieve a character at a specific index in a StringBuilder object, you can use the charAt() method. For example: StringBuilder sb = new StringBuilder(\\\"Hello World\\\"); char ch = sb.charAt(1); This code retrieves the character at the index 1 ('e') from the StringBuilder object.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you reverse the contents of a StringBuilder object in Java?\",\r\n    answer: \"Use the reverse() method.\",\r\n    explanation:\r\n      \"To reverse the contents of a StringBuilder object in Java, you can use the reverse() method. For example: StringBuilder sb = new StringBuilder(\\\"Hello World\\\"); sb.reverse(); This code reverses the content of the StringBuilder object, resulting in 'dlroW olleH'.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you replace a portion of the content in a StringBuilder object?\",\r\n    answer: \"Use the replace() method.\",\r\n    explanation:\r\n      \"To replace a portion of the content in a StringBuilder object, you can use the replace() method. For example: StringBuilder sb = new StringBuilder(\\\"Hello World\\\"); sb.replace(0, 5, \\\"Goodbye\\\"); This code replaces the substring 'Hello' (from index 0 to 4) with 'Goodbye', resulting in 'Goodbye World'.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you convert a StringBuilder object to a String in Java?\",\r\n    answer: \"Use the toString() method.\",\r\n    explanation:\r\n      'To convert a StringBuilder object to a String in Java, you can use the toString() method. For example: StringBuilder sb = new StringBuilder(\"Hello World\"); String str = sb.toString(); This code creates a new String object with the same content as the StringBuilder object.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What are the performance implications of using StringBuilder for string manipulation compared to using the + operator for string concatenation?\",\r\n    answer: \"StringBuilder is more efficient, especially in loops.\",\r\n    explanation:\r\n      \"Using StringBuilder for string manipulation is more efficient than using the + operator for string concatenation, especially in loops. The reason is that the + operator creates a new String object with each concatenation, whereas StringBuilder modifies the same object, reducing the overhead associated with creating new objects and copying data.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How does the StringBuilder class handle automatic resizing of its internal buffer?\",\r\n    answer: \"It automatically doubles its capacity when needed.\",\r\n    explanation:\r\n      \"When the StringBuilder class needs to resize its internal buffer, it automatically doubles its capacity. If the new capacity is still insufficient, it increases the capacity to accommodate the new content. This approach ensures that the buffer has enough space to store the characters, while minimizing the number of resizing operations and memory allocation overhead.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you create a StringBuilder object with a custom initial capacity?\",\r\n    answer: \"Use the constructor with an int parameter.\",\r\n    explanation:\r\n      \"To create a StringBuilder object with a custom initial capacity, you can use the constructor that takes an int parameter representing the initial capacity. For example: StringBuilder sb = new StringBuilder(50); This code creates a new StringBuilder object with an initial capacity of 50 characters.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is a substring in Java?\",\r\n    answer: \"A contiguous sequence of characters within a string.\",\r\n    explanation:\r\n      \"A substring is a smaller part of a string, containing a continuous sequence of characters from the original string. It is typically obtained using the substring() method of the String class.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you create a substring from a given string in Java?\",\r\n    answer: \"Use the substring() method of the String class.\",\r\n    explanation:\r\n      \"To create a substring from a given string, you can use the substring() method of the String class. It accepts start and end indices to determine the range of characters to include in the substring.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the substring() method in the String class, and what are its parameters?\",\r\n    answer:\r\n      \"A method that returns a substring, accepting start and end indices as parameters.\",\r\n    explanation:\r\n      \"The substring() method in the String class is used to create a substring from the original string. It has two overloaded versions: one accepting a single parameter, the start index, and the other accepting both start and end indices. The start index is inclusive, and the end index is exclusive.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is a basic example of using the substring() method in Java?\",\r\n    answer:\r\n      'String original = \"Hello, World!\"; String sub = original.substring(0, 5);',\r\n    explanation:\r\n      'In this example, the substring() method is used to create a substring from the original string \"Hello, World!\". The start index is 0 and the end index is 5, so the resulting substring is \"Hello\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you create a substring from the beginning of a string to a specified end index?\",\r\n    answer:\r\n      \"Use the substring() method with a single parameter, the end index.\",\r\n    explanation:\r\n      \"To create a substring from the beginning of a string to a specified end index, call the substring() method with the end index as the only parameter. The substring will include characters from the start of the string up to, but not including, the character at the end index.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you create a substring from a specified start index to the end of a string?\",\r\n    answer: \"Use the substring() method with the start index as the parameter.\",\r\n    explanation:\r\n      \"To create a substring from a specified start index to the end of the string, call the substring() method with the start index as the parameter. The substring will include all characters from the start index to the end of the original string.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What happens if the start or end index provided to the substring() method is out of bounds?\",\r\n    answer: \"A StringIndexOutOfBoundsException is thrown.\",\r\n    explanation:\r\n      \"If the start or end index provided to the substring() method is out of bounds, a StringIndexOutOfBoundsException is thrown. This exception indicates that the provided index is either negative or greater than the length of the original string.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"Can you create a substring using negative indices in Java?\",\r\n    answer: \"No, negative indices are not allowed.\",\r\n    explanation:\r\n      \"In Java, you cannot create a substring using negative indices. If a negative index is provided to the substring() method, a StringIndexOutOfBoundsException will be thrown.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you find all occurrences of a substring within a larger string?\",\r\n    answer: \"Use a loop and the indexOf() method.\",\r\n    explanation:\r\n      \"To find all occurrences of a substring within a larger string, use a loop and the indexOf() method. Start at index 0 and repeatedly call indexOf() with the substring and the current index. Update the current index with the returned value plus one. Continue until indexOf() returns -1, indicating that the substring is not found.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you create a substring from a StringBuilder or StringBuffer object?\",\r\n    answer: \"Use the toString() and substring() methods.\",\r\n    explanation:\r\n      \"To create a substring from a StringBuilder or StringBuffer object, first convert the object to a String using the toString() method. Then, use the substring() method on the resulting String with the desired start and end indices.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you provide an example of using the substring() method with Unicode characters or code points?\",\r\n    answer: \"Use the substring() method as usual.\",\r\n    explanation:\r\n      'The substring() method works with Unicode characters or code points in the same way as it does with ASCII characters. For example, to extract a substring from a string containing Unicode characters:\\n\\nString unicodeString = \"こんにちは, World!\";\\nString substring = unicodeString.substring(0, 5);\\n\\nThe variable \"substring\" will now contain the first five characters, which are the Japanese characters for \"hello\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you split a string into substrings based on a delimiter in Java?\",\r\n    answer: \"Use the split() method.\",\r\n    explanation:\r\n      'To split a string into substrings based on a delimiter in Java, use the split() method on the String object. Pass the delimiter as a parameter to the split() method, and it will return an array of substrings. For example:\\n\\nString input = \"apple,banana,orange\";\\nString[] substrings = input.split(\",\");\\n\\nThe resulting array \"substrings\" will contain three elements: \"apple\", \"banana\", and \"orange\".',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What are the performance implications of creating substrings in Java?\",\r\n    answer:\r\n      \"Minimal performance impact in Java 7 and later, but can lead to memory leaks in Java 6.\",\r\n    explanation:\r\n      \"In Java 7 and later, creating substrings has minimal performance impact because a new String object is created with a new character array. However, in Java 6, the substring() method creates a new String object that shares the same character array as the original String. This can lead to memory leaks if the original String is large and the substrings are small but kept in memory for a long time. To avoid memory leaks in Java 6, create a new String object from the substring, like this: String newSubstring = new String(original.substring(start, end));\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"How do you compare two substrings for equality in Java?\",\r\n    answer: \"Use the equals() method.\",\r\n    explanation:\r\n      'To compare two substrings for equality in Java, use the equals() method on one of the substrings and pass the other substring as a parameter. This method compares the contents of the strings character by character and returns true if they are equal and false otherwise. For example:\\n\\nString substring1 = \"hello\";\\nString substring2 = \"hello\";\\nboolean isEqual = substring1.equals(substring2);\\n\\nThe variable \"isEqual\" will be true because the contents of \"substring1\" and \"substring2\" are equal.',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question: \"What is the indexOf() method in Java?\",\r\n    answer:\r\n      \"A method to find the index of a specified character or substring within a given string.\",\r\n    explanation:\r\n      \"The indexOf() method is a method of the String class in Java. It is used to find the first occurrence of a specified character or substring within a given string. It returns the index of the character or substring if found; otherwise, it returns -1.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use the indexOf() method to find the index of a specific character in a string?\",\r\n    answer:\r\n      \"Call the indexOf() method on the string and pass the character as an argument.\",\r\n    explanation:\r\n      \"To use the indexOf() method to find the index of a specific character in a string, call the method on the string instance and pass the character as an argument. For example: string.indexOf('c');\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use the indexOf() method to find the index of a substring within a given string?\",\r\n    answer:\r\n      \"Call the indexOf() method on the string and pass the substring as an argument.\",\r\n    explanation:\r\n      'To use the indexOf() method to find the index of a substring within a given string, call the method on the string instance and pass the substring as an argument. For example: string.indexOf(\"substr\");',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the return value of the indexOf() method if the specified character or substring is not found in the string?\",\r\n    answer: \"-1\",\r\n    explanation:\r\n      \"The indexOf() method returns -1 if the specified character or substring is not found in the given string.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use the indexOf() method to find the index of a specific character or substring starting from a given index?\",\r\n    answer:\r\n      \"Call the indexOf() method on the string, passing the character or substring and the starting index as arguments.\",\r\n    explanation:\r\n      \"To use the indexOf() method to find the index of a specific character or substring starting from a given index, call the method on the string instance and pass the character or substring as the first argument and the starting index as the second argument. For example: string.indexOf('c', startIndex); or string.indexOf(\\\"substr\\\", startIndex);\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you find all occurrences of a specific character or substring within a given string using the indexOf() method?\",\r\n    answer:\r\n      \"Use a loop to repeatedly call the indexOf() method with an updated starting index until the method returns -1.\",\r\n    explanation:\r\n      'To find all occurrences of a specific character or substring within a given string using the indexOf() method, you can use a loop to repeatedly call the indexOf() method with an updated starting index until the method returns -1, indicating no more occurrences. For example:\\n\\nString text = \"abracadabra\";\\nString target = \"a\";\\nint index = 0;\\n\\nwhile ((index = text.indexOf(target, index)) != -1) {\\n System.out.println(\"Found at index: \" + index);\\n index++;\\n}',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Can you use the indexOf() method to find the index of a character or substring with case-insensitive comparison?\",\r\n    answer:\r\n      \"No, but you can convert both the original string and the target character or substring to the same case before calling the indexOf() method.\",\r\n    explanation:\r\n      'The indexOf() method is case-sensitive by default. To perform a case-insensitive search, you can convert both the original string and the target character or substring to the same case (either upper case or lower case) before calling the indexOf() method. For example:\\n\\nString text = \"Hello, World!\";\\nString target = \"WORLD\";\\nint index = text.toUpperCase().indexOf(target.toUpperCase());',\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use the indexOf() method with Unicode characters or code points?\",\r\n    answer:\r\n      \"Call the indexOf() method on the string, passing the Unicode character or code point as an argument.\",\r\n    explanation:\r\n      \"To use the indexOf() method with Unicode characters or code points, call the method on the string instance and pass the Unicode character or code point as the argument. For example:\\n\\nString text = \\\"Héllò, wôrld!\\\";\\nint index = text.indexOf('é');\\n\\nThis code snippet will output 1, which is the index of the first occurrence of the Unicode character 'é' in the given string.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between the indexOf() and lastIndexOf() methods in Java?\",\r\n    answer:\r\n      \"indexOf() finds the first occurrence, while lastIndexOf() finds the last occurrence of a character or substring within a given string.\",\r\n    explanation:\r\n      \"The indexOf() and lastIndexOf() methods in Java both find the index of a specified character or substring within a given string. However, the indexOf() method searches the string from the beginning and returns the index of the first occurrence, while the lastIndexOf() method searches the string from the end and returns the index of the last occurrence.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How does the indexOf() method handle searching for an empty substring within a string?\",\r\n    answer:\r\n      \"It returns the passed starting index or 0 if no starting index is provided.\",\r\n    explanation:\r\n      \"When searching for an empty substring using the indexOf() method, the method will return the passed starting index, or 0 if no starting index is provided. This is because an empty substring is considered to be present at every position in the string.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"Are there any performance considerations when using the indexOf() method with very large strings?\",\r\n    answer:\r\n      \"Yes, the indexOf() method can have performance issues when searching large strings, especially if the target character or substring occurs infrequently or is not found.\",\r\n    explanation:\r\n      \"The indexOf() method searches for a specific character or substring in a string using a linear search, which has a time complexity of O(n) in the worst case. When searching very large strings, this can lead to performance issues, especially if the target character or substring occurs infrequently or is not found at all. In such cases, consider using more efficient search algorithms or data structures, such as the Boyer-Moore, Knuth-Morris-Pratt, or Rabin-Karp algorithms, or a Trie data structure.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How do you use the indexOf() method in combination with substring() to extract a portion of a string based on a specific character or substring?\",\r\n    answer:\r\n      \"Find the index of the character or substring using indexOf(), then use substring() with the index to extract the desired portion of the string.\",\r\n    explanation:\r\n      \"To extract a portion of a string based on a specific character or substring, first find the index of the character or substring using the indexOf() method. Then, use the substring() method with the index to extract the desired portion of the string. For example:\\n\\nString text = \\\"Hello, world!\\\";\\nint commaIndex = text.indexOf(',');\\nString firstPart = text.substring(0, commaIndex);\\n\\nIn this example, we find the index of the comma character and extract the portion of the string before the comma.\",\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default Strings2;\r\n","const codingArrays1 = [\r\n  {\r\n    question:\r\n      \"Which of the following initializes an array arr containing five elements with the value \",\r\n    answer:\r\n      \" Both int[] arr = {0, 0, 0, 0, 0}; And int[] arr = new int[]{0, 0, 0, 0, 0};\",\r\n    options: [\r\n      \"int[] arr = {0, 0, 0, 0, 0};\",\r\n      \"int[] arr = new int[5];\",\r\n      \"int[] arr = new int[]{0, 0, 0, 0, 0};\",\r\n    ],\r\n    explanation: `(A) initializes an array with five elements and explicitly sets each element to 0 using the brace notation.\r\n        (C) also initializes an array with five elements and sets each element to 0 using the array initialization syntax.\r\n        (B) initializes an array with five elements, but does not set the initial value of the elements. By default, the elements of an int array are initialized to 0, but this is not explicitly stated in option (B).\r\n        Therefore, options (A) and (C) are equivalent and both correctly initialize an array containing five elements with the value 0. Option (B) also creates an array with five elements, but does not explicitly set their values. Option (E) is incorrect because it includes option (B), which is not equivalent to options (A) and (C).`,\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the default value for integer elements in a newly created array in Java?\",\r\n    answer: \"0\",\r\n    options: [\"0\", \"null\", \"-1\", \"undefined\"],\r\n    explanation:\r\n      \"The default value for integer elements in a newly created array in Java is (A) 0. When an array of integers is created in Java, all elements of the array are initialized to 0 by default.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"How can an array of length 4 with elements initialized to 1 be created in Java?\",\r\n    answer: \"All options\",\r\n    options: [\r\n      \"int[] arr = {1, 1, 1, 1};\",\r\n      \"int[] arr = new int[]{1, 1, 1, 1};\",\r\n      `int[] arr = new int[4];\r\n      for (int i = 0; i < arr.length; i++)\r\n      arr[i] = 1;`,\r\n      \"None of the options\",\r\n    ],\r\n    explanation: `All of the options mentioned can be used to create an array of length 4 with elements initialized to 1 in Java.`,\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      'What is the output of the following Java code snippet?\\nint[] arr = new int[3];\\nfor (int i = 0; i < arr.length; i++) {\\nSystem.out.print(arr[i] + \" \");\\n}',\r\n    answer: \"0 0 0\",\r\n    options: [\"111\", \"null null null\", \"No output\", \"Error\"],\r\n    explanation:\r\n      \"The output of the code snippet will be: 0 0 0 This is because the default value for an uninitialized int array element in Java is 0. When the for loop iterates over each element of the array, it prints out the value of each element concatenated with a space character. Since the elements of the array are all uninitialized, their default value of 0 is printed out.\",\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default codingArrays1;\r\n","import { render } from \"./HomePage.vue?vue&type=template&id=b30f9ac2&scoped=true\"\nimport script from \"./HomePage.vue?vue&type=script&lang=js\"\nexport * from \"./HomePage.vue?vue&type=script&lang=js\"\n\nimport \"./HomePage.vue?vue&type=style&index=0&id=b30f9ac2&lang=scss&scoped=true\"\n\nimport exportComponent from \"C:\\\\Users\\\\Quamir\\\\Downloads\\\\JavaPrepQ\\\\java-prep-q\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-b30f9ac2\"]])\n\nexport default __exports__","<template>\r\n    <section>\r\n        <info-panel class=\"info-panel\" :answeredQuestions=\"answeredQuestions\" :questionAmount=\"questionAmount\"\r\n            :correctAnswers=\"correctAnswers\" @grade-test-clicked=\"gradeTest\" @restart-test=\"restartTest\">\r\n        </info-panel>\r\n        <div class=\"questions\">\r\n            <question-card v-for=\"(question, index) in shuffledTestQuestions\" :key=\"index\" ref=\"questionCards\"\r\n                class=\"question\" :test-questions=\"questions\" :questionNumber=\"index + 1\" :questionText=\"question.question\"\r\n                :answer=\"question.answer\" :explanation=\"question.explanation\" :question-img=\"question.img\"\r\n                @question-option-clicked=\"handleQuestionOptionClicked\"></question-card>\r\n        </div>\r\n        <jump-to-question class=\"jump-to-question\" :wrong-answers=\"wrongAnswers\"></jump-to-question>\r\n    </section>\r\n</template>\r\n\r\n<script>\r\n//components \r\nimport QuestionCard from '../components/QuestionCard.vue';\r\nimport InfoPanel from '../components/InfoPanel.vue';\r\nimport jumpToQuestion from '../components/JumpToQuestion.vue';\r\n//test\r\nimport terminalQuestions from '@/questions/Terminal';\r\nimport versionControl from '@/questions/versionControl';\r\nimport introJava from '@/questions/introJava';\r\nimport primitiveDataTypes from '@/questions/primitiveDataTypes';\r\nimport referenceDataTypes from '@/questions/referenceDataTypes';\r\nimport stringHandling from '@/questions/stringHandling';\r\nimport VariableDecIntIns from '@/questions/variablesDecIntIns';\r\nimport arrays from '@/questions/Arrays';\r\nimport booleans from '@/questions/booleans';\r\nimport logicalAndComparison from '@/questions/logicalAndComparisonOperators';\r\nimport dotEqualsAndComments from '@/questions/dotEqualsAndComments';\r\nimport errors from '@/questions/errors';\r\nimport strictlyTyped from '@/questions/strictlyTyped';\r\nimport instantiatingAclass from '@/questions/instantiatingAclass';\r\nimport primitiveAndNonPrimitive from '@/questions/PrimitiveAndNonPrimitive';\r\nimport operators from '@/questions/operators';\r\nimport attributesAndInstanceVar from '@/questions/attributesAndInstanceVar';\r\nimport classesAndReferenceDataTypes from '@/questions/classesAndReferenceDataTypes';\r\nimport creatingObjects from '@/questions/creatingObjects';\r\nimport constructors from '@/questions/constructors';\r\nimport strings from '@/questions/strings';\r\nimport dotNotation from '@/questions/dotNotation';\r\nimport encapsulation from '@/questions/encapsulation';\r\nimport accessModifiers from '@/questions/accessModifiers';\r\nimport interfaceJava from '@/questions/interface';\r\nimport getters from '@/questions/getters';\r\nimport setters from '@/questions/setters';\r\nimport thisKeyword from '@/questions/thiskeyword';\r\nimport wrapperClasses from '@/questions/wrapperClasses';\r\nimport strings2 from '@/questions/strings2';\r\nimport arrays1 from '@/questions/arrays1';\r\n\r\nexport default {\r\n    components: { QuestionCard, InfoPanel, jumpToQuestion },\r\n    data() {\r\n        return {\r\n            questions: [],\r\n            answeredQuestions: 0,\r\n            questionAmount: 0,\r\n            correctAnswers: 0,\r\n            wrongAnswers: [],\r\n            selectedOptions: [],\r\n            answeredQuestionsSet: new Set(),\r\n            isTestGraded: false\r\n        };\r\n    },\r\n    computed: {\r\n        shuffledTestQuestions() {\r\n            let shuffledQuestions = [...this.questions];\r\n            for (let i = shuffledQuestions.length - 1; i > 0; i--) {\r\n                const j = Math.floor(Math.random() * (i + 1));\r\n                [shuffledQuestions[i], shuffledQuestions[j]] = [shuffledQuestions[j], shuffledQuestions[i]];\r\n            }\r\n            return shuffledQuestions;\r\n        }\r\n    },\r\n    methods: {\r\n        handleQuestionOptionClicked(clickedOption) {\r\n            // Get the index of the question for which the option was clicked\r\n            const questionIndex = clickedOption.$parent.questionNumber - 1;\r\n\r\n            // Check if the selected options array has already an option for this question\r\n            if (this.selectedOptions[questionIndex]) {\r\n                // Remove the previously selected option\r\n                this.selectedOptions[questionIndex].isClicked = false;\r\n            }\r\n\r\n            // If the clicked option is not the same as the previously selected option, add it to the selected options array\r\n            if (this.selectedOptions[questionIndex] !== clickedOption) {\r\n                this.selectedOptions[questionIndex] = clickedOption;\r\n                this.answeredQuestionsSet.add(questionIndex);\r\n            } else {\r\n                this.selectedOptions[questionIndex] = null;\r\n                this.answeredQuestionsSet.delete(questionIndex);\r\n            }\r\n\r\n            this.answeredQuestions = this.answeredQuestionsSet.size;\r\n        },\r\n        gradeTest() {\r\n            if (this.isTestGraded) {\r\n                return\r\n            } else {\r\n                this.isTestGraded = true;\r\n                let correctAnswers = 0;\r\n                this.$refs.questionCards.forEach((questionCard) => {\r\n                    correctAnswers += questionCard.getCorrectAnswers();\r\n                    const wrongAnswerNumber = questionCard.getWrongAnswers();\r\n                    if (wrongAnswerNumber !== undefined) {\r\n                        this.wrongAnswers.push(wrongAnswerNumber);\r\n                    }\r\n                });\r\n                this.correctAnswers = correctAnswers;\r\n                console.log(this.wrongAnswers);\r\n            }\r\n        },\r\n\r\n        restartTest() {\r\n            this.isTestGraded = false;\r\n            this.answerdQuestions = 0;\r\n            this.correctAnswers = 0;\r\n            this.$refs.questionCards.forEach((questionCard) => {\r\n                questionCard.restartTest();\r\n                this.answeredQuestions = 0;\r\n                this.wrongAnswers = [];\r\n                this.answeredQuestionsSet = new Set();\r\n            });\r\n        },\r\n        getTestName() {\r\n            let url = window.location.href;\r\n            let testName = url.substring(url.lastIndexOf(\"/\") + 1);\r\n            return testName;\r\n        },\r\n        setTest() {\r\n            let testName = this.getTestName();\r\n\r\n            switch (testName) {\r\n                case 'Terminal':\r\n                    this.questions = terminalQuestions;\r\n                    break;\r\n                case 'versioncontrol':\r\n                    this.questions = versionControl;\r\n                    break;\r\n                case 'introjava':\r\n                    this.questions = introJava;\r\n                    break;\r\n                case 'primitive-data-types':\r\n                    this.questions = primitiveDataTypes;\r\n                    break;\r\n                case 'reference-data-types':\r\n                    this.questions = referenceDataTypes;\r\n                    break;\r\n                case 'string-handling':\r\n                    this.questions = stringHandling;\r\n                    break;\r\n                case 'variable-declaration----':\r\n                    this.questions = VariableDecIntIns;\r\n                    break;\r\n                case 'arrays':\r\n                    this.questions = arrays;\r\n                    break;\r\n                case 'booleans':\r\n                    this.questions = booleans;\r\n                    break;\r\n                case 'logical-and-comparison-op-':\r\n                    this.questions = logicalAndComparison;\r\n                    break;\r\n                case '.equals()-and-comments':\r\n                    this.questions = dotEqualsAndComments;\r\n                    break;\r\n                case 'errors':\r\n                    this.questions = errors;\r\n                    break;\r\n                case 'strictly-typed':\r\n                    this.questions = strictlyTyped;\r\n                    break;\r\n                case 'instantianting-a-class':\r\n                    this.questions = instantiatingAclass;\r\n                    break;\r\n                case 'primitive-and-nonprimitive':\r\n                    this.questions = primitiveAndNonPrimitive;\r\n                    break;\r\n                case 'operators':\r\n                    this.questions = operators;\r\n                    break;\r\n                case 'attributes-and-Instance-variables':\r\n                    this.questions = attributesAndInstanceVar;\r\n                    break;\r\n                case 'classes-and-Reference-data-types':\r\n                    this.questions = classesAndReferenceDataTypes;\r\n                    break;\r\n                case 'creating-objects':\r\n                    this.questions = creatingObjects;\r\n                    break;\r\n                case 'constructors':\r\n                    this.questions = constructors;\r\n                    break;\r\n                case 'strings':\r\n                    this.questions = strings;\r\n                    break;\r\n                case 'dot-notation':\r\n                    this.questions = dotNotation;\r\n                    break;\r\n                case 'encapsulation':\r\n                    this.questions = encapsulation;\r\n                    break;\r\n                case 'access-modifiers':\r\n                    this.questions = accessModifiers;\r\n                    break;\r\n                case 'interface':\r\n                    this.questions = interfaceJava;\r\n                    break;\r\n                case 'getters':\r\n                    this.questions = getters;\r\n                    break;\r\n                case 'setters':\r\n                    this.questions = setters;\r\n                    break;\r\n                case 'this-keyword':\r\n                    this.questions = thisKeyword;\r\n                    break;\r\n                case 'wrapper-classes':\r\n                    this.questions = wrapperClasses;\r\n                    break;\r\n                case 'strings2':\r\n                    this.questions = strings2;\r\n                    break;\r\n                case 'arrays1':\r\n                    this.questions = arrays1;\r\n                    break;\r\n                default:\r\n                    console.error('Invalid test name: ', testName);\r\n                    break;\r\n            }\r\n            this.questionAmount = this.questions.length;\r\n        }\r\n    },\r\n    created() {\r\n        this.setTest();\r\n        console.log(this.shuffledTestQuestions.answer);\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\nsection {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    margin-top: 50px;\r\n}\r\n\r\n.question {\r\n    width: 50%;\r\n    margin: auto;\r\n    margin-right: 400px;\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.info-panel,\r\n.jump-to-question {\r\n    position: fixed;\r\n}\r\n</style>","<template>\r\n    <div>\r\n        <div class=\"question__card-body\">\r\n            <div class=\"question__number\">\r\n                <p>Question {{ questionNumber }}</p>\r\n            </div>\r\n            <div class=\"question__question\" :class=\"{ 'wraning': answerWarning, 'answer-correct': answerCorrect }\">\r\n                <p>{{ questionText }}</p>\r\n            </div>\r\n            <img v-if=\"questionImg != ''\" :src=\"questionImg\" alt=\"image for question\">\r\n            <div class=\"question__question-wrapper\" v-for=\"(question, index) in optionsArray\" :key=\"index\">\r\n                <question-option ref=\"questionOptions\" class=\"question__option\" @option-clicked=\"handleOptionClicked\"\r\n                    :optionsArray=\"optionsArray\" :questionNumber=\"questionNumber\" :optionIndex=\"index\"\r\n                    :test-graded=\"testGraded\"></question-option>\r\n            </div>\r\n            <div class=\"question__explanation\" :class=\"{ 'question__explanation--graded': answerCorrect || answerWarning }\">\r\n                <span>Explanation</span>\r\n                <p> {{ explanation }} </p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport QuestionOption from '../components/QuestionOption.vue';\r\n\r\nexport default {\r\n    components: { QuestionOption },\r\n    props: {\r\n        questionNumber: {\r\n            type: Number,\r\n            required: true\r\n        },\r\n        questionText: {\r\n            type: String,\r\n            required: true\r\n        },\r\n        answer: {\r\n            type: String,\r\n            required: true\r\n        },\r\n        explanation: {\r\n            type: String,\r\n            required: true\r\n        },\r\n        testQuestions: {\r\n            type: Array,\r\n            required: true\r\n        },\r\n        questionImg: {\r\n            type: String,\r\n            requuired: true\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            questions: this.testQuestions,\r\n            answerWarning: false,\r\n            answerCorrect: false,\r\n            testGraded: false,\r\n        };\r\n    },\r\n    computed: {\r\n        optionsArray() {\r\n            // Find the question with the correct answer\r\n            const questionWithAnswer = this.questions.find(q => q.answer === this.answer);\r\n\r\n            // If the question has an 'options' key, use the predefined options\r\n            if (questionWithAnswer && Object.prototype.hasOwnProperty.call(questionWithAnswer, 'options')) {\r\n                const options = questionWithAnswer.options.filter(option => option !== this.answer);\r\n                options.push(this.answer);\r\n                options.sort(() => Math.random() - 0.5);\r\n                return options;\r\n            }\r\n\r\n            // If the question does not have an 'options' key, generate random options\r\n            let options = [];\r\n            let tempquestions = this.questions.filter(q => q.answer !== this.answer);\r\n            const uniqueRandomIndexes = this.getUniqueRandomIndexes(3, tempquestions.length - 1);\r\n\r\n            for (let i = 0; i < uniqueRandomIndexes.length; i++) {\r\n                options.push(tempquestions[uniqueRandomIndexes[i]].answer);\r\n            }\r\n\r\n            // Check if the answer is already in the options array.\r\n            if (!options.includes(this.answer)) {\r\n                options.push(this.answer);\r\n            }\r\n\r\n            // Shuffle the options\r\n            options.sort(() => Math.random() - 0.5);\r\n\r\n            return options;\r\n        }\r\n\r\n    },\r\n    created() {\r\n\r\n    },\r\n    methods: {\r\n        handleOptionClicked(clickedOption) {\r\n            this.$refs.questionOptions.forEach((option) => {\r\n                if (option !== clickedOption) {\r\n                    option.isClicked = false;\r\n                } else {\r\n                    this.$emit('question-option-clicked', clickedOption);\r\n                }\r\n            });\r\n        },\r\n        getUniqueRandomIndexes(num, maxIndex) {\r\n            const indexes = new Set();\r\n            while (indexes.size < num) {\r\n                const randomIndex = Math.floor(Math.random() * (maxIndex + 1));\r\n                indexes.add(randomIndex);\r\n            }\r\n            return Array.from(indexes);\r\n        },\r\n        getCorrectAnswers() {\r\n            let correctAnswers = 0;\r\n            this.$refs.questionOptions.forEach((option) => {\r\n                if (option.isCorrect && option.isClicked) {\r\n                    correctAnswers++;\r\n                    this.answerCorrect = true;\r\n                }\r\n            });\r\n            this.testGraded = true;\r\n            return correctAnswers;\r\n        },\r\n        getWrongAnswers() {\r\n            const wrongAnswerFound = this.$refs.questionOptions.some((option) => {\r\n                if (!option.isCorrect && option.isClicked) {\r\n                    this.answerWarning = true;\r\n                    return true;\r\n                }\r\n            });\r\n\r\n            if (wrongAnswerFound) {\r\n                return {\r\n                    questionNumber: this.questionNumber,\r\n                    location: this.$el.offsetTop\r\n                };\r\n            } else {\r\n                return undefined;\r\n            }\r\n        },\r\n        restartTest() {\r\n            this.$refs.questionOptions.forEach((option) => {\r\n                this.answerCorrect = false;\r\n                this.answerWarning = false;\r\n                this.testGraded = false;\r\n                option.testRestart(true);\r\n            });\r\n        }\r\n    },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.question {\r\n    &__card-body {\r\n\r\n        background-color: #dbebfb;\r\n        border: 5px solid $secondary-color;\r\n        padding-bottom: 50px;\r\n    }\r\n\r\n    &__number {\r\n        width: 100%;\r\n        height: 50px;\r\n        background-color: $primary-color;\r\n        display: flex;\r\n        justify-content: flex-start;\r\n\r\n        & p {\r\n            font-size: rem(24);\r\n            font-weight: bold;\r\n            margin-top: auto;\r\n            margin-bottom: auto;\r\n            padding-left: 15px;\r\n        }\r\n    }\r\n\r\n    &__question {\r\n        width: 100%;\r\n        height: 150px;\r\n        background-color: #ffff;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n\r\n        & p {\r\n            font-size: rem(24);\r\n            font-weight: bold;\r\n        }\r\n    }\r\n\r\n    &__question-wrapper {\r\n        padding-top: 30px;\r\n    }\r\n\r\n    &__option {\r\n        margin-bottom: 15px;\r\n    }\r\n\r\n    &__explanation {\r\n        visibility: hidden;\r\n\r\n        &--graded {\r\n            visibility: visible;\r\n            display: flex;\r\n            font-size: rem(20);\r\n            font-weight: bold;\r\n            flex-direction: column;\r\n            margin: auto auto auto 100px;\r\n            width: 80%;\r\n            min-height: 150px;\r\n            background-color: $light-green;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n        }\r\n    }\r\n\r\n    img {\r\n        width: 100%;\r\n        height: 600px;\r\n    }\r\n}\r\n\r\n.wraning {\r\n    background-color: red;\r\n}\r\n\r\n.answer-correct {\r\n    background-color: $light-green;\r\n}\r\n</style>","<template>\r\n    <div class=\"option\">\r\n        <button class=\"option__button\" :class=\"{ 'click-color': isClicked }\" @click=\"handleClick\">\r\n        </button>\r\n        <div class=\"option__answer\">\r\n            <p>{{ optionsArray[optionIndex] }}</p>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    props: {\r\n        optionsArray: {\r\n            type: Array,\r\n            required: true\r\n        }, \r\n        optionIndex: {\r\n            type: Number,\r\n            required: true\r\n        },\r\n        questionNumber: {\r\n            type: Number,\r\n            required: true\r\n        },\r\n        testGraded:{\r\n            type: Boolean,\r\n            required: true\r\n        },\r\n    },\r\n    data() {\r\n        return {\r\n            isClicked: false,\r\n            randomIndex: 0,\r\n        };\r\n    },\r\n    methods: {\r\n        handleClick() {\r\n          if(this.testGraded){\r\n            return\r\n          }else{\r\n            this.isClicked = !this.isClicked;\r\n            this.isCorrect = this.optionsArray[this.optionIndex] === this.$parent.answer;\r\n            this.$emit('option-clicked', this);\r\n            this.$emit('answer-selected', this.isCorrect);\r\n          }\r\n        },\r\n        testRestart(){\r\n            this.isClicked = false;\r\n        }\r\n    },\r\n\r\n    created() {\r\n        this.randomIndex = Math.floor(Math.random() * this.optionsArray.length);\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.option {\r\n    width: 100%;\r\n    height: 120px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    &__button {\r\n        width: 50px;\r\n        height: 50px;\r\n        margin-right: 30px;\r\n\r\n        &:hover {\r\n            cursor: pointer;\r\n            background-color: $primary-color;\r\n        }\r\n    }\r\n\r\n    &__answer {\r\n        width: 80%;\r\n        height: 100%;\r\n        background-color: #ffff;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n\r\n        & p{\r\n            font-size: rem(20);\r\n            font-weight: bold;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n.click-color {\r\n    background-color: $light-green;\r\n}\r\n</style>","import { render } from \"./QuestionOption.vue?vue&type=template&id=4a43938e&scoped=true\"\nimport script from \"./QuestionOption.vue?vue&type=script&lang=js\"\nexport * from \"./QuestionOption.vue?vue&type=script&lang=js\"\n\nimport \"./QuestionOption.vue?vue&type=style&index=0&id=4a43938e&lang=scss&scoped=true\"\n\nimport exportComponent from \"C:\\\\Users\\\\Quamir\\\\Downloads\\\\JavaPrepQ\\\\java-prep-q\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-4a43938e\"]])\n\nexport default __exports__","import { render } from \"./QuestionCard.vue?vue&type=template&id=d52b0abe&scoped=true\"\nimport script from \"./QuestionCard.vue?vue&type=script&lang=js\"\nexport * from \"./QuestionCard.vue?vue&type=script&lang=js\"\n\nimport \"./QuestionCard.vue?vue&type=style&index=0&id=d52b0abe&lang=scss&scoped=true\"\n\nimport exportComponent from \"C:\\\\Users\\\\Quamir\\\\Downloads\\\\JavaPrepQ\\\\java-prep-q\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-d52b0abe\"]])\n\nexport default __exports__","<template>\r\n    <div class=\"info\">\r\n        <div class=\"info__question-counter\">\r\n            <p> {{ answeredQuestions }} / {{ questionAmount }} </p>\r\n        </div>\r\n        <div class=\"info__test-name\">\r\n            <p> {{ testName }}</p>\r\n        </div>\r\n        <button class=\"info__grade-test\" @click=\"$emit('grade-test-clicked')\">\r\n            <p>Grade Test</p>\r\n        </button>\r\n        <div class=\"info__correct-answers\">\r\n            <p> {{ correctAnswers }} (correct) / {{ questionAmount }}</p>\r\n        </div>\r\n        <button class=\"info__restart\" @click=\"$emit('restart-test')\">\r\n            <p>Restart Test</p>\r\n        </button>\r\n    </div>\r\n</template>\r\n<script>\r\nexport default {\r\n    props: {\r\n        answeredQuestions: {\r\n            type: Number,\r\n            required: true\r\n        },\r\n\r\n        questionAmount: {\r\n            type: Number,\r\n            required: true\r\n        },\r\n\r\n        correctAnswers: {\r\n            type: Number,\r\n            required: true\r\n        }\r\n    },\r\n\r\n    data() {\r\n        return {\r\n            testName: null\r\n        }\r\n    },\r\n    methods: {\r\n        getUrlName() {\r\n            let url = window.location.href;\r\n            let testName = url.substring(url.lastIndexOf(\"/\") + 1);\r\n            this.testName = testName;\r\n        }\r\n    },\r\n    created() {\r\n        this.getUrlName();\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.info {\r\n    width: 200px;\r\n    height: 400px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    padding-left: 50px;\r\n\r\n    &__question-counter,\r\n    &__test-name,\r\n    &__grade-test,\r\n    &__correct-answers,\r\n    &__restart {\r\n        width: 200px;\r\n        height: 70px;\r\n        border-radius: 20px;\r\n        background-color: $primary-color;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        font-size: rem(25);\r\n        color: #ffffff;\r\n        font-weight: bold;\r\n    }\r\n\r\n    &__grade-test, &__restart{\r\n        background-color: $secondary-color;\r\n        &:hover{\r\n            cursor: pointer;\r\n        }\r\n    }\r\n}\r\n</style>","import { render } from \"./InfoPanel.vue?vue&type=template&id=b0f14e7c&scoped=true\"\nimport script from \"./InfoPanel.vue?vue&type=script&lang=js\"\nexport * from \"./InfoPanel.vue?vue&type=script&lang=js\"\n\nimport \"./InfoPanel.vue?vue&type=style&index=0&id=b0f14e7c&lang=scss&scoped=true\"\n\nimport exportComponent from \"C:\\\\Users\\\\Quamir\\\\Downloads\\\\JavaPrepQ\\\\java-prep-q\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-b0f14e7c\"]])\n\nexport default __exports__","<template>\r\n    <div class=\"container\">\r\n        <p>Jump to question</p>\r\n        <div class=\"missed-questions\">\r\n            <div class=\"missed-questions__question\"\r\n                v-for=\"(answer, index) in wrongAnswers\"\r\n                :key=\"index\"\r\n                @click=\"goToQuestion(answer.location)\"\r\n            >\r\n                <p>Question {{ answer.questionNumber }}</p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n\r\n<script>\r\nexport default {\r\n    props:{\r\n        wrongAnswers:{\r\n            type: Array,\r\n            default: () => []\r\n        }\r\n    },\r\n    methods:{\r\n        goToQuestion(location){\r\n            window.scrollTo({\r\n                top: location,\r\n                left: 0,\r\n                behavior: 'smooth'\r\n            });\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.container{\r\n    width: 300px;\r\n    left: 1200px;\r\n    height: max-content;\r\n    min-height: 150px;\r\n    margin-right: 50px;\r\n    border-radius: 15px;\r\n    background-color: $primary-color;\r\n\r\n    & P{\r\n        font-size: rem(25);\r\n        color: #ffffff;\r\n        font-weight: bold;\r\n        margin-top: 15px;\r\n        margin-bottom: 15px;\r\n    \r\n    }\r\n\r\n    @media(min-width: 1592px){\r\n        left: 1250px;\r\n    }\r\n    @media(min-width: 1643px){\r\n        left: 1300px;\r\n    }\r\n    @media(min-width: 1678px){\r\n        left: 1350px;\r\n    }\r\n    @media(min-width: 1736px){\r\n        left: 1400px;\r\n    }\r\n    @media(min-width: 1781px){\r\n        left: 1450px;\r\n    }\r\n    @media(min-width: 1845px){\r\n        left: 1500px;\r\n    }\r\n    @media(min-width: 1900px){\r\n        left: 1550px;\r\n    }\r\n    @media(min-width: 1950px){\r\n        left: 1600px;\r\n    }\r\n}\r\n\r\n.missed-questions{\r\n    &__question{\r\n        width: 90%;\r\n        height: 60px;\r\n        background-color: $secondary-color;\r\n        margin: auto;\r\n        margin-bottom: 10px;\r\n        border-radius: 15px;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n\r\n\r\n        &:hover{\r\n            cursor: pointer;\r\n            background-color:#738ea9;\r\n        }\r\n\r\n        & p{\r\n            font-size: rem(25);\r\n            color: #ffffff;\r\n            font-weight: bold;\r\n        }\r\n    }\r\n}\r\n</style>","import { render } from \"./JumpToQuestion.vue?vue&type=template&id=5d32c66a&scoped=true\"\nimport script from \"./JumpToQuestion.vue?vue&type=script&lang=js\"\nexport * from \"./JumpToQuestion.vue?vue&type=script&lang=js\"\n\nimport \"./JumpToQuestion.vue?vue&type=style&index=0&id=5d32c66a&lang=scss&scoped=true\"\n\nimport exportComponent from \"C:\\\\Users\\\\Quamir\\\\Downloads\\\\JavaPrepQ\\\\java-prep-q\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-5d32c66a\"]])\n\nexport default __exports__","const errors = [\r\n  {\r\n    question: \"What is a syntax error in Java?\",\r\n    answer:\r\n      \"An error that occurs when the code violates the rules of the programming language.\",\r\n    explanation:\r\n      \"A syntax error is caused by incorrect syntax in the code, such as missing a semicolon, using incorrect capitalization, or misspelling a keyword. This type of error is usually caught by the compiler when the code is being compiled.\",\r\n      img: \"\",\r\n  },\r\n\r\n  {\r\n    question: \"What is a logical error in Java?\",\r\n    answer:\r\n      \"An error that occurs when the code compiles and runs without errors, but the output is not what was expected.\",\r\n    explanation:\r\n      \"A logical error is caused by a mistake in the logic of the program. It can be difficult to detect because the code will still compile and run without errors, but the output will not be what was intended.\",\r\n      img: \"\",\r\n  },\r\n\r\n  {\r\n    question: \"What is a runtime error in Java?\",\r\n    answer:\r\n      \"An error that occurs while the program is running.\",\r\n    explanation:\r\n      \"A runtime error can be caused by a variety of factors, such as dividing by zero, accessing an array out of bounds, or attempting to open a file that does not exist. This type of error is not caught by the compiler and can cause the program to crash.\",\r\n      img: \"\",\r\n  },\r\n\r\n  {\r\n    question: \"What is a null pointer exception in Java?\",\r\n    answer:\r\n      \"An error that occurs when the program tries to access an object or variable that is null.\",\r\n    explanation:\r\n      \"A null pointer exception can occur when the program tries to access a method or property of an object that is null, or when the program tries to access an element of an array that is null. This type of error can be difficult to diagnose because it may not occur until the program is in a certain state.\",\r\n      img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between a syntax error and a logical error in Java?\",\r\n    answer:\r\n      \"A syntax error occurs when the code violates the language grammar rules, while a logical error occurs when the code is syntactically correct but produces unexpected results.\",\r\n    explanation:\r\n      \"Syntax errors are caused by typos, missing or misplaced punctuation, incorrect use of keywords, or incorrect syntax structure. Logical errors are caused by incorrect program logic or algorithms. Syntax errors are usually detected by the compiler, while logical errors may not be detected until the program is executed. Both types of errors can be fixed by debugging the code to find and correct the underlying problem.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between a runtime error and a logical error in Java?\",\r\n    answer:\r\n      \"A runtime error occurs during the execution of a program, while a logical error occurs when the code is syntactically correct but produces unexpected results.\",\r\n    explanation:\r\n      \"Runtime errors are usually caused by unexpected conditions or input values that cause the program to terminate abnormally. Logical errors are caused by incorrect program logic or algorithms. Runtime errors can be fixed by adding error handling code to the program to detect and respond to unexpected conditions, while logical errors can be fixed by debugging the code to find and correct the underlying problem. Both types of errors can be difficult to identify and may require careful testing and analysis to diagnose.\",\r\n    img: \"\",\r\n  },\r\n  {\r\n    question:\r\n      \"What is the difference between a syntax error and a runtime error in Java?\",\r\n    answer:\r\n      \"A syntax error occurs when the code violates the language grammar rules, while a runtime error occurs during the execution of a program.\",\r\n    explanation:\r\n      \"Syntax errors are caused by typos, missing or misplaced punctuation, incorrect use of keywords, or incorrect syntax structure. Runtime errors are usually caused by unexpected conditions or input values that cause the program to terminate abnormally. Syntax errors are usually detected by the compiler, while runtime errors may not be detected until the program is executed. Both types of errors can be fixed by debugging the code to find and correct the underlying problem.\",\r\n    img: \"\",\r\n  },\r\n];\r\n\r\nexport default errors;\r\n","import { render } from \"./QuestionPage.vue?vue&type=template&id=1d583de0&scoped=true\"\nimport script from \"./QuestionPage.vue?vue&type=script&lang=js\"\nexport * from \"./QuestionPage.vue?vue&type=script&lang=js\"\n\nimport \"./QuestionPage.vue?vue&type=style&index=0&id=1d583de0&lang=scss&scoped=true\"\n\nimport exportComponent from \"C:\\\\Users\\\\Quamir\\\\Downloads\\\\JavaPrepQ\\\\java-prep-q\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-1d583de0\"]])\n\nexport default __exports__","<template>\r\n    <section>\r\n      <div class=\"title\">\r\n        <h1 class=\"title__text\">Topics Page</h1>\r\n        <span class=\"title__sub-text\">V 2.0</span>\r\n      </div>\r\n      <div class=\"topics\">\r\n          <base-link \r\n            :linkPath=\"'questions/' + topic\"\r\n            class=\"topics__link\"\r\n            v-for=\"(topic, index) in topicsArray\"\r\n            :key=\"index\"\r\n            >\r\n              <p class=\"topics__text\">{{ topic }}</p>\r\n          </base-link>\r\n      </div>\r\n    </section>\r\n</template>\r\n\r\n<script>\r\nimport BaseLink from \"../components/BaseLink.vue\";\r\nimport url from \"../mixins/url\"\r\n\r\nimport qnotes from '../topicArrays/qnotes';\r\nimport codingQuestions from '../topicArrays/codingQuestions';\r\nexport default {\r\n  components: { BaseLink },\r\n  mixins: [url],\r\n  data(){\r\n    return{\r\n      topicsArray : []\r\n    }\r\n  },\r\n  methods : {\r\n    renderTopics(){\r\n      let pageName = this.getPageName();\r\n      if(pageName == 'qnotes'){\r\n          this.topicsArray = qnotes;\r\n          return pageName;\r\n      }\r\n      if(pageName == 'codingquestions'){\r\n        this.topicsArray = codingQuestions;\r\n        return pageName;\r\n      }\r\n    },\r\n  },\r\n  created(){\r\n    this.renderTopics();\r\n    console.log('hello');\r\n   }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\nsection {\r\n    padding-bottom: 50px;\r\n    min-height: 84vh;\r\n}\r\n.title {\r\n  display: flex;\r\n  justify-content: center;\r\n  &__text {\r\n    font-size: rem(40);\r\n  }\r\n  &__sub-text {\r\n    width: 10%;\r\n    margin-top: auto;\r\n    margin-bottom: auto;\r\n    font-size: rem(40);\r\n    color: #f8b160;\r\n  }\r\n}\r\n\r\n.topics{\r\n    width: 98%;\r\n    height: 100%;\r\n    margin: auto;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n    flex-wrap: wrap;\r\n    padding-left: 10px;\r\n\r\n    &__link{\r\n      width: 20%;\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      margin-top: 40px;\r\n      margin-right: 15px;\r\n    }\r\n\r\n    &__text{\r\n      font-size: rem(25);\r\n      font-weight: 600;\r\n      height: 100%;\r\n      padding-top: 8px;\r\n    }\r\n}\r\n</style>\r\n","export default{\r\n    methods: {\r\n        getPageName() {\r\n            let url = window.location.href;\r\n            let pageName = url.substring(url.lastIndexOf(\"/\") + 1);\r\n            return pageName;\r\n        },\r\n    }\r\n}","const qNotes = [\r\n    'Terminal',\r\n    'versioncontrol',\r\n    'introjava',\r\n    'primitive-data-types',\r\n    'reference-data-types',\r\n    'string-handling',\r\n    'variable-declaration----',\r\n    'arrays',\r\n    'booleans',\r\n    'logical-and-comparison-op-',\r\n    '.equals()-and-comments',\r\n    'errors',\r\n    'strictly-typed',\r\n    'instantianting-a-class',\r\n    'primitive-and-nonprimitive',\r\n    'operators',\r\n    'attributes-and-Instance-variables',\r\n    'classes-and-Reference-data-types',\r\n    'creating-objects',\r\n    'constructors',\r\n    'strings',\r\n    'dot-notation',\r\n    'encapsulation',\r\n    'access-modifiers',\r\n    'interface',\r\n    'getters',\r\n    'setters',\r\n    'this-keyword',\r\n    'wrapper-classes',\r\n    'strings2'\r\n];\r\n\r\nexport default qNotes;","const codingQuestions =[\r\n    'arrays1'\r\n];\r\n\r\nexport default codingQuestions;","import { render } from \"./TopicPage.vue?vue&type=template&id=d3d1ab16&scoped=true\"\nimport script from \"./TopicPage.vue?vue&type=script&lang=js\"\nexport * from \"./TopicPage.vue?vue&type=script&lang=js\"\n\nimport \"./TopicPage.vue?vue&type=style&index=0&id=d3d1ab16&lang=scss&scoped=true\"\n\nimport exportComponent from \"C:\\\\Users\\\\Quamir\\\\Downloads\\\\JavaPrepQ\\\\java-prep-q\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-d3d1ab16\"]])\n\nexport default __exports__","import { createRouter, createWebHashHistory  } from 'vue-router';\r\nimport HomePage from '../pages/HomePage.vue';\r\nimport QuestionPage from '../pages/QuestionPage.vue';\r\nimport TopicPage from '../pages/TopicPage.vue';\r\n\r\nconst router = createRouter({\r\n    history: createWebHashHistory (),\r\n    routes: [\r\n        { path: '/', component: HomePage },\r\n        { path: '/questions/:subject', component: QuestionPage},\r\n        { path: '/topics/:page', component: TopicPage},\r\n        { path: '/topics/codingquestions', component: TopicPage}\r\n    ]\r\n});\r\n\r\nexport default router;","import { createApp } from 'vue'\nimport App from './App.vue'\nimport router from './router'\n\nconst app = createApp(App);\n\napp.use(router);\napp.mount('#app');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.p = \"https://quamir.github.io/JavaPrepQ/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkjava_prep_q\"] = self[\"webpackChunkjava_prep_q\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [998], function() { return __webpack_require__(9412); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createElementBlock","_createVNode","_component_vue_header","_component_router_view","_component_vue_footer","_createElementVNode","class","src","_imports_0","alt","_imports_1","_component_router_link","to","_hoisted_1","_hoisted_2","_hoisted_3","script","__exports__","components","VueHeader","VueFooter","render","_toDisplayString","$data","numOfQuestions","_component_base_link","linkPath","_hoisted_4","_hoisted_5","href","$props","_renderSlot","_ctx","$slots","undefined","props","type","String","required","introJava","question","answer","explanation","img","primitiveDataTypes","refernceDataTypes","terminal","versionControl","stringHandling","VariableDecIntIns","arrays","booleans","logicalAndComparison","dotEqualsAndComments","stricklyTyped","instantiatingAclass","primitiveAndNonPrimitive","operators","attributesAndInstanceVar","classesAndReferenceDataTypes","creatingObjects","constructors","strings","dotNotation","encapsulation","accessModifiers","interfaceJava","getters","setters","thisKeyword","wrapperClasses","Strings2","codingArrays1","options","BaseLink","data","methods","questionAmount","this","strings2","length","arrays1","created","_component_info_panel","answeredQuestions","correctAnswers","onGradeTestClicked","$options","gradeTest","onRestartTest","restartTest","_Fragment","_renderList","shuffledTestQuestions","index","_createBlock","_component_question_card","key","ref","questions","questionNumber","questionText","onQuestionOptionClicked","handleQuestionOptionClicked","_component_jump_to_question","wrongAnswers","_normalizeClass","answerWarning","answerCorrect","questionImg","optionsArray","_component_question_option","onOptionClicked","handleOptionClicked","optionIndex","testGraded","isClicked","onClick","_cache","args","handleClick","Array","Number","Boolean","randomIndex","isCorrect","$parent","$emit","testRestart","Math","floor","random","QuestionOption","testQuestions","requuired","computed","questionWithAnswer","find","q","Object","prototype","hasOwnProperty","call","filter","option","push","sort","tempquestions","uniqueRandomIndexes","getUniqueRandomIndexes","i","includes","clickedOption","$refs","questionOptions","forEach","num","maxIndex","indexes","Set","size","add","from","getCorrectAnswers","getWrongAnswers","wrongAnswerFound","some","location","$el","offsetTop","_hoisted_7","testName","$event","_hoisted_6","getUrlName","url","window","substring","lastIndexOf","goToQuestion","default","scrollTo","top","left","behavior","errors","QuestionCard","InfoPanel","jumpToQuestion","selectedOptions","answeredQuestionsSet","isTestGraded","shuffledQuestions","j","questionIndex","delete","questionCards","questionCard","wrongAnswerNumber","console","log","answerdQuestions","getTestName","setTest","terminalQuestions","referenceDataTypes","strictlyTyped","error","topicsArray","topic","getPageName","pageName","qNotes","codingQuestions","mixins","renderTopics","qnotes","router","createRouter","history","createWebHashHistory","routes","path","component","HomePage","QuestionPage","TopicPage","app","createApp","App","use","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","keys","every","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","g","globalThis","Function","e","obj","prop","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","id","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}